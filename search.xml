<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分布式锁（Redis）</title>
    <url>/2020/08/14/74-redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><hr>
<p>&emsp;&emsp;锁是我们在程序开发中必不可少的，一旦程序出现了<strong>竞争的条件</strong>也就是说数据被多个线程共享，那么就很有可能出现<strong>争</strong>用和冲突的情况，进而会破坏数据共享的一致性。而现在的系统多为分布式系统，对于分布式系统当然就引出了分布式锁的概念。</p>
<a id="more"></a>
<h4 id="分布式锁的概述"><a href="#分布式锁的概述" class="headerlink" title="分布式锁的概述"></a>分布式锁的概述</h4><hr>
<h5 id="分布式锁的实现方式"><a href="#分布式锁的实现方式" class="headerlink" title="分布式锁的实现方式"></a>分布式锁的实现方式</h5><p>分布式锁的实现方式一般有以下的三种实现方法：</p>
<ul>
<li><p>基于关系型数据库的分布式锁</p>
</li>
<li><p>基于缓存实现的分布式锁</p>
</li>
<li><p>基于Zookeeper实现的分布式锁</p>
<blockquote>
<p>其中 Redis 简便灵活，高可用分布式，且支持持久化。本文即介绍基于 Redis 实现分布式锁。</p>
</blockquote>
</li>
</ul>
<h5 id="分布式锁和普通锁的区别"><a href="#分布式锁和普通锁的区别" class="headerlink" title="分布式锁和普通锁的区别"></a>分布式锁和普通锁的区别</h5><p>&emsp;&emsp;与普通锁不同的是，分布式锁是指分布式环境下，系统部署在多个机器中，实现多进程分布式互斥的一种锁。为了保证多个进程能看到锁，锁被存在公共存储（比如 Redis、Memcache、数据库等三方存储中），以实现多个进程并发访问同一个临界资源，同一时刻只有一个进程可访问共享资源，确保数据的一致性。</p>
<h4 id="Redis分布式锁的实现"><a href="#Redis分布式锁的实现" class="headerlink" title="Redis分布式锁的实现"></a>Redis分布式锁的实现</h4><p>1、使用setnx(set if not exists)命令 将key设置为value，当键不存在时，才能成功，若键存在，什么也不做，成功返回1，失败返回0 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx lock_1 value1</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">... do something ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx lock_1 value1</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr></table></figure>

<p>但是这种方式有一个问题，如果逻辑执行到中间出现了异常，就会导致<code>del</code>命令永远也不会被执行，这样就会陷入到死锁中，锁永远得不到释放。</p>
<p>2、于是就有了下面这种方法，给锁加上一个过期时间即使出现了异常，如果达到了那个过期时间锁就会自动释放。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx lock_1 value1</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire lock_1 10</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">... do something ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del lock_1</span></pre></td></tr></table></figure>

<p>3、虽然上面加上过期时间解决了第1种的死锁问题，但是又会有一个新的问题，在setnx  expire 两条指令是分开的所以 如果在setnx 和 expire之间挂掉的话，expire 不能被执行到又会产生新的死锁问题。</p>
<blockquote>
<p>随便说一下也许你会想到将 setnx  和 expire 放到一个<strong>事务</strong>中去这样 expire 就可以依赖于 setnx 执行了，但是如果 setnx 没有抢到锁的话expire 是不应该被执行的，可想事务中没有if - else 的操作事务的特点就是要么都执行，要么都不执行。</p>
</blockquote>
<p> 为了解决上面的问题Redis2.8 加入了 set 指令的扩展参数，，使得 setnx 和 expire 指令可以一起执行，彻底解决了分布式锁的乱象。</p>
<blockquote>
<p><a href="http://doc.redisfans.com/string/set.html" target="_blank" rel="noopener">http://doc.redisfans.com/string/set.html</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set lock_1 value1 ex 10 nx</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK</span></pre></td></tr></table></figure>

<p><strong>超时问题</strong></p>
<p>Redis 的分布式锁不能解决超时问题，如果在加锁（set）和释放锁(del)之间的逻辑执行的太长，以至于超出了锁的超时时间，就会出现问题。因为这时候第一个线程持有的锁过期了，临界区的逻辑还没有执行完，这个时候第二个线程就提前重新持有了这把锁，如果这时候上一个锁的del指令刚好执行到就会将现在的这个刚刚获取锁的线程给释放，以后的数据也就乱了。</p>
<p>为了避免上面的那个问题，Redis的分布式锁尽量不要用于较长时间的任务。有一个安全点的办法就是给set value 设置一个随机数，释放锁时先匹配随机数如果一致在释放锁。这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于<code>del if equals</code>这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">"get"</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">"del"</span>,KEYS[<span class="number">1</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;&emsp;分布式锁的重点在于互斥，只有客户端获取了锁才可以被执行，当然我上面讲的只是在简单的环境中。如果是在真实的环境中肯定还会更复杂。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>从这里明白golang接口的赋值过程发生了什么并打开接口使用的便利</title>
    <url>/2020/06/28/74-interface/</url>
    <content><![CDATA[<p>&emsp;&emsp;<strong>golang</strong>语言的类型常用于代表某种能力或某种特征。在本文中主要讲明白以下几个概念。①<code>动态值</code>、<code>动态类型</code>、<code>静态类型</code>②当我们为一个接口变量赋值时会发生什么③接口变量在什么情况下才真正为<code>nil</code>④接口之间的组合及其意义。下面我们一起走入这篇文章吧。</p>
<a id="more"></a>

<h4 id="明确概念"><a href="#明确概念" class="headerlink" title="明确概念"></a>明确概念</h4><p>&emsp;&emsp;在本文的开端我们要明确的几个概念<strong>动态值</strong>、<strong>动态类型</strong>、<strong>静态类型</strong> 。好~开始举例子理解：</p>
<p><strong>栗子：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     SetName(name <span class="keyword">string</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  	 Name() <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   	 Category() <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	name <span class="keyword">string</span> <span class="comment">// 名字。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog *Dog)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dog.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> dog.name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog *Dog)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dog.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dog := Dog&#123;<span class="string">"little pig"</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> pet Pet = &amp;dog</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>&emsp;&emsp;首先声明了一个<code>Pet</code>接口，根据<code>golang</code>中的<code>duck typing</code>概念的接口实现方式，在<code>*Dog</code>中实现了<code>Pet</code>的全部方法，故我们就说<code>Dog</code>是<code>Pet</code>接口的实现类型。好了下面我们介绍，那几个概念吧！对于上边<code>pet</code>变量我们赋给它的值可以叫做它的实际值也称<strong>动态值</strong>，该值的类型叫做这个变量的<strong>动态类型</strong>（PS：<code>*Dog</code>）与动态类型相对应的<strong>静态类型</strong>，对于<code>pet</code>它的静态类型就是<code>Pet</code>且永远是<code>Pet</code>它不会随着我们赋给的值变化而变化。如果上面的<code>&amp;dog</code>、换成<code>&amp;fish</code>那么它的动态值就发生变化了这个概念也就清楚了。</p>
<h4 id="当我们为一个接口变量赋值会发生什么"><a href="#当我们为一个接口变量赋值会发生什么" class="headerlink" title="当我们为一个接口变量赋值会发生什么"></a>当我们为一个接口变量赋值会发生什么</h4><p><strong>举个栗子来说明</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   Name() <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Category() <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   name <span class="keyword">string</span> <span class="comment">// 名字。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog *Dog)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   dog.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">return</span> dog.name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span> <span class="title">Category</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">return</span> <span class="string">"dog"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   dog := Dog&#123;<span class="string">"little pig"</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> pet Pet = dog</span></pre></td></tr><tr><td class="code"><pre><span class="line">   dog.SetName(<span class="string">"monster"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="comment">// %T 表示相应的类型值 ， 对于interface&#123;&#125;, %v会打印实际类型的值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   fmt.Printf(<span class="string">"%T %v\n"</span>, pet, pet) <span class="comment">// 输出: main.Dog &#123;little pig&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   fmt.Printf(<span class="string">"%T %v"</span>, dog, dog) <span class="comment">// 输出: main.Dog &#123;monster&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>首先我们先明白一个事情，在我们利用<code>setName()</code>改变<code>name</code>值的时候看输出结果并没有改变<code>pet</code>的值其中也不难想象在大多数语言中对于赋值都是拷贝了一个副本到被赋值的那个值。那么<strong>重点来了</strong>如果 <code>pet</code>被赋值仅仅是只有副本吗？带着问题我们继续…我们都知道接口本身是不会被实例化的，在没有被赋予实际的值的时候，它的值一定会是<code>nil</code>，这也是它的零值。再看上面的<code>fmt.Printf(&quot;%T %v\n&quot;, pet, pet)</code>结果可以看出<code>pet</code>中不仅存储的是<code>dog</code>值的副本，而是将态类型会与它的动态值一起被存储起来了。所以在这里说<strong>pet的值与dog的值也是不同的。这不仅仅是副本与原值的那种不同。</strong> 严格来讲，这样一个变量的值其实是这个专用数据结构的一个实例。我们就把这个专用的数据结构叫做<code>iface</code> ,<strong>iface的实例会包含两个指针，一个是指向类型信息的指针，另一个是指向动态值的指针。</strong></p>
<h4 id="一个接口变量的值在什么情况下为nil"><a href="#一个接口变量的值在什么情况下为nil" class="headerlink" title="一个接口变量的值在什么情况下为nil"></a>一个接口变量的值在什么情况下为nil</h4><p><strong>举栗来看答案</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Pet <span class="keyword">interface</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   Name() <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Category() <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   name <span class="keyword">string</span> <span class="comment">// 名字。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog *Dog)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   dog.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">return</span> dog.name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span> <span class="title">Category</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">return</span> <span class="string">"dog"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> dog1 *Dog</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> dog1 == <span class="literal">nil</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      fmt.Println(<span class="string">"The first dog is nil."</span>) <span class="comment">// 输出 The first dog is nil.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      fmt.Println(<span class="string">"The first dog is not nil."</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   dog2 := dog1</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> dog2 == <span class="literal">nil</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      fmt.Println(<span class="string">"The second dog is nil."</span>) <span class="comment">// 输出 The second dog is nil.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      fmt.Println(<span class="string">"The second dog is not nil."</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> pet Pet = dog2</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> pet == <span class="literal">nil</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      fmt.Println(<span class="string">"The pet is nil."</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      fmt.Println(<span class="string">"The pet is not nil."</span>) <span class="comment">// 输出 The pet is not nil.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>由上边的例子我们可以看到当我们声明了<code>*Dog</code>类型的变量<code>dog1</code>并没有对它进行初始化，显然<code>dog1</code>的值为<code>nil</code>然后把该变量赋给<code>dog2</code> ，<code>dog2</code>的值也为<code>nil</code>这时无容置疑的🤭。当我们把<code>dog2</code>的值赋给变量<code>pet</code>的时候<code>pet</code>为<code>nil</code>吗？上面的代码我已经给出了结果，那么你可以清楚的解释吗？<strong>分析：</strong> 当我们把<code>dog2</code>的值赋给变量<code>pet</code>的时候，<code>dog2</code>的值会先被复制，不过由于在这里它的值是<code>nil</code>，所以就没必要复制了。然后，Go 语言会用我上面提到的那个专用数据结构<code>iface</code>的实例包装这个<code>dog2</code>的值的副本，这里是<code>nil</code>。虽然被包装的动态值是<code>nil</code>，但是<code>pet</code>的值却不会是<code>nil</code>，因为这个动态值只是<code>pet</code>值的一部分而已。在 Go 语言中，我们把由字面量<code>nil</code>表示的值叫做<strong>无类型</strong>的<code>nil</code>。这是真正的<code>nil</code>，因为它的类型也是<code>nil</code>的。虽然<code>dog2</code>的值是真正的<code>nil</code>，但是当我们把这个变量赋给<code>pet</code>的时候，Go 语言会把它的<strong>类型</strong>和<strong>值</strong>放在<strong>一起考虑</strong>， 故文中 <code>pet == nli</code> 为<code>false</code>。那么，怎样才能让一个接口变量的值真正为<code>nil</code>呢？要么只声明它但不做初始化，要么直接把字面量<code>nil</code>赋给它。</p>
<blockquote>
<p>参考：Go语言核心36讲</p>
</blockquote>
<p><strong>接口之间的组合及其意义</strong></p>
<p>&emsp;&emsp;在<code>golang</code>中接口组合的方式和结构体的组合方式是相同的，都是通过类型间的嵌入来实现的（把一个接口类型的名称直接写到另一个接口类型的成员变量中）Go 语言团队鼓励我们声明体量较小的接口，并建议我们通过这种接口间的组合来扩展程序、增加程序的灵活性。这是因为相比于包含很多方法的大接口而言，<strong>小接口</strong>可以更加专注地表达<strong>某一种能力</strong>或<strong>某一类特征</strong>，同时也更容易被组合在一起。通过小接口不断地组合形成一个较大的接口。</p>
<p><strong>PS:</strong> 最近在公司做开发也深感单一职责重要性，所以小接口我是非常接受的。</p>
<blockquote>
<p>参考：Go语言核心36讲</p>
</blockquote>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang结构体值与指针、多层嵌套小秘密</title>
    <url>/2020/06/27/73-Struct/</url>
    <content><![CDATA[<p>&emsp;&emsp;最近学了<code>golang</code> <code>Struct</code>发现里面有一些概念还是有必要弄清的，当然我说的不是基本的如何定义的概念，那些概念相信学过其它语言的小伙伴也能进行类比的学习。开篇点题上问题，首先第一个问题呢 <code>你是否清楚值方法和指针方法的区别呢</code>，第二个问题 <code>一个结构体中嵌套另一个结构如果有重名的方法或者类型会发生什么呢？</code>下面将一一展开讲解。</p>
<a id="more"></a>

<h4 id="golang值方法和指针方法奇妙之处"><a href="#golang值方法和指针方法奇妙之处" class="headerlink" title="golang值方法和指针方法奇妙之处"></a>golang值方法和指针方法奇妙之处</h4><p>首先值方法的<strong>接收者</strong>是该方法所属类型值的一个副本。我们在该方法内对值进行修改不会影响原来的值（除非类型本身就是引用比如切片或者字典）。指针方法的接收者，是该方法所属的那个进本类型值的指针值的一个副本，那我们在方法内对指针进行修改自然也就修改了原来的值。</p>
<p><strong>举个栗子</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   name <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   age <span class="keyword">int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   skinColor <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ac Person)</span> <span class="title">printfSkinColor</span><span class="params">()</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   fmt.Printf(<span class="string">"skinColor%s"</span>, ac.skinColor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ac Person)</span> <span class="title">set</span><span class="params">(skinColor <span class="keyword">string</span>)</span></span>  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   ac.skinColor = skinColor</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ac *Person)</span> <span class="title">setColor</span><span class="params">(skinColor <span class="keyword">string</span>)</span></span>  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   ac.skinColor = skinColor</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	blackPerson := Person&#123;name: <span class="string">"xiaohei"</span>, age: <span class="number">20</span>, skinColor: <span class="string">"black"</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fmt.Println(blackPerson) <span class="comment">// 输出 &#123;xiaohei 20 black&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	blackPerson.set(<span class="string">"white"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fmt.Println(blackPerson) <span class="comment">// 输出 &#123;xiaohei 20 black&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	blackPerson.setColor(<span class="string">"red"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fmt.Println(blackPerson) <span class="comment">// &#123;xiaohei 20 red&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>由结果我们看出<strong>值</strong>和<strong>指针的区别</strong> ，不知道细心的小伙伴有没有发现，我在调用方法时指针和普通的值却没有区别如果放到别的语言那这是非常不合理的。在go语言中go会吧<code>blackPerson.setColor(&quot;red&quot;)</code>转换成<code>(&amp;blackPerson).setColor(&quot;red&quot;)</code>即：先去取到指针的值，然后在去通过指针的值去调用方法。看到这里这个问题也就一目了然了。</p>
<h4 id="结构体内嵌入另一个结构体，如果有同名的方法名会发生什么"><a href="#结构体内嵌入另一个结构体，如果有同名的方法名会发生什么" class="headerlink" title="结构体内嵌入另一个结构体，如果有同名的方法名会发生什么"></a>结构体内嵌入另一个结构体，如果有同名的方法名会发生什么</h4><p><strong>举例说明</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   name <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   age <span class="keyword">int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   skinColor <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   family Family</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Family <span class="keyword">struct</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   familyName <span class="keyword">string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ac Family)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"familyName: %s:"</span>,ac.familyName)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ac Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"name: %s age: %s skinColor: %s family: %s"</span>, ac.name, ac.age, ac.skinColor, ac.family)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	Corleone := Family&#123;familyName: <span class="string">"Corleone"</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	person := Person&#123;name: <span class="string">"Tom"</span>, age: <span class="number">40</span>, skinColor: <span class="string">"black"</span>, family: Corleone&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	fmt.Printf(<span class="string">"%s"</span>, person) <span class="comment">// 输出 name: Tom age: %!s(int=40) skinColor: black family: familyName: Corleone</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>由上面的代码我们可以看到，当我们 <code>%s</code>的格式输出的时候会自动调用<code>String()</code>函数，但是为什么不会调用<code>family</code>的呢?因为当嵌套的时候会发生”<strong>屏蔽</strong>“的现象。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang数组切片“同”与“不同”</title>
    <url>/2020/06/22/72-golang-Slice/</url>
    <content><![CDATA[<h4 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h4><p>&emsp;&emsp;自从5月份开始我的博客已经停更一个多月了，在这期间发生了很多事情目前的也是在实习期每天晚上9点到家学一会也就不在想写博客了，我感觉这是一个主要的停更原因。马上也要秋招了多更多总结争取写出优质的文章。</p>
<p>&emsp;&emsp;废话不多说开篇点题，今天我要讲的内容是关于<code>golang</code> 的 <code>array</code>（数组） 和 <code>slice</code>（切片）的“同”与“不同”以及slice如何扩容。</p>
<a id="more"></a>

<h4 id="array-amp-amp-slice-“同”与“不同”"><a href="#array-amp-amp-slice-“同”与“不同”" class="headerlink" title="array &amp;&amp; slice “同”与“不同”"></a>array &amp;&amp; slice “同”与“不同”</h4><p>&emsp;&emsp;首先我们先讲数组和切片的<strong>相同点</strong>它们都属于集合类的类型，并且它们的值都可以存储某一种类型的值或者元素。数组和切片的最重要的<strong>不同</strong>是切片是可变长的，数组是固定长度的。在这里有必要的说一句，其实切片就是对数组的一层简单的封装，因为在每个切片的底层数据结构中一定会包含一个数组，并且切片是对数组的<strong>引用</strong>。</p>
<p><strong>举个栗子：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr :=[<span class="number">6</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(arr) <span class="comment">// 输出 [0 1 2 3 4 5]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">slice := arr[<span class="number">1</span>:<span class="number">4</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(slice) <span class="comment">// 输出 [1 2 3] arr[1]到arr[3]不包括arr[4]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">slice[<span class="number">1</span>] = <span class="number">7</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(arr) <span class="comment">// 输出 [0 1 7 3 4 5]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(slice) <span class="comment">// 输出 [1 7 3]</span></span></pre></td></tr></table></figure>

<p>由上面的代码我们可以看出当改变<code>slice[1]</code>的时候原数组的值也改变了，很清晰的证明了切片是数组的<code>引用</code>。既然讲到了引用简单扩展一下，在<code>golang</code>中是没有“传值或者传引用的概念的”。在<code>golang</code>中只需要看传递的类型就可以了如果是引用类型那就是传引用如果是值类型那就是传值，同时上边我们已经介绍了切片属于引用类型同属于引用类型的还有<strong>字典类型</strong>、<strong>通道类型</strong>、<strong>函数类型等</strong>，同属于值类型的有基本的数据结构以及结构体类型。</p>
<h4 id="slice的扩容机制"><a href="#slice的扩容机制" class="headerlink" title="slice的扩容机制"></a>slice的扩容机制</h4><p>&emsp;&emsp;上面的已经说到数组的长度是固定的那么数组的容量也就永远等于长度，都是不可变的。切片的容量却不一定相等（可变长的）。这里既然提到了容量和长度请看下面的例子吧！</p>
<p><strong>举个栗子：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The len of s1: %d\n"</span>, <span class="built_in">len</span>(s1))  <span class="comment">// 输出 The len of s1: 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The cap of s1: %d\n"</span>, <span class="built_in">cap</span>(s1))  <span class="comment">// 输出 The cap of s1: 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The value of s1: %d\n"</span>, s1)  <span class="comment">// 输出 The value of s1: [0 0 0]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">s2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">6</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The len of s2: %d\n"</span>, <span class="built_in">len</span>(s2)) <span class="comment">// 输出 The len of s2: 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The cap of s2: %d\n"</span>, <span class="built_in">cap</span>(s2)) <span class="comment">// 输出 The cap of s2: 6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The value of s2: %d\n"</span>, s2)  <span class="comment">// 输出 The value of s2: [0 0 0]</span></span></pre></td></tr></table></figure>

<p>首先我先介绍一下make命令吧。 make 是专门用来创建 slice、map、channel 的值的。它返回的是被创建的值，并且立即可用。<br>在上面的例子中我们可以清晰的看，在创建s1的同时我没有指定s1的容量所以s1的长度和容量是相等的，在创建s2的时候指定切片的容量所以s2的长度为3容量为6。这里我们讲到了容量上面我们也提到了切片是可变长的，那么一旦一个切片容纳的元素数量大于切片的容量时这时将会发生扩容。但是切片是如何扩容的呢？时增加原来切片的大小吗？当然不是….</p>
<p><strong>举个栗子：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s3 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">1024</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The len of s1: %d\n"</span>, <span class="built_in">len</span>(s3))  <span class="comment">// 输出 The len of s1: 1024</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The cap of s1: %d\n"</span>, <span class="built_in">cap</span>(s3))  <span class="comment">// 输出 The cap of s1: 1024</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">s3 = <span class="built_in">append</span>(s3, <span class="number">1</span>, <span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The len of s1: %d\n"</span>, <span class="built_in">len</span>(s3))  <span class="comment">// 输出 The len of s1: 1026</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"The cap of s1: %d\n"</span>, <span class="built_in">cap</span>(s3))  <span class="comment">// 输出 The cap of s1: 1280</span></span></pre></td></tr></table></figure>

<p><strong>golang切片扩容的过程：</strong> 当一个切片的元素数量大于原来元素的数量的时候，它并不会改变现有的切片的容量，而是生成一个容量更大切片，然后把原有的元素和新元素拷贝到这个新的切片中去，一般情况下我们可以简单的认为新切片是原来切片的2倍。在原来的切片大于或等于1024时，go语言将以原来的1.25被作为新容量的基准。新容量的基准会被调整不断的与1.25倍相乘，直到不小于原长度与要追加的原长度之和。讲到这里上面的结果也就非常的清晰了。</p>
<p><strong>讲到这里可能会有一个疑问？</strong>切片是基于数组的那在扩容的时候数组会发生什么变化呢？答案是：不发生变化。在生成新的切片的同时也生成了新的数组。</p>
<p><strong>举个栗子：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr1 := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">s4 := arr1[<span class="number">0</span>:<span class="number">5</span>] <span class="comment">// [0,5)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">s5 := s4</span></pre></td></tr><tr><td class="code"><pre><span class="line">s5 = <span class="built_in">append</span>(s5, <span class="number">6</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">s4[<span class="number">1</span>] = <span class="number">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(s4) <span class="comment">// 输出 [0 10 2 3 4]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fmt.Println(s5) <span class="comment">// 输出 [0 1 2 3 4 6]</span></span></pre></td></tr></table></figure>

<p>从栗子中我们可以看出切片是引用类型但是s4发生改变是 s5 却没有改变，这是因为s5发生了扩容生成了一个新的底层数组。</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>&emsp;&emsp;到这里结束了go语言中的数组和切片中的几个概念的讲解你理解了吗？如果你有更好的想法可以留言一起交流哟。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>往后余生多给自己一些时间</title>
    <url>/2020/06/13/75-2021%E5%B9%B4/</url>
    <content><![CDATA[<h3 id="往后余生多给自己一些期待"><a href="#往后余生多给自己一些期待" class="headerlink" title="往后余生多给自己一些期待"></a>往后余生多给自己一些期待</h3><hr>
<p>2021年6月我毕业了，这时的我少了许多稚嫩，多了一些成熟。</p>
<p>内心五谷杂陈，不舍涌上心头。</p>
<p>这一年有许多遗憾，但完成了许多事情。</p>
<a id="more"></a>
<hr>
<h3 id="我的2020年"><a href="#我的2020年" class="headerlink" title="我的2020年"></a>我的2020年</h3><p>&nbsp;&nbsp;我的2020年被突然到来的疫情将计划打乱。2020年面试-&gt;offer-&gt;结果</p>
<p><strong>面试前期准备</strong></p>
<p>回想起2019 ~ 2020过渡的春节期间，这个时间段也是找实习的高峰期。各个互联网公司的招聘<code>源源不断</code>。仿佛评书醒目一样给我提醒，意识到自己要找工作了，再不行动就晚了。开始了每天埋头复习，读技术书、读技术博客、看面经、刷算法、写简历、投简历，每天都在重复。心也踏实了下来，用了10天的时间将我在工作室学的两年的技术过了一遍，然后去抓重点补缺扬长。</p>
<p><strong>获得offer</strong></p>
<p>我很明白我读的学校不是双一流如果没有扎实的基础和更早的意识，我的机会很少很少。我是幸运的在2020年4月份也就是过完春节的一个月之后我拿到了人生中第一个<code>offer</code>在同一时间另一家公司也抛出了橄榄枝。</p>
<p>最后我选择去了<code>36kr</code>对没听错，这家公司很好真的很好，学到了太多太多。再拿offer之前我有过太多太多的焦虑，在看到许多人早早的拿到offer，而我面完却没了消息我一度陷入过自我怀疑，甚至失眠。</p>
<p><strong>有结果</strong></p>
<p>结果是好的，当我再次复盘以前的<strong>事</strong>和<strong>情</strong>觉得自己也行也不差。</p>
<p>正如宫崎骏所写：“结果怎样并不重要，过程值得回忆才是最美好的！”。</p>
<p>&nbsp;&nbsp;2020辗转几次换了三家公司从科技网站到教育直播最后再到商业产品，所幸来到了自己喜欢的公司，喜欢的部门，喜欢的氛围。<strong>往后余生多给自己一些期待</strong></p>
<h3 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h3><p>&nbsp;&nbsp;读书学习需要方法和技巧，工作亦是如此。多些思考，多些复盘，多些总结。</p>
<h4 id="我的工作方法论"><a href="#我的工作方法论" class="headerlink" title="我的工作方法论"></a>我的工作方法论</h4><p>&nbsp;&nbsp;对于我工作能力的提升帮助很大的属《左耳听风》和《10x程序员工作法》。</p>
<p>对于《10x程序员工作法》要懂得掌握主动权，忙到点子上，作为初入职场的我们不懂的如何及时暴露那些问题，如何分解大任务，那些需要沟通那些需要及时反馈可以先从这本书的框架套起，慢慢熟悉形成自己的东西，对于这本书我习惯上班路上听一遍，下班回来读一遍来当作复习，受益匪浅。</p>
<p>关于《左耳听风》如果学习工作技巧，可以先去读<code>高效学习</code>和<code>高效沟通</code>两个章节。这本书不管是技术文章还是程序员修炼都会对以后的成长有着很深的影响。</p>
<h3 id="给自己的期待"><a href="#给自己的期待" class="headerlink" title="给自己的期待"></a>给自己的期待</h3><h4 id="拖延症"><a href="#拖延症" class="headerlink" title="拖延症"></a>拖延症</h4><p>从上个月10号请假去学校，整个人释然了。慢慢的有了拖延症，对许多事情提不起兴趣来。被短视频占据大量时间，喜欢上了“速食”但是营养价值非常低。希望自己将更多的时间去读书，去看纪录片，学会获得<code>延迟满足</code>。</p>
<h4 id="关于积累"><a href="#关于积累" class="headerlink" title="关于积累"></a>关于积累</h4><p><strong>英语：</strong>英语一直是自己的一个坎儿，现在读懂国外的资料吃力，借助翻译软件已经成为了习惯。</p>
<p><strong>技术：</strong>走出校园是一个新的开始技术又是自己的硬实力。这次自己又赶上了部门技术转型，我深知自己的<code>PHP</code>不能作为自己的主力语言去吃饭，所以早就做了技术转型的打算。最近半年我会主学<code>JAVA</code>特性并灵活用到项目中，成为项目的推动者。另外自己会开一个平台，输出日常的积累。当然前期自己能力有限，我会先从技术广度为切入点去做铺垫。<strong>往后余生也希望你给我一些期许</strong></p>
<h4 id="关于锻炼"><a href="#关于锻炼" class="headerlink" title="关于锻炼"></a>关于锻炼</h4><p>自己已经坚持晨跑有快一年了，中间有去学校所以断过<strong>几段</strong>时间，再加上自己喜欢吃夜宵。大学胖了20几斤一直没减下去，自己长的又不高快成一个小胖墩了。希望晨跑一直坚持。先减脂在健身。健康、阳光。</p>
<h4 id="关于感情"><a href="#关于感情" class="headerlink" title="关于感情"></a>关于感情</h4><p>大学solo四年就是我，希望找到懂得珍惜、懂得幸福、双向奔赴她。</p>
<h4 id="关于家庭"><a href="#关于家庭" class="headerlink" title="关于家庭"></a>关于家庭</h4><p><strong>情绪</strong></p>
<p>在2020年前半年的焦虑期和父母吵过几次架，每次吵完架自己都会后悔。自己是成年人了，还是控制不住将负面情绪带给父母。</p>
<p><strong>反思</strong></p>
<p>没有主动去沟通和倾诉自己的事情。觉得家人的感情是最牢固的可以去伤害。工作之后和父母的沟通也多了许多，有拿不定主意的事情也会去询问爸爸的建议。沟通多了矛盾也就少了。<strong>希望家人身体健康、幸福快乐</strong></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>生活是美好的，多去热爱它，学会延迟满足，多一份感恩，多一些仪式。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>走进laravel经典操作第二部</title>
    <url>/2020/04/16/71-laravel/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;本文主要介绍了laravel关于数据库的相关操作，也是比较核心的操作了，其中从原生的SQL到查询构造器再到ORM循序渐进的学了SQL的操作。越往后方法越简单越使用。</p>
<a id="more"></a>

<h4 id="数据库的迁移（Migration）"><a href="#数据库的迁移（Migration）" class="headerlink" title="数据库的迁移（Migration）"></a>数据库的迁移（Migration）</h4><p>&emsp;&emsp;数据库的迁移有什么优点呢？首先他方便团队的管理，可以使用代码生成比较安全的SQL语句，支持回滚。</p>
<p>如下图所示一个简单的数据库迁移步骤：</p>
<p><img src="http://xy.lrnjy.club/images/71-laravel-1.png" alt=""></p>
<p><strong>生成迁移文件的简单示例:</strong></p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line">D:\www\wamp64\www\laravel56&gt;php artisan make:migration create_test_table Created Migration: <span class="number">2020_04_15_134402_</span>create_test_table</span></pre></td></tr></table></figure>

<p>然后便可在 <code>migrations</code>下生成迁移文件了</p>
<p>在执行一下语句就创建好相应的表了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">D:\www\wamp64\www\laravel56&gt;php artisan migrate</span></pre></td></tr><tr><td class="code"><pre><span class="line">Migration table created successfully.</span></pre></td></tr><tr><td class="code"><pre><span class="line">Migrating: <span class="number">2014</span>_10_12_000000_create_users_table</span></pre></td></tr><tr><td class="code"><pre><span class="line">Migrated:  <span class="number">2014</span>_10_12_000000_create_users_table</span></pre></td></tr><tr><td class="code"><pre><span class="line">Migrating: <span class="number">2014</span>_10_12_100000_create_password_resets_table</span></pre></td></tr><tr><td class="code"><pre><span class="line">Migrated:  <span class="number">2014</span>_10_12_100000_create_password_resets_table</span></pre></td></tr><tr><td class="code"><pre><span class="line">Migrating: <span class="number">2020</span>_04_15_134402_create_test_table</span></pre></td></tr><tr><td class="code"><pre><span class="line">Migrated:  <span class="number">2020</span>_04_15_134402_create_test_table</span></pre></td></tr></table></figure>

<p><strong>修改表</strong></p>
<ol>
<li>renameColumn() 变更字段名称</li>
<li>dropColumn() 删除一个字段</li>
<li>dropIndex() 删除索引 </li>
</ol>
<p><strong>回滚迁移</strong></p>
<ol>
<li>命令：php artisan migrate:rollback</li>
<li>–step=1 限制迁移次数 默认为1</li>
<li>php artisan migrate:reset 回滚所有的迁移</li>
</ol>
<p><strong>刷新表</strong></p>
<ol>
<li>php artisan migrate:fresh <strong>删除</strong>所有表并运行迁移</li>
<li>php artisan migrate:refresh <strong>回滚</strong>所有迁移并重新执行</li>
</ol>
<h4 id="使用DB类操作数据表"><a href="#使用DB类操作数据表" class="headerlink" title="使用DB类操作数据表"></a>使用DB类操作数据表</h4><p><strong>使用原生的SQL语句对数据库进行操作</strong></p>
<ol>
<li><p>使用<code>DB::select() DB::insert() DB::update() DB::delete()</code> </p>
</li>
<li><p>可以在SQL语句中使用命名绑定的形式传递参数</p>
</li>
<li><p>在<code>update</code> 和 <code>delete</code> 返回影响的行数而不是 <code>true</code>或者 <code>false</code>,相应的<code>insert</code>则是返回<code>true</code>或者<code>false</code></p>
<p><strong>查询构造器</strong></p>
</li>
</ol>
<p>&emsp;&emsp;在上面讲到了原生的SQL ，在实际的开发中其实是书写麻烦，不易维护的。</p>
<p>查询构造器的示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$res = DB::table(<span class="string">'test'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       -&gt;select([<span class="string">'title'</span>,<span class="string">'price'</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">       -&gt;where(<span class="string">'id'</span>,<span class="string">'='</span>,<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       -&gt;first();   <span class="comment">// first 是查询出一条数据 多条数据用get方法</span></span></pre></td></tr></table></figure>

<p>一个简单的查询构造器。</p>
<p><strong>查询数据</strong></p>
<ol>
<li>我们不仅可以使用<code>DB::table</code>来指定表来查询，同样<code>count()</code>、<code>max()</code>、<code>min()</code>等函数都是可以使用的。</li>
<li>我们也可以使用<code>exists()</code> 和 <code>doesntExtist()</code> 来判断数据是否存在</li>
<li>可以使用<code>DB::raw()</code>来起一个别名 </li>
</ol>
<p><strong>插入数据</strong></p>
<ol>
<li>使用<code>insert()</code>插入一条或多条数据</li>
<li>传递数组即为批量插入</li>
<li>使用insertGetId()获取自增主键的ID值 </li>
</ol>
<p><strong>更新数据</strong></p>
<ol>
<li>使用<code>update()</code>更新指定的数据</li>
<li><code>increment()</code>和 <code>decrement()</code>自增/自减 字段的值</li>
</ol>
<h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><ol>
<li>使用了 <code>Active Record</code> 设计理念，一个模型对应一个数据库，多个模型可以有多种关系。</li>
</ol>
<p><strong>生成Model文件</strong></p>
<p>&emsp;&emsp; &emsp; 使用<code>php artisan make:model ModelName</code>命令生成模型文件，加入<code>--migration</code> 参数生成对应的数据库迁移文件。</p>
<p><strong>ORM属性</strong></p>
<ol>
<li>私有属性 <code>$table</code>指定表名名称</li>
<li>私有属性 <code>$timestamps</code>是否自动维护时间戳</li>
<li>常量 CREATED_AT 和 UPDATED_AT 指定时间戳对应的字段</li>
</ol>
<p><strong>一对多关联模式</strong></p>
<ol>
<li>使用hasMany()《一对多》 和 belongsTo() 《多对一》定义关联关系</li>
</ol>
<p><strong>多对多关联模式</strong></p>
<ol>
<li>belongsToMany()</li>
</ol>
<h4 id="Seeder和-模型工厂"><a href="#Seeder和-模型工厂" class="headerlink" title="Seeder和 模型工厂"></a>Seeder和 模型工厂</h4><p>&emsp;&emsp;那么什么叫<code>Seeder</code>呢<code>Seeder</code>就是向数据库填充数据的。 </p>
<p>那么如何生成一个<code>Seeder</code>呢？，运行命令 <code>php artisan make:seeder TableNameSeeder</code>，在run()方法中定义需要填充的数据，运行<code>php artisan db::seed</code>命令 填充数据。</p>
<p><strong>模型工厂</strong></p>
<p>&emsp;&emsp;由上面的数据我们可以看到 每次插入数据都要执行命令。是很不方便的，所以我们使用模型工厂。</p>
<p>Faker 扩展包 为我们提供了大多数常见的数据类，借助Faker在工厂中生成大量测试数据<code>（FactoryBuilder）</code></p>
<h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>&emsp;&emsp;到此laravel的基础也就学的差不多，后期会写一个简单的项目，来巩固相关的知识点。</p>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>SSO单点登录原理</title>
    <url>/2020/04/14/69-%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>&emsp;&emsp; 例如公司有一个考勤系统我需要，注册账号、登录、使用，后来又有一个邮件系统注册账号、登录、使用。如果公司的系统越来越多。如此循环是不是越来越繁琐并且没有必要。假如可以登录一次就能访问多个系统，这样岂不是很方便，如此将引出单点登录系统。</p>
<a id="more"></a>

<h4 id="SSO的原理"><a href="#SSO的原理" class="headerlink" title="SSO的原理"></a>SSO的原理</h4><p>&emsp;&emsp;首先呢每个系统不会做用户的登录校验，而是统一的交给认证中心，同样的用户不会再注册用户的时候，每个系统都会保护用户的资料而是在认证中心统一的保存。</p>
<h4 id="下面介绍一下SSO的登录流程"><a href="#下面介绍一下SSO的登录流程" class="headerlink" title="下面介绍一下SSO的登录流程"></a>下面介绍一下SSO的登录流程</h4><p><strong>访问系统A的流程</strong></p>
<p>&emsp;&emsp;如下图所示，首先浏览器访问系统A的受保护资源，这时A发现用户并没有登录然后发生了跳转，跳转到认证中心并带上系统A的地址，认证中心让用户输入账号密码进行全局的校验，校验成功创建全局会话，并创建授权令牌，在跳转回系统A同时带上令牌，系统A如果拿到这个令牌，拿着这个令牌去认证中心校验令牌，如果令牌有效那么用户就会记录当前的用户登陆系统A了，并返回用户的相关信息，系统A创建局部会话，到此便完成了系统A的登录。</p>
<p><img src="http://xy.liruoning.cn/images/69-php-1.png" alt=""></p>
<p><strong>访问系统B的流程</strong></p>
<p>&emsp;&emsp;首先浏览器访问系统B的受保护资源，然后系统B在局部的会话发现并没有登录，这时候跳转到认证中心并带着系统B的地址，这时候认真中心发现用户已经登录过了这时候创建一个令牌返回给系统B,系统B去认证中心校验这个令牌，令牌有效并记录用户登陆了系统B,并返回给系统B。系统B创建局部的会话，并返回用户刚才的受保护的资源。</p>
<p><img src="http://xy.liruoning.cn/images/69-php-2.png" alt=""></p>
<p><strong>注销流程</strong></p>
<p>&emsp;&emsp; 假如用户在系统A上边发起了注销请求，这时候系统A调用用户中心的接口，让认证中心注销所有的会话，认证中心肯定会先注销全局会话，保存在认证中心的会话，然后认真中心找出用户登录的那些系统，调用相应的销毁局部会话的接口功能。 </p>
<p><img src="http://xy.liruoning.cn/images/69-php-3.png" alt=""></p>
<p><strong>最后：</strong></p>
<p>我们把认证中心作为服务端，系统作为客户端。</p>
<p><strong>服务端</strong>要完成的功能：</p>
<ol>
<li>验证用户的登录信息</li>
<li>创建全局会话</li>
<li>创建授权令牌</li>
<li>与sso-client通信发送令牌</li>
<li>校验sso-client令牌的有效性</li>
<li>系统注册</li>
<li>接收sso-client 注册请求，注销所有的会话 </li>
</ol>
<p><strong>客户端实现</strong></p>
<p>&emsp;&emsp;拦截子系统未登录的用户请求，跳转至SSO认证中心，接受并存储sso认证中心发送的令牌，与sso-server通信，校验令牌的有效性，建立局部的会话这样用户就不用再认证中心判断用户是否登录了在本地就判断了。拦截用户注销的请求，向sso认证中心发送注销请求，接受sso认证中心发出的注销请求，销毁局部会话。</p>
<h4 id="共享Session实现SSO的限制"><a href="#共享Session实现SSO的限制" class="headerlink" title="共享Session实现SSO的限制"></a>共享Session实现SSO的限制</h4><p>&emsp;&emsp;通过上边的实现相信小伙伴们一定有一个疑问使用session共享的机制不是更方便吗？但是session共享也会带来几个问题，了解了这几个带来的问题你也就理解了。</p>
<ol>
<li>不同的系统可能使用不同的语言编写的，这样他们处理session的方式也可能不相同。</li>
<li>不同的系统也可能会部署在不同的地方这样访问session也就会很慢了</li>
<li>这些不同的系统必须域名同源，也就是说相同根域下面的不同的子域名，因为浏览器规定了A域名不能获取到B域名的Cookie。</li>
</ol>
<p>根据以上的问题我们进而了解到了Session共享的弊端。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>走进laravel经典操作</title>
    <url>/2020/04/12/70-laravel/</url>
    <content><![CDATA[<h4 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h4><p>&emsp;&emsp;当学一个框架的时候路由肯定是必须要掌握的，首先路由的概念，当访问一个链接地址时，它会找到路由，然后由路由找到控制器，控制器会找到数据模型，数据模型返回数据到控制器，将数据渲染到视图。</p>
<a id="more"></a>
<p><strong>laravel中定义路由</strong></p>
<p>首先定义一个静态路由：</p>
<ol>
<li>定义在routes/web.php的目录中</li>
</ol>
<p>简单示例：如下所示路由是在闭包中完成的逻辑，那么如何让路由关联到控制器，在控制器完成相应的逻辑呢？下面路由关联控制器将会讲到。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'/hello'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"hello word"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p><strong>路由关联控制器</strong></p>
<p>控制器的作用：</p>
<ol>
<li>扩展路由闭包中的逻辑，将逻辑在控制器中完成。 </li>
<li>让控制器来做表单验证等前置操作。</li>
<li>配合Model处理数据</li>
</ol>
<p><strong>控制器的创建</strong></p>
<p><code>php artisan make:controller HelloController</code> 使用 <code>artisan</code> 进行控制器的创建</p>
<p>那么如何让我的路由找到控制器呢？</p>
<p>我们只需要在：<code>controllerName@functionName</code> 的语法就可以找到相应的控制器了。</p>
<p>如下图所示便能找到 <code>HelloController</code>控制器了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'/hello'</span>, <span class="string">'HelloController@hello'</span>);</span></pre></td></tr></table></figure>

<p>这个命名的默认空间是在 <code>App\Http\Controller</code> 目录下的。<code>HelloController@hello</code>和<code>App\Http\Controller\HelloController@hello</code>是等价的。</p>
<h4 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h4><ol>
<li><p>关于如何获取请求参数，在<code>Route</code>中使用<code>{value}</code>格式规定<strong>必传</strong>的参数。</p>
<p>如下便可绑定一个参数了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'/hello/&#123;name&#125;'</span>, <span class="string">'HelloController@sayhello'</span>);</span></pre></td></tr></table></figure>
</li>
<li><p>上边是定义的必传参数，那么如何定义选传参数呢？直接在<code>{name?}</code>下加一个问号即可;</p>
<p>如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'/hello/&#123;name&#125;/&#123;sex?&#125;'</span>, <span class="string">'HelloController@sayhello'</span>);</span></pre></td></tr></table></figure>
</li>
<li><p>上面的请求方式是使用<code>GET</code>，如果需要别的请求参数直接替换Route:: 后面的请求方法即可。</p>
</li>
<li><p>那么问题来了如果我想即支持<code>post</code>又支持<code>get</code> 请求呢 如下便可以了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::match([<span class="string">'post'</span>,<span class="string">'get'</span>],<span class="string">'match'</span>,<span class="string">'HelloController@sayhello'</span>);</span></pre></td></tr></table></figure>
</li>
<li><p>当然如果我们想要支持所有的请求呢？<code>Route::any</code> 就可以喽</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::any(<span class="string">'matchall'</span>,<span class="string">'HelloController@sayhelloall'</span>);</span></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="资源路由"><a href="#资源路由" class="headerlink" title="资源路由"></a>资源路由</h4><h5 id="资源控制器（更快捷的控制器）"><a href="#资源控制器（更快捷的控制器）" class="headerlink" title="资源控制器（更快捷的控制器）"></a>资源控制器（更快捷的控制器）</h5><ol>
<li><p>自动生成增删改以及符合RESTful规范的路由。那么如何在<code>Artisan</code>中生成控制器呢？如下所示：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">D:\www\wamp64\www\laravel56&gt;php artisan make:controller ResoureController --resource</span></pre></td></tr><tr><td class="code"><pre><span class="line">Controller created successfully.</span></pre></td></tr></table></figure>

<p>当然对应的路由的话，我们只需要<code>Route::resource(&#39;resource&#39;,&#39;ResourceController&#39;)</code>便可生成对应的资源路由在这里我们便不用使用<code>@</code>符号来使用对应的方法。 </p>
</li>
<li><p>根据上面的命令，我们可以看出自动生成了许多的资源方法，下面我简单解释一下。</p>
<ul>
<li>index() 展示所有的资源信息。</li>
<li>create()展示创建表单。</li>
<li>store()处理创建表单的数据，并整理入库 。</li>
<li>show()展示单个资源的信息。</li>
<li>edit()展示编辑表单。</li>
<li>update()整理收集edit()表单的信息，并整理入库。</li>
<li>destory()删除资源的信息。</li>
</ul>
</li>
</ol>
<h4 id="初始中间件"><a href="#初始中间件" class="headerlink" title="初始中间件"></a>初始中间件</h4><p> &emsp;&emsp; 在<code>laravel</code>中我们暂时了解到了<code>crsfToken</code>的中间件，那么什么是中间件呢？</p>
<p>他一般的作用就是过滤所有进入应用的<code>HTTP</code>请求 、或者是在请求过程中执行相应的任务、或者进行统一认证 如 <code>CSRF Auth</code>。那么如何创建一个中间件呢？比如说我要过滤一个人名，那么我将这个中间件叫做<code>checkName</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\www\wamp64\www\laravel56&gt;php artisan make:middleware checkName</span></pre></td></tr><tr><td class="code"><pre><span class="line">Middleware created successfully.</span></pre></td></tr></table></figure>

<p>如上命令便可成功生成相应的类，但是不要忘了<code>Kernel.php</code>类中进行注册。</p>
<p>在定义路由时需要使用<code>-&gt;</code>函数来调用<code>middleware()</code>;便会检验相关的参数。</p>
<p>以上便是<code>laravel</code>中间件的简单使用。</p>
<h4 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h4><p> &emsp;&emsp;路由分组呢定义了我们平时书写路由时定义的繁琐的东西。</p>
<p>常见的路由分组的方式呢。</p>
<ol>
<li>按照前缀分组</li>
<li>按照命名空间分组</li>
<li>按照中间件分组</li>
</ol>
<h4 id="视图使用总结"><a href="#视图使用总结" class="headerlink" title="视图使用总结"></a>视图使用总结</h4><p>关键点：</p>
<ol>
<li>使用<code>view()</code>返回视图 接受两个参数 路径和数据</li>
<li>在view 视图中使用来展示数据</li>
<li>如果视图存在多级目录 使用.来表示</li>
</ol>
<p><strong>常见的Blade模板语法</strong></p>
<p><strong>常见输出变量的Blade语法</strong></p>
<ol>
<li>转义输出可以有效的防止XSS攻击</li>
<li>{! $content !} 输出变量的原始值</li>
<li>我们可以使用@json() 直接输出 json 表达式</li>
<li>@verbatim 输出大段的原始表达式</li>
</ol>
<p><strong>流程控制表达式</strong></p>
<ol>
<li><code>@if() @else() @elseif() @endif()</code>非常像普通的表达式只不过加了一个 <code>@</code>值 </li>
<li><code>@unless() @endunless</code>  当不满足表达式的时候执行内部操作</li>
<li><code>@isset 和 @empty</code> 判断变量是否存在，变量是否为空</li>
<li><code>@switch @case @break @default 和 @endswitch</code>  基本的表达式</li>
<li><code>@auth() 和 @guest()</code>认证表达式</li>
</ol>
<p><strong>循环表达式</strong></p>
<ol>
<li><code>@for 和 @endfor</code></li>
<li><code>@foreach() 和 @endforeach()</code> </li>
<li><code>@forelse()、@empty() 和 @endforelse()</code></li>
</ol>
<p><strong>其他表达式</strong></p>
<ol>
<li><code>@php 和 @endphp</code> 直接运行PHP代码</li>
<li><code>\{\{-- --\}\}</code>模板注释 结果不会展示在最终输出的HTML中</li>
</ol>
<h4 id="模板的继承和布局"><a href="#模板的继承和布局" class="headerlink" title="模板的继承和布局"></a>模板的继承和布局</h4><p><strong>优点：</strong></p>
<ol>
<li>遵循DRY(Don’t repeat yourself)原则,减少开发的成本</li>
<li>布局简单，容易维护</li>
</ol>
<p><strong>步骤：</strong></p>
<ol>
<li>定义一个名为 <code>layout.blade.php</code>的主布局文件</li>
<li>定义多个子视图文件，如 菜单、头部页脚等</li>
<li>在其他视图中继承布局文件 </li>
</ol>
<p><strong>相关语法:</strong></p>
<ol>
<li><code>@section</code>定义视图的局部内容 使用 <code>@show</code>结尾</li>
<li><code>@yield</code>定义指定部分内容</li>
<li><code>@entends</code> 在子视图中继承主视图模板</li>
<li><code>@parent 应用 @section</code>中的内容且不覆盖</li>
<li>在子视图中的<code>@section</code>标签要以<code>@endsection</code>标签来结尾</li>
</ol>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出了解MySQL的主从复制原理</title>
    <url>/2020/04/11/66-mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>&emsp;&emsp;本文主要讲述了MySQL主从复制的原理，具体的搭建过程这里就不再讲述了，下面我将从为什么需要主从复制开始讲起，逐渐的深入。</p>
<a id="more"></a>

<h4 id="为什么需要主从复制"><a href="#为什么需要主从复制" class="headerlink" title="为什么需要主从复制"></a>为什么需要主从复制</h4><p>&emsp;&emsp; 在一个复杂的业务中，有一个频繁的SQL语句需要锁表，导致暂时不能使用读的服务。进而影响业务的运行。那么使用主从复制，这样我们可以让主库负责写，从库负责读，这样即使主库被锁表。从库的读操作也不会受影响。这就是我们常用的读写分离。</p>
<p>&emsp;&emsp;数据的热备份，也叫灾难型备份，如果一个主服务器垮了，数据一样不会丢失。</p>
<p>&emsp;&emsp;框架的扩展，业务量越来越大，I/O访问的频率也越来越高，单机无法满足，此时做多库的存储，降低磁盘的I/O访问频率，提高单个机器的I/O性能。</p>
<h4 id="什么是MySQL的主从复制"><a href="#什么是MySQL的主从复制" class="headerlink" title="什么是MySQL的主从复制"></a>什么是MySQL的主从复制</h4><p>&emsp;&emsp;MySQL的主从复制是指数据可以从MySQL数据库服务器主节点复制到一个或多个从节点。MySQL默认采用异步复制的方式，这样从节点不用一直访问主服务器来更新自己的数据，数据的更新可以在远程连接上进行，从节点可以复制主数据库中的所有数据库或者特定的数据库。</p>
<h4 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h4><ol>
<li>master服务器将数据的改变记录到二进制的binlog中。</li>
<li>slave服务器会在一定的时间内对master二进制日志进行探测其是否发生改变，如果发生改变，则开始一个I/O Thread 请求 master 二进制事件。</li>
<li>同时主节点为每一个I/O线程启动一个dump线程，用于发送二进制事件，并保存至从节点的中（relay-log），从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I/OThread和SQLThread将进入睡眠状态，等待下一次被唤醒。</li>
</ol>
<h5 id="也就是说："><a href="#也就是说：" class="headerlink" title="也就是说："></a>也就是说：</h5><ul>
<li>从库会生成两个线程,一个I/O线程,一个SQL线程;</li>
<li>I/O线程会去请求主库的binlog,并将得到的binlog写到本地的relay-log(中继日志)文件中;</li>
<li>主库会生成一个log dump线程,用来给从库I/O线程传binlog;</li>
<li>SQL线程,会读取relay log文件中的日志,并解析成sql语句逐一执行;</li>
</ul>
<h4 id="mysql主从同步延时分析"><a href="#mysql主从同步延时分析" class="headerlink" title="mysql主从同步延时分析"></a>mysql主从同步延时分析</h4><p>​        mysql的主从复制都是单线程的操作，主库对所有DDL和DML产生的日志写进binlog，由于binlog是顺序写，所以效率很高，slave的sql thread线程将主库的DDL和DML操作事件在slave中重放。DML和DDL的IO操作是随机的，不是顺序，所以成本要高很多，另一方面，由于sql thread也是单线程的，当主库的并发较高时，产生的DML数量超过slave的SQL thread所能处理的速度，或者当slave中有大型query语句产生了锁等待，那么延时就产生了。</p>
<p><strong>解决方案：</strong></p>
<p>​1.业务的持久化层的实现采用分库架构，mysql服务可平行扩展，分散压力。</p>
<p>​2.单个库读写分离，一主多从，主写从读，分散压力。这样从库压力比主库高，保护主库。</p>
<p>​3.服务的基础架构在业务和mysql之间加入memcache或者redis的cache层。降低mysql的读压力。</p>
<p>​4.不同业务的mysql物理上放在不同机器，分散压力。</p>
<p>​5.使用比主库更好的硬件设备作为slave，mysql压力小，延迟自然会变小。</p>
<p>​6.使用更加强劲的硬件设备</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>认识Web网络安全</title>
    <url>/2020/04/06/64-http/</url>
    <content><![CDATA[<h4 id="Web安全攻击"><a href="#Web安全攻击" class="headerlink" title="Web安全攻击"></a>Web安全攻击</h4><p>&emsp;&emsp;在HTTP协议请求的过程中，安全问题通常会发生在Web页到业务逻辑层之间，只有认识到了网络安全才可让自己的程序更具保障性。下面听博主简述Web安全问题。</p>
<a id="more"></a>
<h4 id="验证机制概述"><a href="#验证机制概述" class="headerlink" title="验证机制概述"></a>验证机制概述</h4><ul>
<li>验证机制是web应用程序中最简单的一种<strong>安全机制</strong><ol>
<li>一般来说，应用程序<strong>必须核实</strong>用户提交的用户名和密码是否正确。正确则允许登录，否则禁止登录</li>
</ol>
</li>
<li>验证机制是应用程序防御恶意攻击的<strong>核心机制</strong>也是最外层的机制<ol>
<li>它处于安全防御的最前沿，如果被用户轻易突破，通常应用程序的全部功能、数据都会被其控制</li>
<li><strong>缺乏安全有效的验证机制</strong>，其他核心安全机制都无法实施（会话管理和访问控制）</li>
</ol>
</li>
</ul>
<h5 id="验证技术"><a href="#验证技术" class="headerlink" title="验证技术"></a>验证技术</h5><ol>
<li>基于HTML表单的验证（输入用户名、密码、验证码）</li>
<li>多元机制，如组合型密码（如 让你输入用户名密码、再让你输入一些验证的问题）</li>
<li>客户端SSL证书</li>
</ol>
<ul>
<li><strong>验证码技术</strong><ol>
<li>验证码是否真实有效（不要只有验证码有没有验证设施）</li>
<li>验证码的复杂度（只有简单的英文字母和数字）</li>
<li>应对当前的“打码”事业盛行</li>
</ol>
</li>
<li><strong>Cookie和会话检测</strong><ol>
<li>有些程序会设置<strong>cookie</strong>,如failedlogin=0;登录尝试失败，递增该值，达到某个上限，检测到这个值并拒绝再次处理登录。</li>
</ol>
</li>
<li><strong>双因子认证</strong><ol>
<li>综合<strong>个人密码</strong>和<strong>手机</strong>来达到双重认证的效果</li>
</ol>
</li>
<li><strong>多阶登录机制</strong><ol>
<li>这里存在的安全问题比如我们的安全验证有三层，有可能前两层会被跳过前两层直接到达第三层，这时第三层的安全信息又比较简单。进行暴力破解之后通过。</li>
</ol>
</li>
</ul>
<h4 id="会话管理机制"><a href="#会话管理机制" class="headerlink" title="会话管理机制"></a>会话管理机制</h4><ol>
<li>由于会话管理机制所发挥的关键作用，它们成为针对应用程序的<strong>恶意攻击</strong>的主要目标</li>
<li>若攻击者能够破坏应用程序的会话管理，他就能轻易避开其实施的验证机制，不需用户证书即可伪装成其他应用程序用户。</li>
</ol>
<p><strong>会话终止攻击</strong></p>
<ol>
<li>尽可能<strong>缩短</strong>一个<strong>会话的寿命</strong>可降低攻击者截获、猜测或滥用有效会话令牌的可能性。、</li>
</ol>
<h4 id="会话管理漏洞的防御"><a href="#会话管理漏洞的防御" class="headerlink" title="会话管理漏洞的防御"></a>会话管理漏洞的防御</h4><ol>
<li>令牌只能通过HTTPS传送。</li>
<li>如果使用HTTP cookie传送令牌（大多数情况下），应将这些cookie标记为<code>secure</code>，以防止用户浏览器通过HTTP传送它们。</li>
<li><strong>软会话过期</strong>在一段时间用户没有和应用系统进行交互我们就让Session失效</li>
<li><strong>提供完善的注销功能</strong>用户可以手动的使当前的会话过期，也就是说给用户设置登出功能，让用户可以清除会话</li>
</ol>
<h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><ol>
<li>攻击者利用SQL注入读取或者修改数据库中保存的所有数据。</li>
</ol>
<p><strong>防止</strong></p>
<ol>
<li>预处理语句，指定查询结构，用户输入预留的占位符</li>
<li>指定占位符的内容</li>
</ol>
<h4 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击"></a>XSS跨站脚本攻击</h4><h5 id="XSS攻击的原理"><a href="#XSS攻击的原理" class="headerlink" title="XSS攻击的原理"></a>XSS攻击的原理</h5><ol>
<li>跨脚本攻击（Cross Site Scripting）,XSS是一种经常出现再web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中，其他用户在观看页面时，恶意脚本就会执行，这类攻击通常通过注入<code>HTML</code>或<code>JS</code>脚本来发起攻击。攻击成功后，攻击者可以得到私密网页内容和cookie等</li>
</ol>
<h5 id="XSS的危害"><a href="#XSS的危害" class="headerlink" title="XSS的危害"></a>XSS的危害</h5><ol>
<li>盗取用的账号：登录账号、用户的银行账号</li>
<li>数据控制：读取、篡改、添加、删除企业的敏感数据</li>
</ol>
<h5 id="XSS的分类"><a href="#XSS的分类" class="headerlink" title="XSS的分类"></a>XSS的分类</h5><ul>
<li><p><strong>反射式XSS（非永久性XSS）</strong>：即使的一个链接的方式反射过去</p>
<ol>
<li>代码隐藏在链接中，欺骗用户自己去点击链接时触发XSS代码，一般出现在搜索页面。</li>
</ol>
</li>
<li><p><strong>存储式XSS （永久性XSS）</strong></p>
<ol>
<li>XSS代码被插入到类似个人信息或发表的文章等存储在服务器上的信息中。</li>
</ol>
</li>
<li><p><strong>基于DOM的XSS攻击</strong></p>
<p>反射式XSS和存储式XSS攻击通过服务器端提取用户提交的数据。基于DOM的只是在前端通过JS的方式执行。</p>
</li>
</ul>
<h5 id="XSS攻击载荷（我到底攻击那）"><a href="#XSS攻击载荷（我到底攻击那）" class="headerlink" title="XSS攻击载荷（我到底攻击那）"></a>XSS攻击载荷（我到底攻击那）</h5><ul>
<li><strong>会话令牌</strong><ol>
<li>劫持用户的身份令牌劫持会话进而以被劫持用户的省份来使用应用程序。</li>
</ol>
</li>
<li><strong>虚拟置换</strong><ol>
<li>再Web应用程序页面注入恶意数据，从而向应用程序的用户传送误导型的信息。</li>
</ol>
</li>
<li><strong>注入木马</strong><ol>
<li>在攻击中，攻击者向用户提供和一个登录的表单诱导用户向攻击者的服务器提交他们的证书。</li>
</ol>
</li>
</ul>
<h5 id="XSS防御措施"><a href="#XSS防御措施" class="headerlink" title="XSS防御措施"></a>XSS防御措施</h5><ul>
<li><strong>过滤</strong></li>
</ul>
<ol>
<li>对提交内容的非法标签和属性（<code>&lt;script&gt;</code>、<code>onclick</code>等）进行过滤，从而避免XSS攻击。</li>
</ol>
<ul>
<li><strong>转义</strong><ol>
<li>通过<code>htmlspecialchars</code>等函数，将提交内容中的字符”&lt;”(小于) 和 “&gt;”(大于)转换为HTML实体。</li>
</ol>
</li>
</ul>
<h4 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h4><p><strong>定义：</strong>通过伪装来自受信任用户的请求来利用受信任的网站进行攻击。</p>
<p><strong>csrf攻击的本质:</strong>绕过同源策略，使用<code>cookie</code>进行攻击的一种方式。</p>
<p><strong>同源策略：</strong>是一种约定，它是浏览器最核心也是最基本的安全功能。如果两个网页的<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>均相同，就认为这两个网页同源。</p>
<p><strong>同源策略的作用：</strong>保护cookie不被其他站点读取。</p>
<h5 id="CSRF的攻击方式"><a href="#CSRF的攻击方式" class="headerlink" title="CSRF的攻击方式"></a>CSRF的攻击方式</h5><ol>
<li><strong>get型攻击：</strong> 通过模拟<code>get</code>型请求，向目标网站发起攻击。一般情况下会制造一个超链接，让用户去触发这个超链接，并且这个超链接和目标网站是同源的，只有同源的用户才会带着<code>cookie</code></li>
<li><strong>post型攻击:</strong>通过模拟<code>post</code>请求，发起表单的提交从而达到攻击的目的。</li>
</ol>
<p><strong>XSS与CSRF不同</strong>：<code>XSS</code>利用站点内的信任用户（受害者），而<code>CSRF</code>通过伪装来自受信任用户的请求来利用受信任的网站。</p>
<p><code>CSRF</code>通过如(电子邮件发送一个链接)来蛊惑受害者进行一些敏感性的操作，如修改密码、修改E-mail、转账等，而受害者还不知道他已经中招。</p>
<h5 id="CSRF预防"><a href="#CSRF预防" class="headerlink" title="CSRF预防"></a>CSRF预防</h5><ol>
<li><p><strong>referer防范</strong>：通过判断请求头中的<code>referer</code>头，确定请求的来源，从而避免CSRF攻击。</p>
</li>
<li><p><strong>token防范</strong>：通过在表单中添加token，标识表单的合法性，来避免CSRF攻击。因为用户的token是从后台发过来的，所以用户在携带这个token到后台。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP数组的底层实现</title>
    <url>/2020/03/28/60-php%E6%95%B0%E7%BB%84%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="PHP数组"><a href="#PHP数组" class="headerlink" title="PHP数组"></a>PHP数组</h4><p>&emsp;&emsp;数组是PHP中非常强大、灵活的数据类型，它的底层为散列表（HashTable，也称 哈希表），散列表是通过关键码值（Key Value）而直接进行访问的数据结构，它是Key Value 的一种映射函数可以通过 Key 直接找到相应的Value ，在理想情况下无需比较可以找到待查关键字，查找的期望时间O(1)。</p>
<a id="more"></a>

<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>&emsp;&emsp;存放记录的数组称做散列表，这个数组用来存储value,而value具体存储的位置有映射函数根据Key计算确定，映射函数可以采用取模的方式，key可以通过一些譬如“times 33”的算法得到一个整形值，然后与数组的总大小取模的到存储的位置。这些只是普通的哈希表的实现，PHP散列表的实现整体也是这个思路，只是有几个特殊的地方。</p>
<p><strong>PHPHashTable的数据结构</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bucket：散列表中存储的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Bucket</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    zval              val; <span class="comment">//存储的具体value，这里嵌入了一个zval，而不是一个指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    zend_ulong        h;   <span class="comment">//key根据times 33计算得到的哈希值，或者是数值索引编号</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    zend_string      *key; <span class="comment">//存储元素的key</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; Bucket;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//HashTable结构</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> <span class="title">HashTable</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    zend_refcounted_h gc;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">union</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            ZEND_ENDIAN_LOHI_4(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    zend_uchar    flags,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    zend_uchar    nApplyCount,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    zend_uchar    nIteratorsCount,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    zend_uchar    reserve)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">uint32_t</span> flags;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; u;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint32_t</span>          nTableMask; <span class="comment">//哈希值计算掩码，等于nTableSize的负值(nTableMask = -nTableSize)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Bucket           *arData;     <span class="comment">//存储元素数组，指向第一个Bucket</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint32_t</span>          nNumUsed;   <span class="comment">//已用Bucket数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint32_t</span>          nNumOfElements; <span class="comment">//哈希表有效元素数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint32_t</span>          nTableSize;     <span class="comment">//哈希表总大小，为2的n次方</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint32_t</span>          nInternalPointer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    zend_long         nNextFreeElement; <span class="comment">//下一个可用的数值索引,如:arr[] = 1;arr["a"] = 2;arr[] = 3;  则nNextFreeElement = 2;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">dtor_func_t</span>       pDestructor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>在HashTable中有两个非常相近的两个值，<code>nNumUsed</code> <code>nNumOfElements</code>,分别表示<strong>已经用的bucket</strong> 和 <strong>哈希表有效的元素数</strong>，事实上当将一个元素从哈希表中删除时并不会将它对应<code>bucket</code> 移除，而是将<code>Bucket</code> 的zval 的值设置成IS_UNDEF,只有扩容时 <code>nNumUsed</code> <code>nNumOfElements</code>相差达到一定的值，才会将全部的数据进行移除，并重新构建这个哈希表，所以<code>nNumUsed</code> &gt;= <code>nNumOfElements</code></p>
<p><strong>HshTable 中的 arData的值</strong></p>
<p><img src="http://xy.liruoning.cn/images/60-php-1.png" alt=""></p>
<p>上面是以下代码对应的HashTable</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr[<span class="string">"a"</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$arr[<span class="string">"b"</span>] = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$arr[<span class="string">"c"</span>] = <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$arr[<span class="string">"d"</span>] = <span class="number">4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">unset</span>($arr[<span class="string">"c"</span>]);</span></pre></td></tr></table></figure>

<p>arData这个值指向存储元素的第一个Bucket，插入元素按顺序<strong>依次插入</strong>数组，比如第一个元素是arData[0],那么后面的元素依次是 arData[1]…arData[nNumUsed] 。PHP数组的有序性正是通过arData保证的，这是第一个与普通的哈希表实现不同的地方。</p>
<p>既然arData并不是按Key映射的散列表，那么<strong>映射函数</strong>是如何将key与arData中的Value建立映射关系呢？</p>
<p>如上图所示：</p>
<p>在上面的数据中我们可以看到散列表和转换表，比较特别的是散列表在ht-&gt;arData内存之前，分配内存时，这个散列表和Bucket数组一起分配，当arData向后移动到Bucket数组的起始位置（<strong>并不是申请内存的起始位置</strong>），这样arData[-1]、arData[-2]….散列表的结构是<code>uint32_t</code> ,它保存的是value 在 Bucket中的位置。整体看来HashTable主要依赖arData实现元素的存储、索引。插入一个一个元素时，按先后顺序插入Bucket数组位置是<code>idx</code>,再根据<code>key</code> 的哈希值映射到散列表的某一个<code>nIndex</code>,将<code>idx</code> 存入映射到的<code>nIndex</code>中；查找时先在散列表中映射到<code>nIndex</code> ,得到<code>value</code> 在Bucket中的<code>idx</code>的位置进而再取出元素就可以了。</p>
<h4 id="映射函数"><a href="#映射函数" class="headerlink" title="映射函数"></a>映射函数</h4><p>映射函数(即：散列函数)是散列表的关键部分，它将key与value建立映射关系，一般映射函数可以根据key的哈希值与Bucket数组大小取模得到，即<code>key-&gt;h % ht-&gt;nTableSize</code>，但是PHP却不是这么做的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">nIndex = key-&gt;h | ht-&gt;nTableMask;</span></pre></td></tr></table></figure>

<p>显然 位运算要比取模更快。</p>
<p><code>nTableMask</code>为<code>nTableSize</code>的负数，即:<code>nTableMask = -nTableSize</code>，因为<code>nTableSize</code>等于2^n，所以<code>nTableMask</code>二进制位右侧全部为0，也就保证了nIndex落在数组索引的范围之内(<code>|nIndex| &lt;= nTableSize</code>)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111000</span>   <span class="number">-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11110000</span>   <span class="number">-16</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11100000</span>   <span class="number">-32</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11000000</span>   <span class="number">-64</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">10000000</span>   <span class="number">-128</span></span></pre></td></tr></table></figure>

<h4 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h4><p>&emsp;&emsp;哈希碰撞是指不同的<code>key</code>可能计算得到相同的哈希值，但这些哈希值又需要插入同一个散列表中，这时便有可能产生哈希冲突了。一般的解决方法是将Bucket串成链表，查找时遍历链表比较key。</p>
<p>PHP的实现也是如此，只是将链表的指针指向转化为了数值指向，即：指向冲突元素的指针并没有直接存在Bucket中，而是保存到了value的<code>zval</code>中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    zend_value        value;            <span class="comment">/* value */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">union</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">uint32_t</span>     var_flags;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">uint32_t</span>     cache_slot;           <span class="comment">/* literal cache slot */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; u2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>当出现冲突时将原value的位置保存到新value的<code>zval.u2.next</code>中，然后将新插入的value的位置更新到散列表，也就是后面冲突的value始终插入header。所以查找过程类似：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">zend_ulong h = zend_string_hash_val(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">uint32_t</span> idx = ht-&gt;arHash[h &amp; ht-&gt;nTableMask];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (idx != INVALID_IDX) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Bucket *b = &amp;ht-&gt;arData[idx];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (b-&gt;h == h &amp;&amp; zend_string_equals(b-&gt;key, key)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    idx = Z_NEXT(b-&gt;val); <span class="comment">//移到下一个冲突的value</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span></pre></td></tr></table></figure>

<p>如下图所示：</p>
<p><img src="http://xy.liruoning.cn/images/60-php-2.png" alt=""></p>
<p>在PHP计算“key”的哈希值时找到了<code>nindex=-2</code> 进而找到<code>idx=1</code> 当找到<code>1</code>索引的值时发现与该元素的<code>key</code>与要访问的键值不相等，则该元素并非我们所想访问的元素，而元素的 <code>val.u2.next</code> 保存的值正是下一个具有相同散列值的元素对应 <code>arData</code> 数组的下标，所以我们可以不断通过 <code>next</code> 的值遍历直到找到键名相同的元素或查找失败。</p>
<h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><p>散列表可存储的value数是固定的，当空间不够用时就要进行扩容了。<br>PHP散列表的大小为2^n，插入时如果容量不够则首先检查已删除元素所占比例，如果<strong>达到阈值</strong>(ht-&gt;nNumUsed - ht-&gt;nNumOfElements &gt; (ht-&gt;nNumOfElements &gt;&gt; 5)，则将已删除元素移除，重建索引,以此来节省内存的空间；如果<strong>未到阈值</strong>则进行扩容操作，扩大为当前大小的2倍，将当前Bucket数组复制到新的空间，然后重建索引。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//zend_hash.c</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> void ZEND_FASTCALL zend_hash_do_resize(HashTable *ht)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class="number">5</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//只有到一定阈值才进行rehash操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        zend_hash_rehash(ht); <span class="comment">//重建索引数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//扩容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        void *new_data, *old_data = HT_GET_DATA_ADDR(ht);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//扩大为2倍，加法要比乘法快，小的优化点无处不在...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        uint32_t nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Bucket *old_buckets = ht-&gt;arData;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//新分配arData空间，大小为:(sizeof(Bucket) + sizeof(uint32_t)) * nSize</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        new_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ...);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ht-&gt;nTableSize = nSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ht-&gt;nTableMask = -ht-&gt;nTableSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//将arData指针偏移到Bucket数组起始位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        HT_SET_DATA_ADDR(ht, new_data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//将旧的Bucket数组拷到新空间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        memcpy(ht-&gt;arData, old_buckets, sizeof(Bucket) * ht-&gt;nNumUsed);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//释放旧空间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        pefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//重建索引数组：散列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        zend_hash_rehash(ht);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#define HT_SET_DATA_ADDR(ht, ptr) do &#123; \</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        (ht)-&gt;arData = (Bucket*)(((char*)(ptr)) + HT_HASH_SIZE((ht)-&gt;nTableMask)); \</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span></pre></td></tr></table></figure>

<h4 id="重建散列表"><a href="#重建散列表" class="headerlink" title="重建散列表"></a>重建散列表</h4><p>当删除的元素达到一定的数量或者扩容后都需要重建散列表，因为value在Bucket位置移动了或哈希数组nTableSize变化了导致key与value的映射关系改变，重建过程实际就是遍历Bucket数组中的value，然后重新计算映射值更新到散列表，除了更新散列表之外，这里还有一个重要的处理：移除已删除的value，开始的时候我们说过，删除value时只是将value的type设置为IS_UNDEF，并没有实际从Bucket数组中删除，如果这些value一直存在那么将浪费很多空间，所以这里会把它们移除，操作的方式也比较简单：将后面<strong>未删除</strong>的<strong>value</strong>依次<strong>前移</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//zend_hash.c</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">ZEND_API <span class="keyword">int</span> ZEND_FASTCALL <span class="title">zend_hash_rehash</span><span class="params">(HashTable *ht)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Bucket *p;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint32_t</span> nIndex, i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    i = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p = ht-&gt;arData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ht-&gt;nNumUsed == ht-&gt;nNumOfElements) &#123; <span class="comment">//没有已删除的直接遍历Bucket数组重新插入索引数组即可</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nIndex = p-&gt;h | ht-&gt;nTableMask;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Z_NEXT(p-&gt;val) = HT_HASH(ht, nIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            p++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">while</span> (++i &lt; ht-&gt;nNumUsed);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (UNEXPECTED(Z_TYPE(p-&gt;val) == IS_UNDEF)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//有已删除元素则将后面的value依次前移，压实Bucket数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                ......</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">while</span> (++i &lt; ht-&gt;nNumUsed) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    p++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (EXPECTED(Z_TYPE_INFO(p-&gt;val) != IS_UNDEF)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ZVAL_COPY_VALUE(&amp;q-&gt;val, &amp;p-&gt;val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        q-&gt;h = p-&gt;h;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        nIndex = q-&gt;h | ht-&gt;nTableMask;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        q-&gt;key = p-&gt;key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Z_NEXT(q-&gt;val) = HT_HASH(ht, nIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">if</span> (UNEXPECTED(ht-&gt;nInternalPointer == i)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            ht-&gt;nInternalPointer = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        q++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        j++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ......</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ht-&gt;nNumUsed = j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nIndex = p-&gt;h | ht-&gt;nTableMask;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Z_NEXT(p-&gt;val) = HT_HASH(ht, nIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            p++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">while</span>(++i &lt; ht-&gt;nNumUsed);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<blockquote>
<p> 参考《PHP内核刨析》</p>
<p> 参考链接：<a href="https://juejin.im/post/5b967696e51d450e452a74d8" target="_blank" rel="noopener">https://juejin.im/post/5b967696e51d450e452a74d8</a></p>
</blockquote>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;&emsp;在上边的内容中，有大部分是引用的书籍或者博客，通过这篇学习了解到了PHP数组底层的相关问题和实现方式，里面的源码也能看个大概，但是还是有一些不足的地方，如果想要深入还需要搜集资料，如果以后有新的体会会及时补充，欢迎大家提出宝贵的意见一起学习，一起进步。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的事务处理</title>
    <url>/2020/03/23/58-mysql%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp; 事务是并发控制的基本单位。所谓的事务是指一组操作序列这组操作序列，要么都执行要么都不执行，是一个不可分割的工作单位。事务处理（transaction processing）可以用来维护数据库的完整性，它保证一组的MySQL操作的一致性。</p>
<a id="more"></a>

<h4 id="数据库的事务"><a href="#数据库的事务" class="headerlink" title="数据库的事务"></a>数据库的事务</h4><p>&emsp;&emsp;例如：银行的转账系统，转账方的账号扣款并使另一个账号增款，这两个操作要么一起执行，要么都不执行如果只是执行当方面的话，后果也是可想而知。所以我们应该把转账和 增款看作是一个整体的事务来操作。</p>
<p>&emsp;&emsp;针对上面的问题，我们可以看出事务的提出主要解决，在并发条件下事务的一致性问题。</p>
<h5 id="事务的四个特征"><a href="#事务的四个特征" class="headerlink" title="事务的四个特征"></a>事务的四个特征</h5><p><strong>原子性</strong>：事务的全部操作要看成一个逻辑单元，这个逻辑单元要么全部执行成功，要么全部失败。</p>
<p><strong>一致性</strong>：只有合法的数据才可以写入到数据库，否则事务应该将其回滚到最初的状态。</p>
<p><strong>隔离性</strong>:两个或多个事务的执行是相互隔离互不影响的。</p>
<p><strong>永久性</strong>:事务完成以后，它对系统的影响是永久的。该修改即使出现致命的系统故障也会保持。</p>
<p>原子性是基础，隔离性是手段，持久性和一致性是目标。</p>
<h5 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h5><p>&emsp;&emsp;当我们编写一条update 语句，提交到数据库的瞬间，也有可能别人也提交一条delete语句到数据库中。也许我们都是对同一条记录进行操作，如果不加控制将会破坏数据的一致性。我们必须保证数据库的操作之间是“隔离”的，彼此之间没有任何的干扰是很难的，于是数据库专家制定了一个规范，让各个数据库的厂商都遵守这个规范。这个规范就是事务的隔离级别（Transaction Isolation Level）。</p>
<p>&emsp;&emsp; MySQL定义了四个事务的隔离级别，用来限定事务那些那些改变可见，那些改变是不可见的（需要说明的是并不是那种关系型数据库都有4种隔离级别）。</p>
<p>&emsp;&emsp;低的隔离级别一般支持更高的并发处理，并拥有更低的系统开销。隔离级别由低到高：Read Uncommited &lt; Read Committed &lt; Repeatable Read &lt; Serializable。</p>
<p>&emsp;&emsp; 隔离级别主要目的是处理数据的一致性，他是保证数据一致性的重要手段和工具。在保证数据一致性的时候，会遇到三个问题，那就是脏读、不可重复度、幻读。简单对比如下表5-5</p>
<p><img src="http://xy.liruoning.cn/images/58-mysql-1.png" alt=""></p>
<p><strong>脏读</strong></p>
<p><strong>Read uncommitted 读未提交</strong><br>公司发工资了，领导把5000元打到singo的账号上，但是该事务并未提交，而singo正好去查看账户，发现工资已经到账，是5000元整，非常高兴。可是不幸的是，领导发现发给singo的工资金额不对，是2000元，于是迅速回滚了事务，修改金额后，将事务提交，最后singo实际的工资只有2000元，singo空欢喜一场。</p>
<p>在上面的案例中 singo读到了 公司发工资时事务尚未提交时的数据，这就是事务<strong>没有</strong>进行<strong>隔离</strong>读到的脏数据。</p>
<p><strong>不可重复读</strong></p>
<p><strong>Read committed 读提交</strong><br>singo拿着工资卡去消费，系统读取到卡里确实有2000元，而此时她的老婆也正好在网上转账，把singo工资卡的2000元转到另一账户，并在singo之前提交了事务，当singo扣款时，系统检查到singo的工资卡已经没有钱，扣款失败，singo十分纳闷，明明卡里有钱，为何…<br>出现上述情况，即我们所说的不可重复读，两个并发的事务，“事务A：singo消费”、“事务B：singo的老婆网上转账”，事务A事先读取了数据，事务B紧接了更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变。<br>当隔离级别设置为Read committed时，避免了脏读，但是可能会造成不可重复读。</p>
<p>由上面所讲的 当singo在第二次读（扣款时） 读到了转账事务B操作之后的数据，这就是不可重复读。</p>
<p><strong>幻读</strong></p>
<p><strong>Repeatable read 重复读（MySQL的默认隔离级别）</strong><br>当隔离级别设置为Repeatable read时，可以避免不可重复读。当singo拿着工资卡去消费时，一旦系统开始读取工资卡信息（即事务开始），singo的老婆就不可能对该记录进行修改，也就是singo的老婆不能在此时转账。<br>虽然Repeatable read避免了不可重复读，但还有可能出现幻读。<br>singo的老婆工作在银行部门，她时常通过银行内部系统查看singo的信用卡消费记录。有一天，她正在查询到singo当月信用卡的总消费金额（select sum(amount) from transaction where month = 本月）为80元，而singo此时正好在外面胡吃海塞后在收银台买单，消费1000元，即新增了一条1000元的消费记录（insert transaction … ），并提交了事务，随后singo的老婆将singo当月信用卡消费的明细打印到A4纸上，却发现消费总额为1080元，singo的老婆很诧异，以为出现了幻觉，幻读就这样产生了。</p>
<p>所谓的幻读是指每次读到的数据都不一样，可能读到了其它事务新增的数据。</p>
<p><strong>归纳</strong></p>
<p>1.脏读：<br>脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</p>
<p>2.不可重复读：<br>是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。（即不能读到相同的数据内容）<br>例如，一个编辑人员两次读取同一文档，但在两次读取之间，作者重写了该文档。当编辑人员第二次读取文档时，文档已更改。原始读取不可重复。如果只有在作者全部完成编写后编辑人员才可以读取文档，则可以避免该问题。</p>
<p>3.幻读:<br>是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象<br>发生了幻觉一样。<br>例如，一个编辑人员更改作者提交的文档，但当生产部门将其更改内容合并到该文档的主复本时，发现作者已将未编辑的新材料添加到该文档中。如果在编辑人员和生产部门完成对原始文档的处理之前，任何人都不能将新材料添加到文档中，则可以避免该问题。</p>
<blockquote>
<p>参考博客链接：<a href="https://blog.csdn.net/JIESA/article/details/51317164" target="_blank" rel="noopener">https://blog.csdn.net/JIESA/article/details/51317164</a> 感谢</p>
</blockquote>
<p>在上面的数据中第一条是必须禁止的，后面的两条在大多数情况下可不做考虑，需要注意的是，后面的两种情况虽然对当前的事务是不可理解的，但是最终的结果是正确的，并没有影响到数据的准确性。所以说，最起码数据库要做到不可脏读，如果对数据的一致性要求比较严格，那就是要禁止上面的三个数据不一致问题，也就是要求serializable级别的隔离了，但一般不需要，因为它会明显降低数据库的并发性能。</p>
<h5 id="事务的提交模式"><a href="#事务的提交模式" class="headerlink" title="事务的提交模式"></a>事务的提交模式</h5><p><strong>自动提交模式</strong></p>
<p>什么是自动提交模式？这种模式会在每一条语句执行完后把它做出的修改立即提交给数据库，并使之持久化，这也就相当于每一条语句当作一个事务来执行。在自动提交的模式下，每执行一条SQL语句都会被当作一个事务自动提交或者回滚，这样的话，我们就不能保证<strong>一组SQL的提交或者回滚了</strong>。那如何是好呢？这就体现出来start  transaction的作用力。start   transaction 的主要作用就是挂起自动提交模式。所谓挂起自动提交模式，就是当我们明确地使用了commit 语句时才将修改永久写入数据库。</p>
<p><strong>非自动提交模式</strong></p>
<p>&emsp;&emsp; 任何的语句（其中的一些语句除外，如start transaction ,也就是隐式的提交事务的那些语句）都将成为该事务的一部分，直到你发出一条commit语句或者rollback 来提交或者撤销它为止。</p>
<blockquote>
<p>《PHP核心技术与最佳实践》</p>
</blockquote>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>从实战到原理逐渐深入Redis集群</title>
    <url>/2020/03/19/56-redis%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;在本文章中博主从主从同步到Redis集群实战到Redis集群原理做了讲解。主从同步可以防止主机坏掉，导致网站不能正常的运行，在这种方法中如果主机宕掉直接把从机设置为主机即可。在Redis中主从同步的配置也是很简单。获益匪浅💪。</p>
<a id="more"></a>
<h4 id="Redis主从同步"><a href="#Redis主从同步" class="headerlink" title="Redis主从同步"></a>Redis主从同步</h4><p><strong>优点：</strong></p>
<ol>
<li>一个Master 可以有多个Slave。</li>
<li>多个Slave可以连接相同的Master,Slave 和可以连接其它的Slave形成图形结构</li>
<li>不会阻塞Master,当一个或多个Slave与Master进行初次同步数据的时候，Master可以继续处理客户端的请求。相反，Slave初步同步数据时会阻塞从而不能处理客户端的请求（2.2之后不再阻塞，我现在用的5.0也不会阻塞会新开一个进程）</li>
<li>主从同步可以用来提高系统的伸缩性，比如多个Slave专门用于客户端的<strong>读请求</strong></li>
<li>在Master服务器上禁用持久化，在Slave服务器上进行持久化</li>
</ol>
<h4 id="Redis主从同步的原理"><a href="#Redis主从同步的原理" class="headerlink" title="Redis主从同步的原理"></a>Redis主从同步的原理</h4><p><img src="http://xy.liruoning.cn/images/56-redis-1.png" alt=""></p>
<p>&emsp;&emsp;在设置好Slave服务器之后，Slave自动和Master建立连接，发送SYNC命令。无论是第一次同步建立的连接还是断开后重新连接，Master都启动一个后台进程，将内存以快照的方式写入文件。同时Master开始收集新的写命令并缓存。Master后台进程完成快照操作后，把文件发给Slave，Slave将文件保存到磁盘，然后将数据加载到内存中。接着Master将缓存的命令发给Slave，后续Master接收到的命令都会通过建立的连接发送给Slave。当Master与Slave断开连接时，Slave会自动建立连接。如果Master同时接收到多个Slave的连接命令，Master只会启动一个进程来写镜像文件，然后发给所有的Slave。</p>
<p>简而言之主从同步可以分为两个阶段。</p>
<ol>
<li>Slave服务器主动连接Master服务器</li>
<li>Slave服务器发送SYCN命令到Master服务器请求同步</li>
<li>Master开启一个新进程备份数据到rdb</li>
<li>Master服务器传输rdb文件到Slave</li>
<li>Slave服务器清空数据库的数据，把rdb数据导入数据库中</li>
</ol>
<p>完成了第一阶段接下来Master服务器将用户的所有的更改操作，通过命令的形式转发给所有的Slave服务器。Slave只需要执行Master 服务器发过来的命令就可以实现主从同步的效果。</p>
<p>&emsp;&emsp;相对于MySQL来说，Redis的主从复制很简单，只需要在Slave服务器配置文件中加入以下的配置项：</p>
<p>slaveof  #IP地址 #端口号</p>
<h4 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h4><p>&emsp;&emsp; 在这里我将在我的云服务器上边模拟集群操作（不同的端口），因为身边没有许多服务器所以只能用端口不同来模拟，在实际开发过程中，希望不要在一台服务器上边搭建集群这样服务器宕机之后所有的集群都不可用了。</p>
<ol>
<li>我用的端口分别为6379、6380、6381、6382、6383、6384。三台主服务器三台从服务器。</li>
</ol>
<h5 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a><strong>集群配置</strong></h5><p>在这里就不一一详细解释了，直接上书上边的图,然后我们按照配置选项逐一配置。</p>
<p><img src="http://xy.liruoning.cn/images/56-redis-2.png" alt=""><br><img src="http://xy.liruoning.cn/images/56-redis-3.png" alt=""></p>
<p>解释：</p>
<ul>
<li>cluster-node-timeout 15000 :表示的是超时时间，如果某个节点失联节点中能够失联的最大时间就是这个时间如果超过这个时间我们则判断节点故障了。</li>
</ul>
<p><strong>配置文件相关的配置</strong><br>这里我以6379端口为例：</p>
<ol>
<li>bind  192.168.2.103 </li>
<li>port 6379</li>
<li>dir /usr/local/redis/6379</li>
<li>cluster-config-file  /usr/local/redis/6380/nodes-6380.conf</li>
<li>pidfile /var/run/redis_6380.pid</li>
<li>cluster-node-timeout 15000</li>
<li>cluster-require-full-coverage no</li>
<li>daemonize yes</li>
</ol>
<p><strong>其它的节点配置，只需要根据其端口来配置相关的配置项即可</strong></p>
<p>在这里的集群搭建我用的端口号为 6379~6384这6台机器,配置完成后。</p>
<ol>
<li><p>启动这六个模拟服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# ps -ef|grep redis</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     22011     1  0 11:10 ?        00:00:02 .&#x2F;bin&#x2F;redis-server *:6379 [cluster]</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     22106     1  0 11:23 ?        00:00:01 .&#x2F;bin&#x2F;redis-server *:6380 [cluster]</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     22228     1  0 11:42 ?        00:00:00 .&#x2F;bin&#x2F;redis-server *:6381 [cluster]</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     22233     1  0 11:42 ?        00:00:00 .&#x2F;bin&#x2F;redis-server *:6382 [cluster]</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     22239     1  0 11:43 ?        00:00:00 .&#x2F;bin&#x2F;redis-server *:6383 [cluster]</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     22244     1  0 11:43 ?        00:00:00 .&#x2F;bin&#x2F;redis-server *:6384 [cluster]</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     22249 21169  0 11:43 pts&#x2F;0    00:00:00 grep --color&#x3D;auto redis</span></pre></td></tr></table></figure></li>
<li><p>redis-5.0.0之后已经将 redis-trib.rb 脚本的功能全部集成到 redis-cli之中了，下面基于redis-cli 的 –cluster 来搭建集群</p>
</li>
</ol>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 --cluster-replicas 1 #每个主节点需要一个从节点 6个节点则是三主三从</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span></pre></td></tr><tr><td class="code"><pre><span class="line">Master[0] -&gt; Slots 0 - 5460</span></pre></td></tr><tr><td class="code"><pre><span class="line">Master[1] -&gt; Slots 5461 - 10922</span></pre></td></tr><tr><td class="code"><pre><span class="line">Master[2] -&gt; Slots 10923 - 16383</span></pre></td></tr><tr><td class="code"><pre><span class="line">Adding replica 127.0.0.1:6383 to 127.0.0.1:6379</span></pre></td></tr><tr><td class="code"><pre><span class="line">Adding replica 127.0.0.1:6384 to 127.0.0.1:6380</span></pre></td></tr><tr><td class="code"><pre><span class="line">Adding replica 127.0.0.1:6382 to 127.0.0.1:6381</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity</span></pre></td></tr><tr><td class="code"><pre><span class="line">[WARNING] Some slaves are in the same host as their master</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 9b49997c7a1884ba73cbc9a3513f3bca968f0bab 127.0.0.1:6379</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[0-5460] (5461 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 9e7360d9681825ec3fbf2bd2f26821a742865c22 127.0.0.1:6380</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[5461-10922] (5462 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 47b4a99062002090c696deba9711190c0ae0028d 127.0.0.1:6381</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[10923-16383] (5461 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: d2a4b2374ad033c02a58c112daddf6c0f9ac19fc 127.0.0.1:6382</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 9e7360d9681825ec3fbf2bd2f26821a742865c22</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: c27469257360f8a8cc095d2ba9df97a323920e56 127.0.0.1:6383</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 47b4a99062002090c696deba9711190c0ae0028d</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: 07738c2e7a50cd4f4509275c7369f589d8292284 127.0.0.1:6384</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 9b49997c7a1884ba73cbc9a3513f3bca968f0bab</span></pre></td></tr><tr><td class="code"><pre><span class="line">Can I set the above configuration? (type &#39;yes&#39; to accept): yes</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Nodes configuration updated</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></pre></td></tr><tr><td class="code"><pre><span class="line">Waiting for the cluster to join</span></pre></td></tr><tr><td class="code"><pre><span class="line">......</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 9b49997c7a1884ba73cbc9a3513f3bca968f0bab 127.0.0.1:6379</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[0-5460] (5461 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">   1 additional replica(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: c27469257360f8a8cc095d2ba9df97a323920e56 127.0.0.1:6383</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots: (0 slots) slave</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 47b4a99062002090c696deba9711190c0ae0028d</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 47b4a99062002090c696deba9711190c0ae0028d 127.0.0.1:6381</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[10923-16383] (5461 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">   1 additional replica(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 9e7360d9681825ec3fbf2bd2f26821a742865c22 127.0.0.1:6380</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[5461-10922] (5462 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">   1 additional replica(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: d2a4b2374ad033c02a58c112daddf6c0f9ac19fc 127.0.0.1:6382</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots: (0 slots) slave</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 9e7360d9681825ec3fbf2bd2f26821a742865c22</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: 07738c2e7a50cd4f4509275c7369f589d8292284 127.0.0.1:6384</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots: (0 slots) slave</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 9b49997c7a1884ba73cbc9a3513f3bca968f0bab</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] All nodes agree about slots configuration.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Check for open slots...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Check slots coverage...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] All 16384 slots covered.</span></pre></td></tr></table></figure>

<ol start="3">
<li>连接一台机器进行测试 可以看到根据计算的槽点，来分配落到哪一个计算机上。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# .&#x2F;bin&#x2F;redis-cli -h 127.0.0.1 -p 6379 -c</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name a</span></pre></td></tr><tr><td class="code"><pre><span class="line">-&gt; Redirected to slot [5798] located at 127.0.0.1:6380</span></pre></td></tr><tr><td class="code"><pre><span class="line"> OK</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 127.0.0.1:6379&gt; get name</span></pre></td></tr><tr><td class="code"><pre><span class="line">-&gt; Redirected to slot [5798] located at 127.0.0.1:6380</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;a&quot;</span></pre></td></tr></table></figure>

<ol start="4">
<li>从上面的集群中我们可以看到Redis已经开始工作了。另外，在向6379节点添加名为“name” 的key值的时，发生了重定向跳转，而跳转的目标端口为6380。如果启动 redis-cli 时没有添加 -c则会报移动失败的错误（(error) MOVED 5798 127.0.0.1:6380）。</li>
</ol>
<h5 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h5><p>&emsp;&emsp;现在我们继续启动两个新节点（端口分别为8000、8001），参照 上面的过程复制两份配置文件分别保存在8000和8001两个文件中、修改配置文件，修改完成启动两个节点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root     23849     1  0 17:04 ?        00:00:00 .&#x2F;bin&#x2F;redis-server *:8000 [cluster]</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     23855     1  0 17:04 ?        00:00:00 .&#x2F;bin&#x2F;redis-server *:8001 [cluster]</span></pre></td></tr></table></figure>
<p>将8000端口以主节点的方式添加到集群中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;redis-cli --cluster add-node 127.0.0.1:8000 127.0.0.1:6379 </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Adding node 127.0.0.1:8000 to cluster 127.0.0.1:6379</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 9b49997c7a1884ba73cbc9a3513f3bca968f0bab 127.0.0.1:6379</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[0-5460] (5461 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">   1 additional replica(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: c27469257360f8a8cc095d2ba9df97a323920e56 127.0.0.1:6383</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots: (0 slots) slave</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 47b4a99062002090c696deba9711190c0ae0028d</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 47b4a99062002090c696deba9711190c0ae0028d 127.0.0.1:6381</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[10923-16383] (5461 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">   1 additional replica(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 9e7360d9681825ec3fbf2bd2f26821a742865c22 127.0.0.1:6380</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[5461-10922] (5462 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">   1 additional replica(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: d2a4b2374ad033c02a58c112daddf6c0f9ac19fc 127.0.0.1:6382</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots: (0 slots) slave</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 9e7360d9681825ec3fbf2bd2f26821a742865c22</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: 07738c2e7a50cd4f4509275c7369f589d8292284 127.0.0.1:6384</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots: (0 slots) slave</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 9b49997c7a1884ba73cbc9a3513f3bca968f0bab</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] All nodes agree about slots configuration.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Check for open slots...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Check slots coverage...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] All 16384 slots covered.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 127.0.0.1:8000 to make it join the cluster.</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] New node added correctly.</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# .&#x2F;bin&#x2F;redis-cli --cluster add-node 127.0.0.1:8000 127.0.0.1:6379 </span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Adding node 127.0.0.1:8000 to cluster 127.0.0.1:6379</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 9b49997c7a1884ba73cbc9a3513f3bca968f0bab 127.0.0.1:6379</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[0-5460] (5461 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">   1 additional replica(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: c27469257360f8a8cc095d2ba9df97a323920e56 127.0.0.1:6383</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots: (0 slots) slave</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 47b4a99062002090c696deba9711190c0ae0028d</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 47b4a99062002090c696deba9711190c0ae0028d 127.0.0.1:6381</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[10923-16383] (5461 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">   1 additional replica(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">M: 9e7360d9681825ec3fbf2bd2f26821a742865c22 127.0.0.1:6380</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots:[5461-10922] (5462 slots) master</span></pre></td></tr><tr><td class="code"><pre><span class="line">   1 additional replica(s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: d2a4b2374ad033c02a58c112daddf6c0f9ac19fc 127.0.0.1:6382</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots: (0 slots) slave</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 9e7360d9681825ec3fbf2bd2f26821a742865c22</span></pre></td></tr><tr><td class="code"><pre><span class="line">S: 07738c2e7a50cd4f4509275c7369f589d8292284 127.0.0.1:6384</span></pre></td></tr><tr><td class="code"><pre><span class="line">   slots: (0 slots) slave</span></pre></td></tr><tr><td class="code"><pre><span class="line">   replicates 9b49997c7a1884ba73cbc9a3513f3bca968f0bab</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] All nodes agree about slots configuration.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Check for open slots...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Check slots coverage...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] All 16384 slots covered.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 127.0.0.1:8000 to make it join the cluster.</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] New node added correctly.</span></pre></td></tr></table></figure>

<p>上面的命令把端口8000这个节点以主节点的角色添加到集群中，然后再把8001节点作为8000端口的从节点添加到集群中。</p>
<p>要想让8001节点从属于8000节点添加到集群中，必须在添加节点时指定8000的ID.所以我们先要获取8000的ID。通过redis-cli中使用cluster nodes命令获取。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span></pre></td></tr><tr><td class="code"><pre><span class="line">9b49997c7a1884ba73cbc9a3513f3bca968f0bab 127.0.0.1:6379@16379 myself,master - 0 1584609943000 1 connected 0-5460</span></pre></td></tr><tr><td class="code"><pre><span class="line">c27469257360f8a8cc095d2ba9df97a323920e56 127.0.0.1:6383@16383 slave 47b4a99062002090c696deba9711190c0ae0028d 0 1584609942000 5 connected</span></pre></td></tr><tr><td class="code"><pre><span class="line">47b4a99062002090c696deba9711190c0ae0028d 127.0.0.1:6381@16381 master - 0 1584609940231 3 connected 10923-16383</span></pre></td></tr><tr><td class="code"><pre><span class="line">9e7360d9681825ec3fbf2bd2f26821a742865c22 127.0.0.1:6380@16380 master - 0 1584609942000 2 connected 5461-10922</span></pre></td></tr><tr><td class="code"><pre><span class="line">c519a42fe89a450e2b21c6900bea0d5f03a31141 127.0.0.1:8000@18000 master - 0 1584609942235 0 connected</span></pre></td></tr><tr><td class="code"><pre><span class="line">d2a4b2374ad033c02a58c112daddf6c0f9ac19fc 127.0.0.1:6382@16382 slave 9e7360d9681825ec3fbf2bd2f26821a742865c22 0 1584609941232 4 connected</span></pre></td></tr><tr><td class="code"><pre><span class="line">07738c2e7a50cd4f4509275c7369f589d8292284 127.0.0.1:6384@16384 slave 9b49997c7a1884ba73cbc9a3513f3bca968f0bab 0 1584609943236 6 connected</span></pre></td></tr></table></figure>

<p>在上面中可以看到8000的ID为<code>c519a42fe89a450e2b21c6900bea0d5f03a31141</code> 的到ID以后使用下列命令添加从节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node  &#123;新节点IP&#125;:&#123;新节点端口&#125; &#123;任意集群节点IP&#125;:&#123;对应端口&#125;--cluster-slave  --cluster-master-id &#123;对应的主节点ID&#125;</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# .&#x2F;bin&#x2F;redis-cli --cluster add-node 127.0.0.1:8001 127.0.0.1:6379 --cluster-slave --cluster-master-id c519a42fe89a450e2b21c6900bea0d5f03a31141</span></pre></td></tr></table></figure>

<p>执行成功后我们使用cluster nodes命令查看集群的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span></pre></td></tr><tr><td class="code"><pre><span class="line">9b49997c7a1884ba73cbc9a3513f3bca968f0bab 127.0.0.1:6379@16379 myself,master - 0 1584610605000 1 connected 0-5460</span></pre></td></tr><tr><td class="code"><pre><span class="line">c27469257360f8a8cc095d2ba9df97a323920e56 127.0.0.1:6383@16383 slave 47b4a99062002090c696deba9711190c0ae0028d 0 1584610608000 5 connected</span></pre></td></tr><tr><td class="code"><pre><span class="line">5c3f583142bb84ac1c051cf64e3f27ac1e8d87ab 127.0.0.1:8001@18001 slave c519a42fe89a450e2b21c6900bea0d5f03a31141 0 1584610607000 7 connected</span></pre></td></tr><tr><td class="code"><pre><span class="line">47b4a99062002090c696deba9711190c0ae0028d 127.0.0.1:6381@16381 master - 0 1584610606000 3 connected 10923-16383</span></pre></td></tr><tr><td class="code"><pre><span class="line">9e7360d9681825ec3fbf2bd2f26821a742865c22 127.0.0.1:6380@16380 master - 0 1584610607000 2 connected 5461-10922</span></pre></td></tr><tr><td class="code"><pre><span class="line">c519a42fe89a450e2b21c6900bea0d5f03a31141 127.0.0.1:8000@18000 master - 0 1584610607000 0 connected</span></pre></td></tr><tr><td class="code"><pre><span class="line">d2a4b2374ad033c02a58c112daddf6c0f9ac19fc 127.0.0.1:6382@16382 slave 9e7360d9681825ec3fbf2bd2f26821a742865c22 0 1584610609000 4 connected</span></pre></td></tr><tr><td class="code"><pre><span class="line">07738c2e7a50cd4f4509275c7369f589d8292284 127.0.0.1:6384@16384 slave 9b49997c7a1884ba73cbc9a3513f3bca968f0bab 0 1584610609424 6 connected</span></pre></td></tr></table></figure>

<p>从结果中可以看到8000和8001都已经添加到集群中 8001从属于8000节点。</p>
<h5 id="数据的转移"><a href="#数据的转移" class="headerlink" title="数据的转移"></a>数据的转移</h5><p>&emsp;&emsp;在上面的命令中我们虽然把8000节点添加到了集群中，但是这是他并没有分担slot，这样客户端新添加的数据也不会转移到8000节点的服务器中，所以为了让新添加的节点分担集群的压力。 我们使用reshard命令将一部分solt转移到新增的节点上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli  --cluster reshard &#123;集群中任意节点IP:PORT&#125;</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;redis-cli --cluster reshard 127.0.0.1:6379</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] All nodes agree about slots configuration.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Check for open slots...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Check slots coverage...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[OK] All 16384 slots covered.</span></pre></td></tr><tr><td class="code"><pre><span class="line">How many slots do you want to move (from 1 to 16384)? 5000</span></pre></td></tr><tr><td class="code"><pre><span class="line">What is the receiving node ID?</span></pre></td></tr></table></figure>

<p>在数据迁移过程中要手动输入要迁移slot的个数以及目标节点的ID，如上命令我在迁移过程中指定了5000个槽到8000节点。</p>
<p>查看分配后的节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; cluster nodes</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">c519a42fe89a450e2b21c6900bea0d5f03a31141 127.0.0.1:8000@18000 master - 0 1584612361132 9 connected 0-3402 5461-6153 13423-14325</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr></table></figure>

<p>如上部分可以得到 8000所负责的节点。</p>
<p>验证数据是否转移成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# .&#x2F;bin&#x2F;redis-cli -h 127.0.0.1 -p 6379 -c</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name 77</span></pre></td></tr><tr><td class="code"><pre><span class="line">-&gt; Redirected to slot [5798] located at 127.0.0.1:8000</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK</span></pre></td></tr></table></figure>

<p>如上结果可以数据已经转移到了8000节点。</p>
<h5 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h5><p>&emsp;&emsp;在Redis的集群中，某一个主节点宕机并不会导致整个集群停止服务，这是靠故障转移来保证集群的高可用性。当集群中某一主节点宕机，集群会从此节点的所有从节点中选举一个作为新节点的主节点。</p>
<p>下面我将杀掉 8000节点服务看故障转移的效果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# ps aux|grep redis-server</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     23849  0.1  0.2 163048  9816 ?        Ssl  17:04   0:09 .&#x2F;bin&#x2F;redis-server *:8000 [cluster]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# kill -9 23849</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# .&#x2F;bin&#x2F;redis-cli -h 127.0.0.1 -p 6379 -c</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span></pre></td></tr><tr><td class="code"><pre><span class="line">5c3f583142bb84ac1c051cf64e3f27ac1e8d87ab 127.0.0.1:8001@18001 master - 0 1584613652885 10 connected 0-3402 5461-6153 13423-14325</span></pre></td></tr><tr><td class="code"><pre><span class="line">c519a42fe89a450e2b21c6900bea0d5f03a31141 127.0.0.1:8000@18000 master,fail - 1584613602152 1584613598747 9 disconnected</span></pre></td></tr></table></figure>

<p>在上面的例子中当我kill掉8000节点之后，8001被提升为主节点（8000的从节点）</p>
<p>当我在重启8000端口的服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# .&#x2F;bin&#x2F;redis-server .&#x2F;8000&#x2F;redis8000.conf </span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z redis]# .&#x2F;bin&#x2F;redis-cli -h 127.0.0.1 -p 6379 -c</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">5c3f583142bb84ac1c051cf64e3f27ac1e8d87ab 127.0.0.1:8001@18001 master - 0 1584613824000 10 connected 0-3402 5461-6153 13423-14325</span></pre></td></tr><tr><td class="code"><pre><span class="line">c519a42fe89a450e2b21c6900bea0d5f03a31141 127.0.0.1:8000@18000 slave 5c3f583142bb84ac1c051cf64e3f27ac1e8d87ab 0 1584613822330 10 connected</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr></table></figure>

<p>8000 节点的服务器，成为了以前的从节点（8001）的从节点。</p>
<h4 id="Redis集群原理"><a href="#Redis集群原理" class="headerlink" title="Redis集群原理"></a>Redis集群原理</h4><h5 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h5><p>&emsp;&emsp;Redis集群把键空间划分为16384个solt(槽)，每个节点至少负责1个solt(槽)，最多负责16384个solt(槽)，所以理论上redis的最大节点数为16384个。由于节点之间需要通信，如果节点太多会导致集群内部的通信太过频繁性能下降，所以官方建议节点数设置在1000个左右。</p>
<p>在Redis中每一个节点负责一部分solt，通过存储的key映射到slot中，具体的算法如下：<br>&emsp;&emsp; HASH_SLOT = CRC16(key)mod 16384。通过计算CRC16算法计算key的hash值然后对16384取模，取模的结果是一个0~16383的整数，这个整数就是这个Key对应的solt,通过slot值可以找到这个key要被存储在那个节点。</p>
<p>&emsp;&emsp;在某种情况下我们是不希望把不同的key值存储到不同的节点（因为Redis不支持跨界点操作，如multi）,可以通过哈希标签（hash tags）功能来实现。哈希标签的功能就是把一批不同的key 通过打上相同的标签来实现分分配到同一个solt上。</p>
<p>&emsp;&emsp;要使用hash tags 标签的功能 ，可以在Key中加上“{…}”形式的标签。例如我们希望把网站的用户信息保存到同一个节点上，就可以加上”{user_info}”标签来实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set &#123;user_info&#125;xiaoli 22</span></pre></td></tr><tr><td class="code"><pre><span class="line">-&gt; Redirected to slot [1742] located at 127.0.0.1:8001</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:8001&gt; set &#123;user_info&#125;laowang 23</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:8001&gt; multi</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:8001&gt; get &#123;user_info&#125;xiaoli</span></pre></td></tr><tr><td class="code"><pre><span class="line">QUEUED</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:8001&gt; get &#123;user_info&#125;laowang</span></pre></td></tr><tr><td class="code"><pre><span class="line">QUEUED</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:8001&gt; exec</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;22&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;23&quot;</span></pre></td></tr></table></figure>

<p>通过上面的标签可知加上{user_info}的key值 都被存储到了8001端口的这个节点上。</p>
<p>但是，这个是怎么实现的呢？。其实在计算Key所属的solt时，如果Key中存在“{…}”这样的标签，Redis只会计算大括号里面的字符串的哈希值，这样就实现了打上同一个hash标签的key会被分配到同一个solt上。</p>
<h5 id="Gossip算法"><a href="#Gossip算法" class="headerlink" title="Gossip算法"></a>Gossip算法</h5><p>&emsp;&emsp;因为Redis集群是去中心化的，所以我们可以向集群中任意一个节点进行操作。在Redis集群中的每一个节点都负责处理一部分solt,所以每一个Redis节点都需要知道自己和其它节点需要处理slot的范围。当Redis对某个key值进行存取时，此时的节点会计算key的slot。如果solt属于当前的节点，则交给当前的节点进行处理，如果不属于当前的节点，那么就返回solt的重定向的信息，通过MOVED的重定向信息找到正确的solt对应的节点。</p>
<p>&emsp;&emsp;由于Redis每个节点都需要知道彼此的slot的范围，所以节点与节点之间需要彼此之间进行通信。在通信过程中每个节点定期向其他的节点发送ping命令，以交换各个节点的信息（节点处理solt的范围、节点的主从关系，在线状态、疑似下线状态、已下线的状态）。</p>
<p>&emsp;&emsp;当然在Redis集群不会每次交换所有节点的信息，因为如果集群的节点非常的多，每一次的通信就会很耗费资源。所以Redis，会随机挑选十分之一的节点进行信息的交换。因为每次的通信是随机挑选一部分节点，所以只要时间足够长，所有的节点一定会相互认识的，这就是Gossip算法了。</p>
<h5 id="故障的转移"><a href="#故障的转移" class="headerlink" title="故障的转移"></a>故障的转移</h5><p>&emsp;&emsp;Redis集群中每个节点都会定时的向其它节点发送ping命令，正常情况下节点会回复一个pong消息。如果节点在向其它的节点发送ping命令后在一段时间（可以自己设置默认15秒）没有收到消息。那么就认为此节点<strong>疑似下线</strong>。</p>
<p>&emsp;&emsp;由于疑似下线可能会误判（如网络抖动），所以还需要进行下线检查。下线检查是通过向其他节点询问疑似下线的节点是否真正的下线，当收到超过<strong>集群一半</strong>的节点认为是下线状态，那么就将此节点设置为<strong>下线状态</strong>。</p>
<p><strong>故障的转移过程</strong></p>
<blockquote>
<p>参考博文链接：<a href="https://blog.csdn.net/zlfprogram/article/details/77715952" target="_blank" rel="noopener">https://blog.csdn.net/zlfprogram/article/details/77715952</a></p>
</blockquote>
<p>当一个从节点发现自己正在复制的主节点进入了已下线状态时，从节点将开始对下线主节点进行故障转移，以下是故障转移执行的步骤：<br>1.复制下线主节点的所有从节点里面，会有一个从节点被选中；<br>2.被选中的从节点会执行SLAVEOF no one命令，成为新的主节点；<br>3.新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己；<br>4.新的主节点向集群广播一条PONG消息，这条PONG消息可以让集群中的其他节点立即知道这个节点已经由从节点变成了主节点，并且这个主节点已经接管了原本由已下线节点负责处理的槽。<br>5.新的主节点开始接收和自己负责处理的槽有关的命令请求，故障转移完成。</p>
<blockquote>
<p>在整个文章中主要参考 《php核心技术与最佳时间》感谢</p>
</blockquote>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的持久化</title>
    <url>/2020/03/18/55-redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;Redis是基于内存的数据库，内存数据库有个弊端：如果突然宕机或者断电时数据就会丢失。为了解决这个问题Redis提供了两种持久化的方法，内存快照和日志追加。下面将听博主介绍这两种持久化的方式。</p>
<a id="more"></a>
<h4 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h4><h5 id="内存快照"><a href="#内存快照" class="headerlink" title="内存快照"></a>内存快照</h5><p><strong>RDB</strong> :在指定的<strong>时间间隔内</strong>保存数据的<strong>快照</strong>。</p>
<p><strong>优点</strong></p>
<ol>
<li>适合数据的备份</li>
<li>fork出子进程进行备份主进程没有任何的I/O操作</li>
<li>恢复大数据集的时候速度非常的快</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>在特定条件下进行一次持久化，易丢失数据。</li>
<li>庞大数据时，保存时会出现性能的问题（当庞大数据时候会fork一个进程在fork的时候耗时间在这段时间内CPU的占有率会非常的高，这个时候可能会出现卡顿）</li>
</ol>
<p><strong>建立快照的过程</strong></p>
<p>内存快照时将数据以二进制的方式写入文件中，默认的文件名dump.rdb。</p>
<p>Redis每个一段时间进行一次快照写入的操作，客户端可以使用save 或者 bgsave 来告诉Redis进行一次快照的操作。使用save命令可能会阻塞客户端的请求，从而导致不能快速请求，所以不建议使用save命令，另外注意的是快照的写入是将内存的数据完整的写入。所以如果数据量大操作频繁进而也会影响性能。</p>
<p>save &lt;seconds&gt; &lt;changes&gt;</p>
<p>上面的配置中 seconds 是经过的描述 changes 是改变的次数 如下所示。</p>
<p>save 900 1  # 如果<strong>经过</strong>900或者数据更改 1次就进行一次内存快照的写入。</p>
<p>可以设置多个这样的条件实现不同的快照方案,如果其中一条成立Redis都进行一次快照的操作。</p>
<p>save 900 1<br>save 300 10<br>save 60 10000</p>
<p><strong>SAVE和 BGSAVE区别</strong><br>SAVE  保存是阻塞主进程，客户端无法连接redis，等SAVE完成后，主进程才开始工作，客户端可以连接<br>BGSAVE 是fork一个save的子进程，在执行save过程中，不影响主进程，客户端可以正常链接redis，等子进程fork执行save完成后，通知主进程，子进程关闭。</p>
<h5 id="日志追加"><a href="#日志追加" class="headerlink" title="日志追加"></a>日志追加</h5><p><strong>AOF</strong>:先把<strong>命令追加</strong>到<strong>操作日志</strong>的<strong>尾部</strong>，保存所有的历史操作。</p>
<p><strong>优点</strong></p>
<ol>
<li>数据完整，故障的恢复丢失数据少</li>
<li>可对历史操作进行处理</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>文件体积大</li>
<li>恢复速度慢（恢复的时候需要执行每一条命令）</li>
</ol>
<p><strong>建立日志的过程</strong></p>
<p>&emsp;&emsp;日志追加的方式把<strong>增加</strong>和<strong>修改</strong>数据的<strong>命令</strong>通过<strong>write方式</strong>追加到文件的尾部(appendonly.aof)。Redis重启时读取appendonly.aof 文件中的所有命令并执行，从而把数据写入内存中。</p>
<p>&emsp; &emsp;操作系统的内核I/O存在缓存，所以日志追加的方式不可能立即写入全部命令，这样就有可能造成部分数据的丢失。但是很幸运Redis提供了解决方案，通过配置文件告诉redis应该在什么时候使用fsync强制操作系统把缓存写入磁盘 。</p>
<p>在配置文件中开启日志 ：  appendonly  yes  # 启动日志追加的持久化 方式 （yes|no）</p>
<p>#appendfsync always #每次收到增加或者修改命令 立即写入磁盘（同步持久化）<br>appendfsync everysec #每秒强制写入磁盘一次 （时间间隔1秒）<br>#appendfsync no #是否写入磁盘完全依赖操作系统 </p>
<p>&emsp;&emsp;日志追加的方式有效的降低了数据丢失的风险，同时也带来了另一问题，即持久化文件的(appendonly.aof) 不断的膨胀。例如：调用 incr nums 命令100次，文件就会保存100条incr nums命令，其中的99条都是多余的，应在最后的数据恢复只需要执行 <code>set nums 100</code>就可以了<br>&emsp;&emsp;为了压缩日志文件，Redis提供bgrewriteaof命令。当Redis收到此命就使用类似于内存快照的方式，将内存的数据以命令的方式保存到临时文件中，最后替换原来的日志文件，在这种情况下即使BGREWRITEAOF命令执行失败数据也不会丢失，因为在旧的AOF中不受影响。</p>
<p>需要注意的是只有后台没有运行持久化进程的时候，重写Redis才会被触发。</p>
<ul>
<li>如果一个redis的子进程在创建磁盘快照, AOF重写被列入执行计划但是不会执行直到生成RDB的子程序退出。在这种情况下BGREWRITEAOF将仍然返回OK状态码, 不过使用一个合适的提示信息。你可以检查一个AOF rewrite 是否被例入执行计划通过查询<code>INFO</code> 命令从Redis2.6起。</li>
<li>如果一个AOF rewrite已经在运行，那么这个命令将会返回错误并且不会有AOF rewrite命令被列入稍后的执行计划中。<br>自从Redis 2.4起AOF rewrite是被自动触发的，不过 BGREWRITEAOF命令可以用来触发重写在任何时间。<blockquote>
<p>参考redis官方网站</p>
</blockquote>
</li>
</ul>
<h4 id="合理使用Redis"><a href="#合理使用Redis" class="headerlink" title="合理使用Redis"></a>合理使用Redis</h4><p><strong>防止内存的占满</strong></p>
<ol>
<li>尽量给键值设置超时时间，防止存储大量的不常用的数据占内存</li>
<li>不存放过大的文件，就算是Redis的性能高，倒是如果存放过大的文件，读写速度也会降低，进而影响其它的操作</li>
</ol>
<p><strong>提高使用的效率</strong></p>
<ol>
<li>合理的使用不同的数据类型</li>
<li>慎用<strong>正则匹配</strong>当我们使用正则匹配的时候，如果键值比较多，这个工程也是非常的大。</li>
</ol>
<blockquote>
<p>参考书籍：PHP核心技术与最佳实践</p>
</blockquote>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL分区分表技术</title>
    <url>/2020/03/15/47-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%86%E5%8C%BA%E5%88%86%E8%A1%A8/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;如果数据表记录的数据非常多，数据表的运行速度也会比较慢，效率降低，影响MySQL的整体性能，这时候我们可以通过分区、分表技术来提高数据表的效率，然而，分区技术虽然好，如果不合理使用也会降低数据库的性能。接下来听博主浅谈数据库的分区，分表技术。</p>
<a id="more"></a>

<h4 id="数据库的分区"><a href="#数据库的分区" class="headerlink" title="数据库的分区"></a>数据库的分区</h4><p>&emsp;&emsp;所谓的数据的分区，简而言之，就是将数据表的数据和索引数据，以一定的条件分散到不同的数据文件中。</p>
<p>我们可以通过 <code>show variables like &quot;%partation%&quot;</code> 来查询当前的MySQL软件是否支持分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;%partition%&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-------------------+-------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| Variable_name     | Value |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-------------------+-------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| have_partitioning | YES   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-------------------+-------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in set (0.02 sec)</span></pre></td></tr></table></figure>

<p>如上面所示如果出现相应的结果，则证明你的MySQL支持分区。</p>
<p><strong>建立分区语法：</strong></p>
<p>create table table_name(</p>
<p>​  字段信息，</p>
<p>  索引，</p>
<p>)engine myisam charser utf8</p>
<p>partition by 分区类型（分区字段）（</p>
<p>​     分区选项</p>
<p>）;</p>
<p>分区类型：list (列表) range(范围) 取模轮询（hash,key）</p>
<h5 id="list-列表分区演示"><a href="#list-列表分区演示" class="headerlink" title="list(列表分区演示)"></a>list(列表分区演示)</h5><p>首先建立一个员工表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table employee (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; id int(11) not null default 0,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; name varchar(50) not null default 0,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; area_id int(10) not null</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; )engine myisam charset utf8 partition by list(area_id)(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;        partition  p_north values in (2,3,4,5,13),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;        partition  p_east values in (1,6,7,8,14),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;        partition  p_south values in (9,10,11,12,15),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;        partition  p_west values in (16,17,18,19,20)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; );</span></pre></td></tr></table></figure>

<p>员工表的内容为 id name area_id(分公司区域的id) 假设这是一个主公司员工的数据表，公司有20个分公司从1~20编号，分布在东、南、西、北四个区域。 使员工的数据表按区域进行区分。</p>
<p>增加数据并查看是否用到了分区字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into employee (id,name,area_id)   values(3,&quot;laozhang&quot;,5),(5,&quot;laowang&quot;,6);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 2 rows affected (0.02 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; explain partitions select * from employee where area_id&#x3D;5 \G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">           id: 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">  select_type: SIMPLE</span></pre></td></tr><tr><td class="code"><pre><span class="line">        table: employee</span></pre></td></tr><tr><td class="code"><pre><span class="line">   partitions: p_north  #用到了相应的分区字段 ，在这里 值得 注意：的是 只有 where 后面是分区               </span></pre></td></tr><tr><td class="code"><pre><span class="line">         type: ALL      #的字段才可以用到分区。</span></pre></td></tr><tr><td class="code"><pre><span class="line">possible_keys: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">          key: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">      key_len: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">          ref: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">         rows: 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Extra: Using where</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in set (0.00 sec)</span></pre></td></tr></table></figure>

<p>在没有分区条件下进行查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain partitions select * from employee \G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">           id: 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">  select_type: SIMPLE</span></pre></td></tr><tr><td class="code"><pre><span class="line">        table: employee</span></pre></td></tr><tr><td class="code"><pre><span class="line">   partitions: p_north,p_east,p_south,p_west</span></pre></td></tr><tr><td class="code"><pre><span class="line">         type: ALL</span></pre></td></tr><tr><td class="code"><pre><span class="line">possible_keys: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">          key: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">      key_len: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">          ref: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">         rows: 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Extra:</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in set (0.00 sec)</span></pre></td></tr></table></figure>

<p>虽然所有的 分区都用到了 ，但是查询效率也是高于不建立分区的查询效率在数据量一定的情况下。</p>
<p><strong>Range(范围)</strong></p>
<p>以用户的生日月份来进行分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table person(</span></pre></td></tr><tr><td class="code"><pre><span class="line">     id int(11),</span></pre></td></tr><tr><td class="code"><pre><span class="line">     name varchar(30),</span></pre></td></tr><tr><td class="code"><pre><span class="line">     birthday date </span></pre></td></tr><tr><td class="code"><pre><span class="line">)engine myisam charset utf8 partition by range(month(birthday))(</span></pre></td></tr><tr><td class="code"><pre><span class="line">     partition p1 values less than(4),</span></pre></td></tr><tr><td class="code"><pre><span class="line">     partition p2 values less than(7),</span></pre></td></tr><tr><td class="code"><pre><span class="line">     partition p3 values less than(10),</span></pre></td></tr><tr><td class="code"><pre><span class="line">     partition p4 values less than MAXVALUE</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>
<p>less than   小于;<br>MAXVALUE 可能的最大值 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc partitions  select * from person where birthday&#x3D;&quot;2018-12-06&quot; \G</span></pre></td></tr><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span></pre></td></tr><tr><td class="code"><pre><span class="line">           id: 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">  select_type: SIMPLE</span></pre></td></tr><tr><td class="code"><pre><span class="line">        table: person</span></pre></td></tr><tr><td class="code"><pre><span class="line">   partitions: p4</span></pre></td></tr><tr><td class="code"><pre><span class="line">         type: system</span></pre></td></tr><tr><td class="code"><pre><span class="line">possible_keys: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">          key: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">      key_len: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">          ref: NULL</span></pre></td></tr><tr><td class="code"><pre><span class="line">         rows: 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Extra:</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in set (0.00 sec)</span></pre></td></tr></table></figure>
<p>如代码所示在查询的时候用到了第四分区（p4）。</p>
<p><img src="http://xy.liruoning.cn/images/47-mysql-1.png" alt=""></p>
<p>如上图所示，MySQL通过分区被数据放到了不同的文件中，索引也放到了不同的文件中，由此存储数据的文件大小也会明显变小，效率则明显提升。</p>
<p><strong>Hash</strong></p>
<p>到底采用哪种分区类型比较合适呢，其实在通常情况下Range类型常用，但是比如说在主从复制的结构中，主服务器上很少使用select 查询，在主服务器上使用Range类型的分区通常并没有太大的意义，此时，使用HASH类型的分区相对更好，假设使用：</p>
<p> partition by hash(id) partition 10</p>
<p>当插入新数据的时候会根据id把数据平均分配到各个分区上，由于文件小、效率高，更新操作会变的更快。</p>
<p><strong>示例 ：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table person2(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;      id int(11),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;      name varchar(30),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;      birthday date</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; )engine myisam charset utf8 partition by hash(month(birthday)) partitions 5;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.05 sec)</span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/47-mysql-2.png" alt=""></p>
<p><strong>Key(键值)</strong></p>
<p>key分区时hash分区的一种延伸，这里的hash key 是由 MySQL系统产生的。当表中存在主键或者唯一键时，如果创建key分区时没有指定字段系统默认会首选主键列作为分区字列,如果不存在主列会选择非空唯一键列作为分区列,注意唯一列作为分区列唯一列不能为null。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table person3(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;      id int(11) primary key,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;      name varchar(30),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt;      birthday date</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; )engine myisam charset utf8 partition by key(id) partitions 5;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.03 sec)</span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/47-mysql-3.png" alt=""></p>
<h4 id="分区管理"><a href="#分区管理" class="headerlink" title="分区管理"></a>分区管理</h4><p>&emsp;&emsp;对数据库分区进行增加、删除操作。</p>
<h5 id="删除分区"><a href="#删除分区" class="headerlink" title="删除分区"></a><strong>删除分区</strong></h5><p>①key/hash 删除分区数据不会丢失</p>
<p>②range/list 删除分区数据会丢失</p>
<p><strong>语法</strong></p>
<p>求余方式(key/hash):</p>
<p>&gt;alter table 表名 coalesce partition 数量;</p>
<p>范围方式(range/list):</p>
<p>&gt;alter table 表名 drop partition 分区名</p>
<p><strong>删除hash 分区</strong><br>删除分区前的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from person2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+---------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| id   | name    | birthday   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+---------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    1 | laowang | 2015-02-03 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    1 | laowang | 2015-12-03 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    1 | laowang | 2015-09-03 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+---------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">3 rows in set (0.00 sec)</span></pre></td></tr></table></figure>
<p>删除分区,下面所示 我删除了四个分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table person2  coalesce partition 4;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 3 rows affected (0.09 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span></pre></td></tr></table></figure>
<p>删除分区后的数据，数据并未减少</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from person2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+---------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| id   | name    | birthday   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+---------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    1 | laowang | 2015-02-03 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    1 | laowang | 2015-12-03 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    1 | laowang | 2015-09-03 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+---------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">3 rows in set (0.00 sec)</span></pre></td></tr></table></figure>
<p><strong>删除range分区</strong></p>
<p>删除分区前的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+----------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| id   | name     | birthday   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+----------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    2 | xiaoli   | 2020-03-12 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    3 | xiaoming | 2018-03-06 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    2 | xiaoli   | 2020-06-12 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    3 | xiaoming | 2018-12-06 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+----------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">4 rows in set (0.00 sec)</span></pre></td></tr></table></figure>

<p>删除分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table person drop partition p1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.06 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span></pre></td></tr></table></figure>

<p>删除分区后的数据，位于1分区的数据丢失</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+----------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| id   | name     | birthday   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+----------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    2 | xiaoli   | 2020-06-12 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|    3 | xiaoming | 2018-12-06 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+------+----------+------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">2 rows in set (0.00 sec)</span></pre></td></tr></table></figure>

<p>相应的删除分区之后的文件也会删除</p>
<p><img src="http://xy.liruoning.cn/images/47-mysql-4.png" alt=""></p>
<h5 id="添加分区"><a href="#添加分区" class="headerlink" title="添加分区"></a><strong>添加分区</strong></h5><p><strong>语法</strong><br>求余方式： key/hash<br>&gt; alter table 表名 add partition partitions 数量;<br>范围方式： range/list<br>&gt; alter table 表名 add partition(<br>​      partition 名称 values  less than (常量)<br>​      或<br>​      partition 名称 values in (n,n,n)<br>​    );</p>
<p><strong>添加HASH分区</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table person2 add partition partitions 4;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 3 rows affected (0.08 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span></pre></td></tr></table></figure>

<p>查看分区文件，在原来的基础上增加了4个分区。分表增加好后，又把数据平均地分配给各个分表存储。</p>
<p><img src="http://xy.liruoning.cn/images/47-mysql-5.png" alt=""></p>
<p><strong>分区技术的劣势</strong></p>
<p>分区技术虽然好但目前的实现还是有很多的限制。</p>
<ol>
<li>值得注意的是，当我们的表中<strong>有主键</strong>或者<strong>唯一键</strong>的时，分区字段必须是<strong>主键</strong>或者<strong>唯一键</strong>的<strong>一部分</strong></li>
<li>很多时候使用分区就不能使用主键了，否则影响性能</li>
<li>只能通过int 类型的字段或者返回int类型的字段的表达式来区分，通常YEAR 、TO_DAYS等函数（MySQL5.6已经放宽了限制）</li>
<li>每个表最多1024个分区，不可能无限制的扩展分区，而且过度建立分区会消耗大量的内存。</li>
<li>采用分区的表不支持外键，相关约束的逻辑通过代码来实现</li>
<li>分区后，可能会造成索引的失效，建立分区之后需要验证分区的可行性。</li>
</ol>
<h4 id="数据分表"><a href="#数据分表" class="headerlink" title="数据分表"></a>数据分表</h4><p>&emsp;&emsp; 数据库的分表技术和分区的思想类似，区别是分区是把数据表的存储数据的文件，分散到到几个物理文件中去存储，而分表是吧原先的一个表分成多个表。分表技术又分为垂直分表和水平分表。</p>
<p><strong>水平分表</strong></p>
<p>针对数据量巨大的单张表（比如订单表），按照某种规则（RANGE,HASH取模等），切分到多张表里面去。 虽然数据分散到不同的表中，但是这些表还是在<strong>同一个库中</strong>，所以<strong>库级别</strong>的数据库操作还是有<strong>IO瓶颈</strong>。</p>
<blockquote>
<p>参考：<a href="https://juejin.im/entry/5b5eb7f2e51d4519700f7d3c" target="_blank" rel="noopener">https://juejin.im/entry/5b5eb7f2e51d4519700f7d3c</a></p>
</blockquote>
<p><strong>垂直分表</strong></p>
<p>有的时候，一个数据表设计好了，里边有<strong>许多字段</strong>，但是这些字段有的是<strong>经常使用的</strong>，有的是<strong>不常用的</strong>。在进行正常数据表操作的时候，<strong>不常用的字段</strong>也会<strong>占据一定的资源</strong>，对<strong>整体操作的性能</strong>造成一定的<strong>干扰、影响</strong>。为了减少资源的开销、提升运行效率，就可以把不常用的字段给创建到一个专门的<strong>辅表</strong>中去。同一个业务表的不同字段分别存储到不同数据表的过程就是“垂直分表”。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出MySQL的锁机制</title>
    <url>/2020/03/11/46-mysql%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;说起MySQL的锁机制，一直是一个常见的话题。例如：当客户端操作表的记录时，为了保证数据的隔离性(多个客户端的操作互不影响) ，我们通常使用加锁来处理。或者产生死锁的时候如何排查？都和锁有关。下面我将对MySQL的锁机制展开学习。</p>
<a id="more"></a>

<h4 id="锁的操作和锁的粒度"><a href="#锁的操作和锁的粒度" class="headerlink" title="锁的操作和锁的粒度"></a>锁的操作和锁的粒度</h4><p><strong>操作</strong></p>
<ol>
<li><p>读锁：读操作时要加的锁，也称<strong>共享锁</strong> ，特征是所有人都可以读，只有释放后才可以写。</p>
</li>
<li><p>写锁：写操作时加的锁，也称<strong>独占锁</strong>、<strong>排它锁</strong>，只有锁表的客户才能进行读、写操作，其它用户都不能对其修改和读取，更不能加锁。</p>
</li>
</ol>
<p><strong>锁定的粒度</strong></p>
<ol start="3">
<li><p>表级锁：开销小、加锁快、发生锁冲突的概率大、并发度最低。</p>
</li>
<li><p>页级锁：一次锁定相邻的一组数据，开销和加锁时间位于表锁和行锁之间；会出现死锁；锁定的粒度介于表级锁和行级锁之间，并发度一般。</p>
</li>
<li><p>行级锁：开销大，枷锁满，会出现死锁，锁的粒度最小，发生锁冲突的概率低，并发度最高。</p>
<h4 id="表锁演示"><a href="#表锁演示" class="headerlink" title="表锁演示"></a>表锁演示</h4></li>
</ol>
<p><strong>添加锁</strong><br>添加锁语法：<code>lock table table_name1 read|write,table_name2 read|write</code><br>释放锁：<code>unlock tables</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; lock table user read;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.00 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; select * from user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+----+----------+-----+---------------+---------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| id | name     | age | email         | classid |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+----+----------+-----+---------------+---------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  1 | xiaogang |  12 | gang@sohu.com |       4 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  2 | xiaohong |  13 | hong@sohu.com |       2 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  3 | xiaolong |  31 | long@sohu.com |       2 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  4 | xiaofeng |  22 | feng@sohu.com |       3 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">|  5 | xiaogui  |  42 | gui@sohu.com  |       3 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+----+----------+-----+---------------+---------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">5 rows in set (0.00 sec)</span></pre></td></tr></table></figure>
<p>在上边的命令中我对user表进行了，加读锁的操作。并执行了一条查询语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update user set age&#x3D;21 where id&#x3D;1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">ERROR 1099 (HY000): Table &#39;user&#39; was locked with a READ lock and can&#39;t be updated</span></pre></td></tr></table></figure>

<p>下面我在用<strong>同一账号</strong>进行update操作时便不能操作并且<code>error</code>中也已经说明user表加了read锁不能进行update操作。<br>同样我在<strong>另一个账号</strong>对 user 表进行 update操作时 会进入阻塞状态。如图：<br><img src="http://xy.liruoning.cn/images/46-mysql-1.png" alt=""><br>当执行 <code>unlock tables</code>释放锁另一个进程便可执行update操作<br><img src="http://xy.liruoning.cn/images/46-mysql-2.png" alt=""></p>
<h4 id="行级锁演示"><a href="#行级锁演示" class="headerlink" title="行级锁演示"></a>行级锁演示</h4><p>&emsp; <strong>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁。并且该索引不能失效，否则都会从行锁升级为表锁</strong>,简而言之：Innodb只有在使用索引条件，检索数据时使用行锁，否则，使用表锁。</p>
<p><strong>语法</strong></p>
<p>begin;<br>执行语句；<br>commit; </p>
<p><img src="http://xy.liruoning.cn/images/46-mysql-3.png" alt=""></p>
<p>如图所示，当现有的用户对其开启行级的锁时，另一个用户不能对当前的行进行操作，但是可以对同一个表的其它行进行操作。</p>
<h4 id="PHP代码实现锁机制"><a href="#PHP代码实现锁机制" class="headerlink" title="PHP代码实现锁机制"></a>PHP代码实现锁机制</h4><p>&emsp;&emsp;首先我们创建一个新表来进行测试。</p>
<p>创建 a 表 并把 a表的id值 更新到100；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table a(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; id int not null default &quot;0&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -&gt; )engine myisam charset utf8;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected, 1 warning (0.03 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; update a set id &#x3D;100;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 0 rows affected (0.00 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Rows matched: 0  Changed: 0  Warnings: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql&gt; select * from a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| id  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| 100 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in set (0.00 sec)</span></pre></td></tr></table></figure>

<p>利用 apache 的 ab.exe 工具，来模仿多个并发测试。</p>
<p><code>语法:ab.exe  –n 总的请求数  -c 并发数  url地址；</code></p>
<p>在不加锁的情况下每次的更新数加1。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=locktest;port=3308'</span>,<span class="string">'lrn'</span>,<span class="string">'lrn123'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$res=$pdo-&gt;query(<span class="string">"select * from a"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$info = $res-&gt;fetch(PDO::FETCH_ASSOC);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$id=$info[<span class="string">'id'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">$id=$id+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pdo-&gt;exec(<span class="string">"update a set id=$id"</span>);</span></pre></td></tr></table></figure>

<p>利用ab.exe 工具进行并发请求，请求数为50 并发数 为50 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\www\wamp64\bin\apache\apache2.4.41\bin&gt;ab  -n 50 -c 50 http:&#x2F;&#x2F;localhost&#x2F;test&#x2F;lock.php</span></pre></td></tr><tr><td class="code"><pre><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http:&#x2F;&#x2F;www.zeustech.net&#x2F;</span></pre></td></tr></table></figure>
<p>查询执行后MySQL的结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| id  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| 131 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in set (0.00 sec)</span></pre></td></tr></table></figure>
<p>最后的结果并未从100 ，变为150，说明有的请求是在同一时间执行的。</p>
<p>下面我首先将a 表的id值归为 100</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update a set id &#x3D;100;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Query OK, 1 row affected (0.00 sec)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span></pre></td></tr></table></figure>

<p>在家锁的情况下执行 ab 工具的并发测试。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=locktest;port=3308'</span>,<span class="string">'lrn'</span>,<span class="string">'lrn123'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pdo-&gt;exec(<span class="string">"lock table a read"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$res=$pdo-&gt;query(<span class="string">"select * from a"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$info = $res-&gt;fetch(PDO::FETCH_ASSOC);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$id=$info[<span class="string">'id'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">$id=$id+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pdo-&gt;exec(<span class="string">"update a set id=$id"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pdo-&gt;exec(<span class="string">"unlock tables"</span>);</span></pre></td></tr></table></figure>

<p>执行ab.exe </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\www\wamp64\bin\apache\apache2.4.41\bin&gt;ab.exe -n 50 -c 50 http:&#x2F;&#x2F;localhost&#x2F;test&#x2F;lock.php</span></pre></td></tr><tr><td class="code"><pre><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http:&#x2F;&#x2F;www.zeustech.net&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Licensed to The Apache Software Foundation, http:&#x2F;&#x2F;www.apache.org&#x2F;</span></pre></td></tr></table></figure>
<p>执行完之后，进行a表id的查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id from a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| id  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| 150 |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in set (0.00 sec)</span></pre></td></tr></table></figure>

<p>由上面的数据我们可以看出，在加锁和不加锁的在并发情况下，数据的准确性。</p>
<p><strong>引申：</strong></p>
<p>&emsp;&emsp;在MySQL的锁机制中，对一个商品表进行写操作，如果锁定了整张表，其它的用户也不能对数据表进行读、写，进而拖垮整个页面的速度。</p>
<p>&emsp;&emsp;所以我们可以使用PHP的文件锁，对某一段的代码进行加锁操作这样便可以避免锁定数据库表了。</p>
<p>使用到PHP的<code>flock</code>函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pdo  = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=locktest;port=3308'</span>,<span class="string">'lrn'</span>,<span class="string">'lrn123'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pdo-&gt;exec(<span class="string">'set names utf8'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$fh = fopen(<span class="string">'./lock.txt'</span>,<span class="string">'w'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">flock($fh,LOCK_EX);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//取出id的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$res = $pdo-&gt;query(<span class="string">'select id from a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$info = $res-&gt;fetch(PDO::FETCH_ASSOC);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$id = $info[<span class="string">'id'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//给id的值加1操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$id = $id+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//把该值再写入；</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$pdo-&gt;exec(<span class="string">"update a set id=$id"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">flock($fh,LOCK_UN);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'ok'</span>;</span></pre></td></tr></table></figure>

<p>对其使用ab.exe 并发测试 一样可以完成完整的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select id from a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| id  |</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">| 200 |                    &#x2F;&#x2F;在原来150的情况下，加了50</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 row in set (0.00 sec)</span></pre></td></tr></table></figure>

<h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>&emsp;&emsp;乐观锁顾名思义就是在好的情况下，来看待问题。它会认为不会产生并发问题，因此不会上锁，如果有更新操作会判断其它的线程有没有进行过修改，一般通过<strong>版本号机制</strong> 。</p>
<p><strong>实现步骤：</strong></p>
<p><strong>版本号机制</strong></p>
<p>①在数据库表中设立<code>version</code>字段</p>
<p>②再取数据的时候将<code>version</code>字段的数据取出</p>
<p>③在更新数据的时候先判断<code>version</code>的值和数据库的值是否相等，如果不相等则说明数据库发生了修改则更新失败。如果相等除了要修改的字段 <code>version</code>字段<code>+1</code> 。</p>
<p>实现语句：</p>
<p><code>update user set name=&quot;xiaowang&quot; ,version=version+1 where id={id},version={version} ;</code></p>
<p>相应的乐观锁是通过程序控制的，则也就不存在死锁的概念。</p>
<h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>&emsp;&emsp;与乐观锁相对应的就是悲观锁，顾名思义悲观锁认为每次操作都会有数据冲突，所以每一次的操作都会获取锁才会进行相同数据的操作。进而悲观锁耗费较多的时间，另外，悲观锁是有数据库进行实现的，要用时执行相关的语句。数据表的，共享锁、排它锁，都是属于悲观锁的范畴。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP实现两个O(nlog n)级别的排序算法（归并排序、快速排序）</title>
    <url>/2020/03/09/15-php%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>&emsp;&emsp;在完成<strong>归并排序</strong>和<strong>快速排序</strong>过程中，使用了<strong>分而治之</strong>的算法的思想，所谓的<strong>分而治之</strong>顾名思义将原问题分割成同等结构的子问题，再将子问题逐一解决，进而原问题也会得到解决。在完成快速排序，过程中，也扩展了双路排序，三路排序等内容来优化一些特殊的情况。</p>
<a id="more"></a>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>&emsp;&emsp;归并排序时将数据序列划分成越来越小的子表，在对子集进行排序，最后用递归的方法将排好序的子表合并成一个越来越大的有序序列。</p>
<p>&emsp;&emsp;具体而言，归并排序算法的原理如下：对于给定的一组记录（假设共有n个记录），首先将数组一分为二，然后将每一个子数组，对于每一个子数据采用同样的递归方法，划分为更小的数组，直到子数组的大小为一，按照需要把相邻的子数组进行归并（归并后的子数组还是有序的）为更大的数组。知道归并后的数组大小和原来的数组大小一样的时算法结束。在算法实现中最主要的是两步，第一步，划分子表；第二步，合并半子表。</p>
<p>实现的步骤:</p>
<p>以数组array(24,13,26,1,2,27,38,15)为例</p>
<ol>
<li>[24,13,26,1]  [2,27,38,15]</li>
<li>[24,13] [26,1] [2,27] [38,15]</li>
<li>[24] [13] [26] [1] [2] [27] [38] [15]</li>
<li>[13,24] [1,26] [2,27] [15,38]</li>
<li>[1,13,24,26] [2,15,27,38]</li>
<li>[1,2,13,15,24,26,27,38]</li>
</ol>
<p>代码实现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span><span class="params">(array $arr)</span>:<span class="title">array</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">return</span> mergeSortR($arr,<span class="number">0</span>,count($arr)<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//将数组array[$l.....$r]之间进行排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSortR</span><span class="params">(array &amp;$arr,int $l,int $r)</span>:<span class="title">array</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $mid=$l+intval(($r-$l)/<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>($l&gt;=$r)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//将数组一分为二</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    mergeSortR($arr,$l,$mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mergeSortR($arr,$mid+<span class="number">1</span>,$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//进行归并</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span> ($arr[$mid]&gt;$arr[$mid+<span class="number">1</span>]) <span class="comment">//因为从mid两边的序列都是有序的所以当arr[mid]&gt;arr[mid+1]的时候才需要进行归并</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   merge($arr,$l,$mid,$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">return</span>  $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span><span class="params">(array &amp;$arr,int $l,int $mid,int $r)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>($i=$l;$i&lt;=$r;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $aux[$i-$l]=$arr[$i];  <span class="comment">//开辟一个新数组来存储当前的数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $i=$l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $j=$mid+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>($k=$l;$k&lt;=$r;$k++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> ($i &gt; $mid) &#123;           </span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$k] = $aux[$j-$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $j++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">elseif</span>($j&gt;$r)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$k]=$aux[$i-$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">elseif</span>($aux[$i-$l]&lt;$aux[$j-$l])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$k]=$aux[$i-$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$k]=$aux[$j-$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $j++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上面叙述的归并排序是<strong>自顶向下</strong>的归并排序，下面将介绍一下一个<strong>自底向上</strong>的归并排序。</p>
<p>实现的思路：</p>
<p>我们可以将数组分成一个一个的小段，每次划分小段的大小是原来的二倍如此循环下去直到$sz的大小小于n，最后在对每个相邻的小段进行归并排序直到整个数组有序。</p>
<p>实现代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSortBu</span><span class="params">(array $arr)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $n=count($arr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>($sz=<span class="number">1</span>;$sz&lt;$n;$sz=$sz+$sz)&#123;   <span class="comment">//开始以$sz=1来划分数组，每次sz的值增加到原来的二倍</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i+$sz&lt;$n;$i+=min($sz+$sz,$n))&#123; <span class="comment">//将分好的块，相邻块之间进行归并</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//$arr[$i......$i+$sz-1] [$i+$sz......$i+$sz+$sz-1]之间的数组进行归并</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            merge($arr,$i,$i+$sz<span class="number">-1</span>,$i+$sz+$sz<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>&emsp;&emsp;快速排序是一种非常高效的排序算法，它采用“分而治之“的思想，把大的问题拆分成小的问题，小的问题再拆分成更小的问题。</p>
<h5 id="普通的快速排序"><a href="#普通的快速排序" class="headerlink" title="普通的快速排序"></a>普通的快速排序</h5><p>&emsp;&emsp;给定一组数据，首先选择第一个数据为关键数据 定义为 <code>$v</code> ，以<code>$v</code>为界限将数据分为 小于<code>v</code>和大于<code>v</code>的两部分，比<code>v</code>小的放到数据<code>v</code>的左边，比<code>v</code>大的放到<code>v</code>的右边。</p>
<p>思路：</p>
<ol>
<li>将$v=$arr[$l] 的数据赋值给$v 得到那个关键数据</li>
<li>定义$j = $l; 使得 arr[$l+1…..$j]&lt;$v,arr[$j+1……$i)&gt;$v ，在这里初始的 $j的值$l 也就是开始$j 是一个<strong>空</strong> ，这样比较严谨。</li>
<li>在一个循环中 开始循环的位置为$i=$l+1 ,如果arr[$i]&gt;=$v;这个时候$j++就可以了，如果arr[$i] 小于$v，当前 $i 位置的值和$j+1 互换 $j++。最后把$j 当前的位置和 首位置进行互换，返回当前$j的位置，进行下一次递归（变为更小的问题）。</li>
</ol>
<p>如图：</p>
<p><img src="http://xy.liruoning.cn/images/15-php-1.png" alt=""></p>
<p>代码实现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span><span class="params">(array $arr)</span>:<span class="title">array</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,<span class="number">0</span>,count($arr)<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSortR</span><span class="params">(array &amp;$arr,int $l,int $r)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>($l&gt;=$r)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $p = partition($arr,$l,$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,$l,$p<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,$p+<span class="number">1</span>,$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//对$l...$r部分进行排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partation</span><span class="params">(array &amp;$arr,int $l,int $r)</span>: <span class="title">int</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $v = $arr[$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $j=$l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//arr[$l+1.....$j]&lt;$v,arr[$j+1......$i)&gt;$v</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>($i=$l+<span class="number">1</span>;$i&lt;=$r;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($arr[$i]&lt;$v)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $tmp=$arr[$i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$i]=$arr[$j+<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$j+<span class="number">1</span>]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $j++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$l]=$arr[$j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$j]=$v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="随机化快速排序"><a href="#随机化快速排序" class="headerlink" title="随机化快速排序"></a>随机化快速排序</h5><p><strong>问题：</strong></p>
<p>&emsp;&emsp;在上边的普通快速排序，在数组<strong>近乎有序</strong>的状态下，数组排序可能退化成O(N*N)级别的算法。在快速排序的实现思路中，我们是将一个数组一分为二然后再将一个分出来的数组进行一分为二，对分好的数组进行O(N)级别的排序。可想而知 当我们的数组近乎有序的状态下，分开的子数组是极度不平衡，所以在平分数组的情况下也就不会是O(log N)级别的了，在极端的情况下可能退化成 O(N)级别，然后在内部排序，最终退化成 近乎O(N*N)级别的算法。</p>
<p><strong>解决:</strong><br>&emsp;&emsp;在上边提到的问题中，再找关键数据时，我们可以找可选范围内的<strong>随机的选择一个元素</strong>，这样就可以避免有序情况下，算法性能的退化。<br>代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span><span class="params">(array $arr)</span>:<span class="title">array</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,<span class="number">0</span>,count($arr)<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSortR</span><span class="params">(array &amp;$arr,int $l,int $r)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>($l&gt;=$r)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $p = partition($arr,$l,$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,$l,$p<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,$p+<span class="number">1</span>,$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//对$l...$r部分进行排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partation</span><span class="params">(array &amp;$arr,int $l,int $r)</span>: <span class="title">int</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//当数组近乎有序的状态下 如果只是取第一个元素的话 很有可能退化成O(n*n)级别的算法，所以这里要随机去一个数组来和头数组进行替换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $rand=random_int(<span class="number">0</span>,$r)%($r-$l+<span class="number">1</span>)+$l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $tmp = $arr[$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$l]=$arr[$rand];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$rand]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $v = $arr[$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $j=$l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//arr[$l+1.....$j]&lt;$v,arr[$j+1......$i)&gt;$v</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>($i=$l+<span class="number">1</span>;$i&lt;=$r;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($arr[$i]&lt;$v)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $tmp=$arr[$i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$i]=$arr[$j+<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$j+<span class="number">1</span>]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $j++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$l]=$arr[$j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$j]=$v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="双路快速排序"><a href="#双路快速排序" class="headerlink" title="双路快速排序"></a>双路快速排序</h5><p><strong>问题：</strong></p>
<p>&emsp;&emsp; 在上面的快速排序算法中，我们是将<strong>小于</strong><code>V</code>的部分和<strong>大于等于</strong><code>V</code>的部分分为左右两端。如果在重复数据比较多的情况下，<code>V</code>的重复值比较多，这个时候左右的两部分又变为极度的不平衡，可想算法的性能也会随之的降低。</p>
<p>如图：</p>
<p><img src="http://xy.liruoning.cn/images/15-php-2.png" alt=""></p>
<p><strong>解决：</strong></p>
<p>&emsp;&emsp;在上面讲的算法中我们是从一端开始判断元素的，如果我们将小于<code>V</code>大于<code>V</code>放到数组的两端。</p>
<p><strong>思路：</strong></p>
<p>&emsp;&emsp;在两端我们分别定义<code>i</code>和<code>j</code>两端要扫描的元素，我们首先使<code>i</code>从前向后扫描，直到碰到arr[$i]&gt;=$v 停止，然后<code>j</code>从后往前扫描直到碰到arr[$j]&lt;=$v的值时停止扫描，然后 arr[$i] 与 arr[$j]的值互换位置 i++ 、j++。直到 i&gt;j 循环停止，最后我们可以看到 i 最后是停留在最后一个大于等于V 的位置 j最后停留在最后一个的小于等于 V 的位置最后我们将 $v 和 arr[$j]位置进行互换 便完成了排序。</p>
<p><strong>如图：</strong></p>
<p><img src="http://xy.liruoning.cn/images/15-php-3.png" alt=""></p>
<p>再上图中我们可以看到橙色的部分是是 <strong>小于等于V</strong>的元素，紫色的部分是<strong>大于等于V</strong>的元素，这样的话也就不会存在有大量重复的元素集中在某一端。</p>
<p>代码实现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span><span class="params">(array $arr)</span>:<span class="title">array</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,<span class="number">0</span>,count($arr)<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSortR</span><span class="params">(array &amp;$arr,int $l,int $r)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>($l&gt;=$r)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $p = partition($arr,$l,$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,$l,$p<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,$p+<span class="number">1</span>,$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partation2</span><span class="params">(array &amp;$arr,int $l,int $r)</span>: <span class="title">int</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//当数组近乎有序的状态下 如果只是取第一个元素的话 很有可能退化成O(n*n)级别的算法，所以这里要随机去一个数组来和头数组进行替换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $rand=intval(random_int(<span class="number">0</span>,$r)%($r-$l+<span class="number">1</span>)+$l);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $tmp = $arr[$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$l]=$arr[$rand];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$rand]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//将第一个元素作为v的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $v = $arr[$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $i=$l+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $j=$r;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//arr[l+1.....i)&lt;=V; arr(j.....r]&gt;=V元素进行排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> ($i&lt;=$r&amp;&amp;$arr[$i]&lt;$v)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> ($j&gt;=$l+<span class="number">1</span>&amp;&amp;$arr[$j]&gt;$v)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $j--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($i&gt;$j)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $tmp=$arr[$i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$i]=$arr[$j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$j]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $j--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$l]=$arr[$j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$j]=$v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span>  $j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="三路快速排序"><a href="#三路快速排序" class="headerlink" title="三路快速排序"></a>三路快速排序</h5><p>&emsp;&emsp;在上面的快速排序过程中，我们将数组分成了 小于V和大于V的两部分。三路快速排序则是将数组分成小于V 等于V和大于V三部分，进而在三路排序<strong>递归的</strong>过程中等于 <code>V</code>的部分我们也不用管了，算法的效率也会进一步的提升。</p>
<p><strong>思路：</strong></p>
<p>&emsp;&emsp; <img src="http://xy.liruoning.cn/images/15-php-4.png" alt=""></p>
<p>如图所示我们将排序数组分为 arr[l+1……lt]&lt;v、arr[lt+1……i)==v、arr[gt……r] &gt;v的三部分。</p>
<p>我们首先定义<code>i</code>元素为当前要查找的元素，如果arr[i]&lt;v 的值 arr[lt+1]的值便和 i 的值进行互换 同时 i++,lt++。如果arr[i]&gt;v</p>
<p>的值arr[gt-1]和arr[i]的值进行互换，同时gt–,i的值<strong>不动</strong>。最后i&gt;=gt时循环停止，arr[lt]和l的值进行交换。这时返回 lt-1、gt索引的下标。<strong>PS:</strong> 这里我为什么返回lt-1 呢？因为当我互换位置之后 lt的值这时是指向的第一个 等于v的值。所以要返回小于V的边界，是lt-1。</p>
<p>代码实现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span><span class="params">(array $arr)</span>:<span class="title">array</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,<span class="number">0</span>,count($arr)<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSortR</span><span class="params">(array &amp;$arr,int $l,int $r)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>($l&gt;=$r)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $p = partation3($arr,$l,$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,$l,$p[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    QuickSortR($arr,$p[<span class="number">1</span>],$r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//三路快速排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partation3</span><span class="params">(array &amp;$arr,$l,$r)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//当数组近乎有序的状态下 如果只是取第一个元素的话 很有可能退化成O(n*n)级别的算法，所以这里要随机去一个数组来和头数组进行替换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $rand =random_int(<span class="number">0</span>, $r) % ($r - $l + <span class="number">1</span>) + $l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $tmp = $arr[$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$l]=$arr[$rand];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$rand]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//将第一个元素作为v的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $v = $arr[$l];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $lt = $l; <span class="comment">//在arr[l+1......lt]小于V</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $i = $l+<span class="number">1</span>;<span class="comment">//arr[lt+1.....$i) == V</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $gt = $r+<span class="number">1</span>; <span class="comment">// arr[gt......r] 大于 V</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>($i&lt;$gt)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($arr[$i]&lt;$v)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $tmp=$arr[$i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$i]=$arr[$lt+<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$lt+<span class="number">1</span>]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $lt++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($arr[$i]&gt;$v)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $tmp=$arr[$i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$i]=$arr[$gt<span class="number">-1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$gt<span class="number">-1</span>]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $gt--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$l]=$arr[$lt];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr[$lt]=$v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> [$lt<span class="number">-1</span>,$gt];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库的范式和反范式</title>
    <url>/2020/03/07/65-mysql%E8%8C%83%E5%BC%8F%E5%92%8C%E5%8F%8D%E8%8C%83%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;数据库的范式是数据库设计中必须掌握的知识，没有对范式的理解，就无法设计出高效率优雅的数据库，但是有时由于业务的需求我们也需要进行反范式。</p>
<a id="more"></a>
<h4 id="数据库的范式和反范式"><a href="#数据库的范式和反范式" class="headerlink" title="数据库的范式和反范式"></a>数据库的范式和反范式</h4><p>在学习数据库的范式之前，首先我们要<strong>明确</strong>几个<strong>名词</strong>。</p>
<ol>
<li><strong>关系：</strong>一个关系对应通常所说的一张表。</li>
<li><strong>元组：</strong>表中的一行即为一个元组。</li>
<li><strong>属性：</strong>表中的一列即为一个属性；每个属性都有一个名称称为属性名。</li>
<li><strong>候选码：</strong>表中的某个属性组，它可以唯一确定一个元组。</li>
<li><strong>主码：</strong>一个关系有多个候选码，确定其中一个为主码。</li>
<li><strong>域：</strong>属性的范围。</li>
<li><strong>分量：</strong>元组中的一个属性值。</li>
</ol>
<p><strong>数据冗余：</strong>相同的数据在多个地方存在，或者说表中的某个列可以由其它的列计算得到，这样就说表中存在着数据的冗余。</p>
<h5 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h5><p>定义：数据库表中的所有字段都是单一属性，不可再分的。这个单一属性是由基本的数据类型所构成的，如整数，浮点数，字符串，等；</p>
<p>换句话说：第一范式要求数据库中的表都是二维表</p>
<p><img src="http://xy.liruoning.cn/images/65-mysql-1.png" alt=""></p>
<p>如上图所示：显然第一张表是符合第一范式的也就是我们平常所设计的表。</p>
<p><strong>第二范式</strong></p>
<p>定义：数据库的表中<strong>不存在非关键字段</strong>对<strong>任意候选字段</strong>的<strong>部分函数依赖</strong>（部分函数依赖是指存在着<strong>组合关键字</strong>中的<strong>某一关键字</strong>决定<strong>非关键字</strong>的情况）</p>
<p>接下来以商品表为例：</p>
<p><img src="http://xy.liruoning.cn/images/65-mysql-2.png" alt=""></p>
<p>在上表中每一行的信息是通过（商品名称、供应商名称）这两个字段来决定的，单有商品名称或者单有供应商名是不可以唯一确定这一行的信息。在上表中我们可以看到</p>
<p>（商品名称）-&gt;(价格，描述，重量，商品的有效期)</p>
<p>（供应商的名称）-&gt;(供应商的电话)</p>
<p>所以对于上面的<strong>商品名称</strong>和<strong>供应商名称</strong>是一组组合关键字。又有<strong>某个属性</strong>对<strong>组合中的某个关键字</strong>存在依赖这就是部分函数依赖。</p>
<p><strong>下面我们看不符合第二范式的表存在着哪些问题</strong></p>
<ol>
<li><strong>插入异常</strong>：如上表所示如果<strong>饮料一厂</strong>不提供供应商的电话这些信息，那么这些信息也就处于缺失状态，然后便出现了插入异常。</li>
<li><strong>删除异常：</strong>在上边表中<strong>饮料一厂</strong>只提供了可乐的商品如果我们把可乐的商品都删除之后，我们也就不会找到<strong>饮料一厂</strong>的其它的信息因此存在删除异常</li>
<li><strong>更新异常：</strong>在上表中<strong>饮料一厂</strong>只是提供了<strong>可乐</strong>这种商品，如果饮料异常提供了其它的商品如芬达、七喜这时候我们想要更新可乐商品的供应商的电话是必要更新全部饮料一场的电话所以我们说存在更新异常。</li>
<li><strong>数据冗余</strong>：如上表所示供应商的电话存在多重的重复势必会造成数据的冗余。</li>
</ol>
<ul>
<li><p>怎么来解决这些不符合第二范式的表呢？</p>
<p>如下图所示我们可以将这两张表进行拆分。在建立一个关联表就达到解决的目的了。</p>
<p><img src="http://xy.liruoning.cn/images/65-mysql-3.png" alt=""></p>
</li>
</ul>
<h5 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h5><p>第三范式是在第二范式的基础上边定义的，如果数据表中<strong>不存在非关键字段</strong>对<strong>任意候选关键字段</strong>的<strong>传递函数依赖</strong>符合第三范式。</p>
<p><img src="http://xy.liruoning.cn/images/65-mysql-4.png" alt=""></p>
<p>首先<strong>商品名称</strong>它决定了这个商品在哪一个<strong>分类</strong>里而分类又决定了<strong>分类的描述</strong>。</p>
<p>（商品名称）-&gt;(分类)-&gt;（分类描述）</p>
<p>也就是说存在分关键字段 “分类描述” 对关键字段商品名称存在传递函数依赖。</p>
<p><strong>存在问题：</strong></p>
<ol>
<li><strong>数据冗余</strong>（分类、分类描述）对于每一个商品都会进行记录进而存在着<strong>数据的冗余</strong>。</li>
<li><strong>插入异常</strong>如果在这个表中如果<strong>酒水饮料</strong>这个分类下面没有任何的商品，我们也就不能给用户展示这个分类下的任何信息，这时就存在着<strong>插入的异常</strong>。</li>
<li><strong>更新异常</strong>，如果我们想要更新可乐这一件商品的描述的话，需要更新同一分类下所有分类的描述。</li>
<li><strong>删除异常</strong>，如果我们删掉了<strong>酒水饮料</strong>下的所有商品那么相应的酒水饮料的信息我们也看不到了。</li>
</ol>
<p><strong>那么如何解决呢？</strong></p>
<p>如下图所示进行表的拆分</p>
<p><img src="http://xy.liruoning.cn/images/65-mysql-5.png" alt=""></p>
<h5 id="BC范式"><a href="#BC范式" class="headerlink" title="BC范式"></a>BC范式</h5><p>在第三范式的基础之上，数据库表中如果<strong>不存在任何字段</strong>对<strong>任一候选关键字的传递函数依赖</strong>则符合BC范式。也就是说如果是复合关键字，则复合关键字之间也不能存在函数依赖。</p>
<p>如下表所示来举例：</p>
<p><img src="http://xy.liruoning.cn/images/65-mysql-6.png" alt=""></p>
<p>在这里我们假定：<strong>供应商联系人</strong>只能<strong>受雇于一家供应商</strong>，每家供应商可以提供多个商品。</p>
<p>由表我们可以看出：</p>
<p>(供应商，商品ID)-&gt;(联系人，商品数量)</p>
<p>（联系人，商品ID）-&gt;(供应商，商品数量)</p>
<p>存在下列的关系因此不符合BCNF要求：</p>
<p>（供应商）-&gt;(供应商的联系人)</p>
<p>(供应商的联系人)-&gt;(供应商)</p>
<p>如下图所示，将表进行拆分便不会出现上述的问题，同样也就符合了BC范式</p>
<p><img src="http://xy.liruoning.cn/images/65-mysql-7.png" alt=""></p>
<h4 id="反范式"><a href="#反范式" class="headerlink" title="反范式"></a>反范式</h4><p>&emsp;&emsp;适当的增加数据库的数据冗余，来降低数据库的I/O提高性能。</p>
<p>如下图所示</p>
<p><img src="http://xy.liruoning.cn/images/65-mysql-8.png" alt=""></p>
<p>我们可以将分类名称添加到商品信息的表中，但是我们依然保留分类信息表。来避免插入异常。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>因上课安装的软件繁琐，安装虚拟机（win10）来探索</title>
    <url>/2020/03/05/45-window%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h4 id="事因"><a href="#事因" class="headerlink" title="事因"></a>事因</h4><p>&emsp;&emsp;最近在上网络编程和Mobile Application Development课程，需要安装 Visual Studio 类的软件开始在相关的网站下载执行程序，运行选择要用的负载工具，安装成功后，建立了第一个Android App(C#)文件可是在运行的时候，死活就是报错缺少SDK，找了很多办法,卸载重装也不能解决。看了一下网上的资料也找到了SDK文件，路径也正确，反正就是报错，一气之下，打算下一个window虚拟机打算在里面进行操作，非要解决这个问题，下面将记录下载的过程。希望对你有帮助。</p>
<a id="more"></a>
<h4 id="下载Windows10镜像文件"><a href="#下载Windows10镜像文件" class="headerlink" title="下载Windows10镜像文件"></a>下载Windows10镜像文件</h4><p>&emsp;&emsp;有一个MSDN网站里面有许多工具找到对应的工具下载就可以还挺方便。具体看下图。</p>
<img src="http://xy.liruoning.cn/images/45-windows-1.png" style="zoom:30%;" />

<p>在这里我用的工具是VMware ,对了我这里window的版本选的是教育版，你们也可以选择专业版，我是随便选的因为我只跑个软件就可以了。下面就是创建虚拟机了。</p>
<h4 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h4><p>1、创建虚拟机、选择镜像文件、点击下一步。</p>
<img src="http://xy.liruoning.cn/images/45-windows-2.png" style="zoom:50%;" />

<p>2、输入密钥、自己的用户名、密码。</p>
<img src="http://xy.liruoning.cn/images/45-windows-3.png" style="zoom:50%;" />

<p>3、选择虚拟机安装的路径（建议安装在一个固定的路径，不太建议安装在C盘）</p>
<img src="http://xy.liruoning.cn/images/45-windows-4.png" style="zoom:50%;" />

<p>4、选择磁盘的大小（根据自己的需求来，Windows系统大概需要10G左右的内存，我建议给20GWindow系统因为后期还要升级，然后再估摸着自己的要跑的程序需要多大内存，进行一下分配就可以，我这里给了70G。但是我的截图是81G因为开始我认为反正我又1T的固态，就想分的大一点然后想想用不了那么多，就减少到了70G）如图：</p>
<img src="http://xy.liruoning.cn/images/45-windows-5.png" style="zoom:60%;" />

<p>5、分配内存空间，这里的话最好不要超过自己的内存空间，超过了可能会发生内存交换，带来不必要的麻烦。我的本机运行内存是16G,然分配了两个内存给虚拟机,在这里以自己的情况而定。</p>
<img src="http://xy.liruoning.cn/images/45-windows-6.png" style="zoom:60%;" />

<p>6、然后点击完成并安装，等待就可以了，看到这个界面你就完成了基本的安装。你可以在个性化中把我的电脑调出来更方便一点。</p>
<img src="http://xy.liruoning.cn/images/45-windows-7.png" style="zoom:40%;" />

<h4 id="在虚拟机中安装Visual-Studio-2017"><a href="#在虚拟机中安装Visual-Studio-2017" class="headerlink" title="在虚拟机中安装Visual Studio 2017"></a>在虚拟机中安装Visual Studio 2017</h4><p>1、首先去这个连接下载<a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes</a> 2017版的Visual Studio这里我为什么不下载2019呢，因为老师的要求，而且老师用的2017这样学起来更方便。下载之后及那个执行软件传输到虚拟机。然后双击。</p>
<p><img src="http://xy.liruoning.cn/images/45-windows-8.png" alt=""></p>
<p>2、然后接入工作负载选择界面，看你需要那些工作负载就用给那些点上对勾就可以。然后点击下载就可以。(在这里我引用了老师的截图开始我忘记截了，但是都一样的)</p>
<p><img src="http://xy.liruoning.cn/images/45-windows-9.png" alt=""></p>
<p>3、等待安装，安装完成选择主题启动撸代码。</p>
<img src="http://xy.liruoning.cn/images/45-windows-10.png" style="zoom:50%;" />

<img src="http://xy.liruoning.cn/images/45-windows-11.png" style="zoom:50%;" />

<h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4><p>&emsp;&emsp;在这里简单介绍了一下windows虚拟机的安装，以及visual Studio 软件的安装，其实虚拟机用处有很多，比如说我这次就是，要进行学习安装比要的开发软件，但是我又怕影响，我的主机电脑所以安装了虚拟机（就算是搞坏重新安装心痛发就好了），再就是，有些软件你打算暂时安装用一下，虚拟机是一个不错的选择。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>网络基础HTTP协议的详解</title>
    <url>/2020/03/01/43-%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80http%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>&emsp;&emsp;在这篇博文之前我已经发表过一次有关http协议的博文，在哪篇博文中主要是对http内容的概述，今天这篇博文主要记录了HTTP是如何建立连接的呀。HTTP的响应头，和请求头参数的含义，以及HTTPS是一种构建在SSL或者TLS上的HTTP协议、对称和非对称加密。</p>
<a id="more"></a>
<h4 id="URI（统一资源标识符）"><a href="#URI（统一资源标识符）" class="headerlink" title="URI（统一资源标识符）"></a>URI（统一资源标识符）</h4><p>URI和URL的区别</p>
<p>①URI 统一资源标识符，在某一规则下能把资源独一无二的标识出来，在这里简单举一个例子，以人为例，在世界上我们人的标识符可以用<strong>身份证号码</strong>来做比喻，因为通过身份证号码可以确定唯一一个人。<br>②URL 统一资源定位符，这里还以人为例动物住址协议://地球/中国/浙江省/杭州市/西湖区/某大学/14号宿舍楼/525号寝/张三.人 可以看到，我们通过描述一个人的位置，也定位到了张三这个人。所以URL是URI的一个子集。</p>
<p>URL 是以描述人的位置来唯一确定一个人的。在上文我们用身份证号也可以唯一确定一个人。对于这个在杭州的张三，我们也可以用：身份证号：<a href="tel:123456789" target="_blank" rel="noopener">123456789</a>来标识他。<br>所以不论是用定位的方式还是用编号的方式，我们都可以唯一确定一个人，都是URl的一种实现，而URL就是用定位的方式实现的URI</p>
<blockquote>
<p>参考链接：<br>作者：daixinye<br>链接：<a href="https://www.zhihu.com/question/21950864/answer/154309494" target="_blank" rel="noopener">https://www.zhihu.com/question/21950864/answer/154309494</a></p>
</blockquote>
<p>下面是URL的格式，对于每一部分添加了讲解。</p>
<p><code>http://easy:good@ftqq.com:80/videolist.php?type=selected#network</code></p>
<p><code>http://</code> (scheme)协议的标识，如http、ftp、file、mailto(后面直接<code>:</code>不需要双斜杠的)</p>
<p><code>easy:good</code> (user:password)用户名和密码：可选项</p>
<p><code>ftqq.com</code> (host): 主机资源所在的服务器，域名或者IP都可以</p>
<p><code>80</code> (port) 服务器正在监听的网络端口</p>
<p><code>videolist.php</code> (path)资源路径，资源在服务器中的位置 </p>
<p><code>type=selectes</code> (query) 查询参数，GET请求就用它传参</p>
<p><code>#network</code> (fragment) 锚点，一般用于页面中的段 。如果加上了这个锚点，他不但可以定位到相应的段，也可以定位到锚点相应的位置。</p>
<h4 id="HTTP超文本传输协议"><a href="#HTTP超文本传输协议" class="headerlink" title="HTTP超文本传输协议"></a>HTTP超文本传输协议</h4><h5 id="HTTP指定资源的方式"><a href="#HTTP指定资源的方式" class="headerlink" title="HTTP指定资源的方式"></a>HTTP指定资源的方式</h5><p>①在地址中指定 <code>https://www.lrnjy.club/123.html</code> 就属于在地址中指定资源</p>
<p>②在请求数据中指定资源 <code>https://www.lrmjy.club?page=1</code> 属于使用请求数据指定资源</p>
<h5 id="HTTP请求报文和应答报文"><a href="#HTTP请求报文和应答报文" class="headerlink" title="HTTP请求报文和应答报文"></a>HTTP请求报文和应答报文</h5><p><img src="http://xy.liruoning.cn/images/43-http-1.png" alt=""></p>
<p><strong>请求和应答报文的实例</strong></p>
<p><img src="http://xy.liruoning.cn/images/43-http-2.png" alt=""></p>
<h5 id="HTTP协议的三大特征"><a href="#HTTP协议的三大特征" class="headerlink" title="HTTP协议的三大特征"></a>HTTP协议的三大特征</h5><p><strong>持久连接 keep-alive</strong></p>
<p>&emsp;&emsp;在早期的http中，一次http的连接完成后就会断开连接，下一次再重新连接，在那时请求资源的数据并不多，在大多情况下也不会造成大问题。但是随着HTTP的普及，请求的资源越来越庞大，一个HTML文档要包含多个CSS、JS文件甚至有图片和视频资源。如果还按照老式的http请求方式，将会造成巨大的网络通信开销。</p>
<p>&emsp;&emsp;为了解决上面的问题，提出了持久连接，只要通信的两端的任意一端，没有明确提出断开，那么http就请求便一直保持连接状态，以便于下一次通信复用该连接，进而避免了重复连接带来的开销，加速了页面的呈现。</p>
<p><img src="http://xy.liruoning.cn/images/43-http-3.png" alt=""></p>
<p><strong>管道化</strong></p>
<p>&emsp;&emsp;管大化是建立在持久连接上的进一步性能的优化。过去,要按照先进先出的顺序，也就是发送完请求，要等待并接受的到响应，才能再继续下一个请求。启用管道化之后，就会将队列顺序迁移到服务器，这样就能同时发送多个请求，然后服务器再按照顺序一个一个的响应。</p>
<p>&emsp;&emsp;在HTTP请求管道话的的过程中，就好比超市的收银台一样，在发送请求过程中不需要等待服务器对前一个请求的响应完成后在发送下一个请求。只不过在客户端接收响应的时候，要按照发送请求的顺序来接收响应，如果前一个请求非常的磨蹭，那么后面的请求也会受到影响（就和超市排队结算一样如果前面的人很磨蹭这样也就会影响后面排队的人，所以在每次排队的时候你不知道是顾客磨蹭还是收银员磨蹭，最后就会产生<strong>队首阻塞的想象</strong>）。当然，你也可以再选好队伍的时候选一个最快的队伍，或者另外开辟一个队，一旦选好队伍就不能更换队伍了，如果另起队伍，就会出现资源的耗费和性能的损失，这种另起新队伍的方式只在新队伍 数量很少的情况下有作用，因此它并不具备可扩展性。</p>
<blockquote>
<p>参考链接：<a href="https://blog.csdn.net/qq_28885149/article/details/52922107" target="_blank" rel="noopener">https://blog.csdn.net/qq_28885149/article/details/52922107</a></p>
</blockquote>
<p>&emsp;&emsp;而对于<strong>队首阻塞问题</strong>，在HTTP2.0不但队首阻塞问题得到了解决，还将TCP建立连接的次数降至到了一次，通讯的两端将消息分解为独立的帧，然后多条数据流乱序发送，最后在接收数据端把帧重新组合成消息，并且各条的消息组合互不干扰，这就实现了真正意义上的并行通信，达到了多路复用的效果。</p>
<p><strong>无状态</strong></p>
<p>&emsp;&emsp;HTTP协议是一种无状态的协议，每一个请求和响应是一一对应的，不会出现多个请求复用一个响应，即使在同一个连接之间也没有。</p>
<h5 id="http内容协商"><a href="#http内容协商" class="headerlink" title="http内容协商"></a>http内容协商</h5><p>&emsp;&emsp;以Accept开头的都是进行内容协商的，比如在请求头里面<code>Accept-Encoding:gzip</code>,<code>Accept-Language:zh-CN</code> ,<code>Accept-Charset:UTF-8</code> 这些内容时，是和服务器进行协商，客户端最希望要UTF-8字符集的中文文档，最好用Gzip来压缩。如果服务器端有这些资料就会准备相应的内容<code>Content-Encoding:gzip</code>，<code>Content-Language:zh-CN</code>,<code>Content-Charset:UTF-8</code> </p>
<p>如图：</p>
<p><img src="http://xy.liruoning.cn/images/43-http-5.png" alt=""></p>
<h5 id="部分内容的获取"><a href="#部分内容的获取" class="headerlink" title="部分内容的获取"></a>部分内容的获取</h5><p>&emsp;&emsp;有的时候服务器不需要获取全部的内容，通过<code>GET/a.png Rang:bytes=1001-2000</code> 这时候服务器知道你需要<code>a.png</code> 的1001-2000的资源，这时候服务器就会返回 <code>HTTP/1.1 206 Partial Content</code> 206的状态码 并说明返回了部分的数据以及<code>Content-Length:1000</code> <code>Content-Range:bytes1001-2000/2000</code>。 </p>
<p>如图：</p>
<p><img src="http://xy.liruoning.cn/images/43-http-4.png" alt=""></p>
<h5 id="按条件获取内容"><a href="#按条件获取内容" class="headerlink" title="按条件获取内容"></a>按条件获取内容</h5><p>&emsp;&emsp;当客户端向服务端获取一个带条件的请求时，如果不符合条件则返回修改后的页面信息，并带上修改的时间，如果没有修改直接返回304 Not Modified。</p>
<p>如图：</p>
<p><img src="http://xy.liruoning.cn/images/43-http-6.png" alt=""></p>
<h5 id="Basic认证"><a href="#Basic认证" class="headerlink" title="Basic认证"></a>Basic认证</h5><p>&emsp;&emsp;一般的话我们的cookie客户端是可以进行编码伪造的，即使是Client2也可以伪造Clinet1的cookie进行登录，所以一般的cookie用在对安全性没有那么高要求的，对于无关紧要的偏好上边。所以我们提供了一种认证机制Basic认证，如果用户请求的页面刚好时要进行认证的服务端会返回401的状态码，告诉客户端这个页面需要认证，认证的方式时Basic同时以realm告知认证的范围。同时客户端会回复一个以Base64 编码的<code>username：password</code>的信息来进行验证 authorization的头。</p>
<p>如图：</p>
<p><img src="http://xy.liruoning.cn/images/43-http-7.png" alt=""></p>
<h4 id="HTTPS协议以及加密"><a href="#HTTPS协议以及加密" class="headerlink" title="HTTPS协议以及加密"></a>HTTPS协议以及加密</h4><p>&emsp;&emsp;由于现在的网络越来越发达，个人的信息安全也被我们所重视，由于http的传输是在网络中进行明文传输的这样就有可能，让不法分子窃取我们的信息，所以就产生了https（Secure），安全的HTTP协议，进而为网络通信提供来源认证、数据加密和报文完整性检测，以保证通信的保密性和可靠性。</p>
<p>&emsp;&emsp;之所以说HTTP协议不安全其中是有以下三个原因导致的。</p>
<ol>
<li>数据以明文的形式传输，有被窃听的风险。</li>
<li>接收时的报文无法证明时发送的报文，有可能在网络中已经被篡改，不能保证请求的数据的完整性。</li>
<li>不能验证通信双方的身份，可能是一个伪造的请求<h5 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h5>&emsp;&emsp;在密码学中，加密就是将明文转换成难以理解的密文；解密与之相反将密文转换成明文。加密和解密由两部分组成：算法和密钥。加密算法可以分为两类：对称加密和非对称加密。</li>
</ol>
<p><strong>对称加密</strong><br>&emsp;&emsp; 对称加密是在加密和解密的过程使用同一个密钥，对称加密的优点就是速度快，但缺点也是可想而知在因为密钥是共享的在客户端和服务端进行会话之前，要先将对称密钥发给对方，在密钥传输过程中有被窃听的风险，当密钥被窃听，那么密钥很容易被轻松翻译成明文，加密保护形同虚设（就是和没有加密效果一样）。</p>
<p><img src="http://xy.liruoning.cn/images/43-http-8.png" alt=""></p>
<p><strong>非对称加密</strong></p>
<p>&emsp;&emsp; 非对称加密在加密过程中使用公钥，在加密过程中使用私钥。也就是说加密和解密并不是同一把钥匙，但是是同<strong>一组</strong>钥匙。在加密和解密过程中，解密方将自己的公钥发送给加密方，在加密方将数据使用公钥加密完成之后，在响应给解密方，解密方使用私钥进行解密。在这个过程中即使公钥被泄露了，数据也不能用公钥进行解密所以数据传输过去之后拥有私钥的一方才可以进行解密，这样就不怕在传输中密钥被窃取了。</p>
<p><img src="http://xy.liruoning.cn/images/43-http-9.png" alt=""></p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP实现三个O(n*n)级别的排序算法（选择排序、冒泡排序、插入排序）</title>
    <url>/2020/02/27/14-php%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;今天将三个O(n*n)级别的排序算法进行了整理，对于这三个算法，也收集了如何进行优化，具体优化的步骤也是用代码实现了。在学习这三种排序算法的实现思想还是挺有意义的。在这其中也用到了二分查找法，我在以前的blog中也有提到，如果不是很熟悉的可以去参考一下。如果有什么想法也可以下方留言，我们一起讨论学习。</p>
<a id="more"></a>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>​       选择排序是一种简单直观的排序算法，它的基本原理：对于<strong>给定的一组记录</strong>，经过<strong>第一轮</strong>的<strong>比较</strong>找到<strong>最小值</strong>，然后将<strong>该记录</strong>与<strong>第一个记录交换位置</strong>；接着对不包括第一个以外的进行<strong>第二轮比较</strong>，得到<strong>最小值</strong>并于<strong>第二个记录交换位置</strong>，<strong>重复</strong>该过程。</p>
<p>以数组：array(38，65，97，76，52，54，65)为例</p>
<p>第一趟排序后: 38 [65,97,76,52,54,63]</p>
<p>第二趟排序后: 38 52 [65,97,76,54,63]</p>
<p>第三趟排序后: 38 52 54 [65,97,76,63]</p>
<p>第四趟排序后: 38 52 54 63 [65,97,76]</p>
<p>第五趟排序后: 38 52 54 63 65 [97,76]</p>
<p>第六趟排序后: 38 52 54 63 65 76 [97]</p>
<p>最后一趟排序后：38 52 54 63 65 76 97</p>
<p>代码实现如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">"randSort.php"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//获得随机数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$arr=randSort(<span class="number">1</span>,<span class="number">60</span>,<span class="number">8</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span><span class="params">($arr)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($arr)<span class="number">-1</span>;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="comment">//先假设最小的位置为$i</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">         $m=$i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="comment">//这个for循环是比较i后面的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">for</span>($j=$m+<span class="number">1</span>;$j&lt;count($arr);$j++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             <span class="keyword">if</span>($arr[$m]&gt;$arr[$j])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 $m=$j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="comment">//如果发现最小值与当前$i的位置不同，则位置互换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">if</span>($m!=$i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             $tmp = $arr[$i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">             $arr[$i] = $arr[$m];</span></pre></td></tr><tr><td class="code"><pre><span class="line">             $arr[$m] = $tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$arr=selectionSort($arr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($arr);</span></pre></td></tr></table></figure>

<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>顾名思义，冒泡排序就是元素像冒泡一样往上升。冒泡排序实现的思路（设从小到到大排序）：给定一组个数为<code>n</code>数据从第一个元素开始和相邻的元素进行比较，当前面的元素大于后面的元素时，交换位置，这样一轮下来，第n个元素为对大值，在进行前（n-1）记录进行比较。</p>
<p><strong>例：</strong></p>
<p>初始状态：[36,25,48,12,25,65,43,57]</p>
<p>1趟排序：[25,36,12,25,48,43,57] 65</p>
<p>2趟排序：[25,12,25,36,43,48] 57 65</p>
<p>3趟排序：[12,25,25,36,43] 48 57 65</p>
<p>4趟排序：[12,25,25,36] 43 48 57 65</p>
<p>5趟排序：[12,25,25] 36 43 48 57 65</p>
<p>6趟排序：[12,25] 25 36 43  48 57 65</p>
<p>7趟排序：[12] 25 25 36 43] 48 57 65</p>
<p>代码的实现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span><span class="params">($arr)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($arr);$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;(count($arr)-$i<span class="number">-1</span>);$j++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>($arr[$j]&gt;$arr[$j+<span class="number">1</span>])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $tmp=$arr[$j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $arr[$j]=$arr[$j+<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $arr[$j+<span class="number">1</span>]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在传统的冒泡排序算法上，进行进一步优化，我们设置一个$bool标志，每次循环最后交换的位置值赋给$bool,因为每次循环中bool(最后一次交换位置)的后面元素已经交换到位，所以只需要排序bool前面的数据就好了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble2</span><span class="params">($arr)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $i=count($arr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ($i&gt;<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $bool=$i;          <span class="comment">//设置一个标记 记录每次交换位置的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> ($j=<span class="number">0</span>;$j&lt;$i<span class="number">-1</span>;$j++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>($arr[$j]&gt;$arr[$j+<span class="number">1</span>])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $tmp = $arr[$j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $arr[$j]=$arr[$j+<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $arr[$j+<span class="number">1</span>]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $bool=$j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $i=$bool;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>对于上面的冒泡排序，只是进行正向或负向的排序，所以我们可以考虑每一次从正向和负向分别排序，一次找到最大值和最小值，使排序的趟数减少一半。改进后的冒泡排序：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble3</span><span class="params">($array)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $left=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $right=count($array);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> ($right&gt;$left)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> ($i=$left;$i&lt;$right<span class="number">-1</span>;$i++)&#123;   <span class="comment">//正向冒泡找到最大值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>($array[$i]&gt;$array[$i+<span class="number">1</span>])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $tmp = $array[$i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $array[$i]=$array[$i+<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $array[$i+<span class="number">1</span>]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $right--;                        <span class="comment">//right的值向左移一位</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> ($j=$right;$j&gt;$left;$j--)&#123;   <span class="comment">//负向冒泡找到最小值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>($array[$j]&lt;$array[$j<span class="number">-1</span>])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $tmp=$array[$j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $array[$j]=$array[$j<span class="number">-1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $array[$j<span class="number">-1</span>]=$tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $left++;                        <span class="comment">//left的值向右移一位</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $array;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序的基本思路：对于给定的一组数据，假设第一个是有序的，后面的为无序序列，从第二个记录开始，按照记录的大小依次将当前处理的记录插入到前面的有序序列中，直到最后一个插入为止。</p>
<p>实现的具体步骤：</p>
<p>初始状态：(38,65,97,76,13,27,49)</p>
<p>第一趟：[38] 65 97 76 13 27 49</p>
<p>第二趟：[38 65] 97 76 13 27 49</p>
<p>第三趟：[38 65 97] 76 13 27 49</p>
<p>第四趟：[38 65 76 97] 13 27 49</p>
<p>第五趟：[13 38 65 76 97] 27 49</p>
<p>第六趟:  [13 27 38 65 76 97]  49</p>
<p>第七趟:  [13 27 38 49 65 76 97]</p>
<p>代码的实现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span><span class="params">($arr)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> ($i=<span class="number">1</span>;$i&lt;count($arr);$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $e=$arr[$i];              <span class="comment">//存储当前要插入的值副本</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//寻找 arr[$i] 元素要插入的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>($j=$i;$j&gt;<span class="number">0</span>;$j--)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>($e&lt;$arr[$j<span class="number">-1</span>])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $arr[$j]=$arr[$j<span class="number">-1</span>]; </span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $arr[$j]=$e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>对传统的插入排序算法进行改进，在查找要插入的位置的时候，我们可以引入二分查找法来提高查询效率。具体<a href="https://lrnjy.club/2020/02/22/二分查找法/#more" target="_blank" rel="noopener">二分查找</a>的实现 我的前面blog也有解释希望对你有帮助。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort2</span><span class="params">($arr)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;count($arr);$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $e = $arr[$i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $left = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $right = $i<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//查找[$left,$right]之间的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> ($left&lt;=$right)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $mid = intval(($left+($right-$left)/<span class="number">2</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> ($arr[$mid]&lt;$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $left = $mid+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> ($e&lt;$arr[$mid])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $right=$mid<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//查找出第 $left位置元素为要插入元素的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>($j=$i<span class="number">-1</span>;$j&gt;=$left;$j--)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[$j+<span class="number">1</span>]=$arr[$j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $arr[$left]=$e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>传输层的TCP&amp;UDP协议详解</title>
    <url>/2020/02/26/41-tcpUdp/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;由于以前学习TCP,UDP协议没有做过很好的整理笔记也有大部分忘记了所以今天也算复习整理一下，传输层UDP协议以及UDP协议的特点,TCP是什么、TCP的特点、TCP的首部、停止等待协议、连续的ARQ协议，经典的TCP协议的建立（三次握手），TCP协议的释放（四次挥手）。</p>
<a id="more"></a>
<h4 id="UDP协议详解"><a href="#UDP协议详解" class="headerlink" title="UDP协议详解"></a>UDP协议详解</h4><p>UDP(User Datagram Protocol:用户数据报协议)：是面向<strong>无连接</strong>的<strong>不可靠</strong>的传输协议，UDP协议是面向数据报的它会直接将应用层的数据直接打包成数据报直接传输。UDP<strong>没有拥塞控制</strong>、<strong>首部开销小</strong>。</p>
<p><strong>UDP的首部</strong></p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-1.png" alt=""></p>
<h4 id="TCP协议详解"><a href="#TCP协议详解" class="headerlink" title="TCP协议详解"></a>TCP协议详解</h4><p>TCP(Transmission Control Protocol:传输控制协议)：面向<strong>连接的</strong>，<strong>点对点的</strong>，提供<strong>可靠的</strong>传输服务，TCP协议提供<strong>全双工</strong>（通信双方可以同时传输数据）的通信协议，TCP是面向<strong>字节流</strong>的协议因此TCP协议也可能对用户的数据进行分块也可能进行合并，可以更好的对用户的数据进行传输。</p>
<p><strong>TCP的头部信息</strong></p>
<p>相比TCP的头部信息要比UDP的头部信息丰富的多。</p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-2.png" alt=""></p>
<p>下面我将对TCP的头部信息进行一个简单的介绍</p>
<ol>
<li>序号：①占32位范围是0-2的32次方-1②数据的首字节序号</li>
</ol>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-3.png" alt=""></p>
<ol start="2">
<li><p>确认号：①占32位范围是0-2的32次方-1②期望收到的首字节序号</p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-4.png" alt=""></p>
<p>如图所示：如果首字节的数据为501，传输的数据为100。则渴望收到的确认号为601</p>
</li>
<li><p>数据偏移：①真是的数据偏离首部的位置</p>
</li>
<li><p>TCP的标记位：每一位都有不同的意义。</p>
</li>
</ol>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-5.png" alt=""></p>
<ol start="5">
<li>窗口： 窗口指明允许对方发送的数据量（最大的数据量）</li>
<li>紧急指针：当URG=1的时候，指定紧急数据在报文中的位置。</li>
<li>TCP选项：支持未来对数据的扩展。</li>
</ol>
<h4 id="可靠传输的基本原理"><a href="#可靠传输的基本原理" class="headerlink" title="可靠传输的基本原理"></a>可靠传输的基本原理</h4><h5 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h5><p>下面将计算机分为发送方和接收方，如下图所示，当发送方发送完消息要等接收方确认之后才会发送第二个消息。</p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-6.png" alt=""></p>
<p><strong>超时重传的情况</strong></p>
<p>发送方再给接收方发送信息的时候数据丢失。</p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-8.png" alt=""></p>
<p>接收方发送确认消息的时候数据丢失。</p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-9.png" alt=""></p>
<p>确认消息很久才到达</p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-10.png" alt=""><strong>停止等待协议</strong></p>
<p>停止等待协议，每发送一个消息都需要一个定时器</p>
<p>停止等待协议，是最简单的可靠传输协议</p>
<p>停止等待协议，对<strong>信道的利用效率</strong>不高</p>
<h5 id="连续的ARQ协议"><a href="#连续的ARQ协议" class="headerlink" title="连续的ARQ协议"></a>连续的ARQ协议</h5><p>&emsp; &emsp; 接收方一般都是采用累积确认的方式。也就是说接收方不必对收到的分组逐个发送确认。而是在收到几个分组后，对按序到达的最后一个分组发送确认。如果收到了这个分组确认信息，则表示到这个分组为止的所有分组都已经正确接收到了。 累积确认的优点是容易实现，即使确认丢失也不必重传。但缺点是，不能正确的向发送方反映出接收方已经正确收到的所有分组的信息。比如发送方发送了前5个分组，而中间的第3个分组丢失了，这时候接收方只能对前2个发出确认。而不知道后面3个分组的下落，因此只能把后面的3个分组都重传一次，这种机制叫Go-back-N（回退N），表示需要再退回来重传已发送过的N个分组。</p>
<p><strong>滑动窗口</strong></p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-11.png" alt=""></p>
<p><strong>累积确认</strong></p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-12.png" alt=""></p>
<h4 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h4><ul>
<li>流量控制指让发送方发送速率不要太快</li>
<li>流量控制是使用滑动窗口来实现的</li>
</ul>
<p>例：</p>
<p>从上到下是它们交互的一个时间轴。</p>
<p>当rwnd窗口为0的时候，接收方会马上对数据进行处理并交到应用层进行数据的处理。</p>
<p>一段时间之后接收方又可以接收消息了，这个时候接收方会往发送方发送一条消息，告诉发送方我当前的窗口为1000可以接收1000个字节的数据了。</p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-13.png" alt=""></p>
<p><strong>特殊情况</strong></p>
<p>上面的<strong>例:</strong>当接收方调整窗口的大小，给发送方发送消息的时候中途发生了丢失。就会出现下面的情况。</p>
<p><strong>发送方：</strong> 认为窗口为0，一直等待接收方的窗口调整。</p>
<p><strong>接收方:</strong>   发送了窗口调整的信息一直等待发送方数据的到来。</p>
<p>这时候就出现了<strong>阻塞的</strong>状态</p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-14.png" alt=""></p>
<p>对于上面的局面如何解开呢，这个时候就引入了<strong>坚持定时器</strong></p>
<p><strong>坚持定时器</strong></p>
<ul>
<li>当接收窗口为0的消息，就会启动坚持定时器</li>
<li>坚持定时器每隔一段时间发送一个<strong>窗口探测报文</strong>（询问对方你的窗口有没有增大）</li>
</ul>
<h4 id="TCP协议的拥塞控制"><a href="#TCP协议的拥塞控制" class="headerlink" title="TCP协议的拥塞控制"></a>TCP协议的拥塞控制</h4><ul>
<li>在一条链路中经过非常多的设备</li>
<li>数据链路中的各个部分都有可能成为网络传输的瓶颈</li>
</ul>
<p><strong>流量控制和拥塞控制的区别</strong></p>
<ul>
<li>流量控制考虑点对点的通信量的控制</li>
<li>拥塞控制考虑整个网络，是全局性的考虑</li>
</ul>
<p><strong>慢启动算法</strong></p>
<ul>
<li>由小到大逐渐增加发送数据量</li>
<li>每收到一个报文确认，就加一</li>
</ul>
<p>由此可见慢启动算法是呈指数增长的，当到了慢启动<strong>阈值</strong>进行<strong>拥塞避免算法</strong>。</p>
<p><strong>拥塞避免算法</strong></p>
<ul>
<li>维护一个拥塞窗口的<strong>变量</strong>，这个变量大于慢启动阈值</li>
<li>只要网络不拥塞，就试探着拥塞窗口调大</li>
</ul>
<h4 id="TCP协议的三次握手"><a href="#TCP协议的三次握手" class="headerlink" title="TCP协议的三次握手"></a>TCP协议的三次握手</h4><p><strong>TCP连接建立的过程</strong></p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-15.png" alt=""></p>
<ol>
<li><strong>发送方</strong>向<strong>接收方</strong>主动建立连接 这时 发送SYN=1请求连接的标记 并且同步自己的序列号seq=x</li>
<li><strong>接收方</strong>回应<strong>发送方</strong> SYN=1 连接请求标记，ACK=1 对序列号的确认 ，确认号ack=x+1表示期望收到x+1序列号的值 seq=y 当前自己的序列号</li>
<li><strong>发送方</strong> 对接收方ACK=1 表示确认号是有用的 序列号为 seq=x+1 , ack=y+1确认号表示期望收到y+1的序列号</li>
</ol>
<p>由上图我们可以看出，发送方在第二次握手结束的时候已经处于建立连接的状态，接收方只有在第三次握手结束才会建立连接。</p>
<p><strong>为什么发送方要发出第三个确认报文呢？（为什么TCP连接需要三次握手两次不行）</strong> </p>
<ul>
<li>已经<strong>失效的连接请求报文传</strong>送到对方，引起<strong>错误</strong></li>
</ul>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-16.png" alt=""></p>
<p>对于上面的请求，如果第一次发送的SYN连接请求传输时间过长，发送方在一定时间接收不到接收方回应的信息从新发送了SYN请求这时第一次的SYN请求所执行的功能已经完全被第二次的所代替，如果是两次握手，超时的这次请求接到接收方的回应时也是建立了相同的连接，事实上，这次连接已经废弃了。</p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-17.png" alt=""></p>
<p>如果是三次握手的话，发送方再次发给接收方确认请求这是在建立连接，当第一次的失效请求再次到达发送方的时候，发送方就会忽略掉这次请求并不会进行任何操作。</p>
<p><strong>为什么不是四次握手</strong></p>
<p>如果是四次握手的话，这时候接收方和确认方已经确认了连接的状态如果再有第四次第五次都属徒劳的，可以提高连接的速度与效率。</p>
<h4 id="TCP的四次挥手（TCP连接的释放）"><a href="#TCP的四次挥手（TCP连接的释放）" class="headerlink" title="TCP的四次挥手（TCP连接的释放）"></a>TCP的四次挥手（TCP连接的释放）</h4><p><img src="http://xy.liruoning.cn/images/41-tcp&udp-18.png" alt=""></p>
<ol>
<li>首先我们假设发送方主动断开连接，这时发送方，发送FIN=1释放连接的标志 seq=u 。这时发送方进入第一次的等待状态（FIN-WAIT-1）</li>
<li>接收方 发送 ACK的确认消息表示你的请求我已经收到了，这时候接收方可能还有数据没有传完，发送方进入第二次的等待状态，接收方进入关闭等待状态，这时候因为接收方是被动断开连接的所以可能还有数据未传输完成。</li>
<li>等到接收方将数据传输完毕，会发出一个新的传输报文FIN表示我也可以进行连接释放了，并且这次会携带ACK重复的对第一的报文进行确认。</li>
<li>这时发送方会进行第三次报文的确认，告诉接收方我们一起断开连接吧。这时发送方会进入<strong>等待计时器</strong>的时间确保没有问题进入关闭状态。</li>
</ol>
<h4 id="套接字和套接字编程"><a href="#套接字和套接字编程" class="headerlink" title="套接字和套接字编程"></a>套接字和套接字编程</h4><ul>
<li>使用端口来标记不同的网络进程</li>
<li>端口(Port)使用16比特位表示(0~65535)</li>
</ul>
<p><strong>套接字：</strong> <code>\{IP:Port\}</code></p>
<ul>
<li>套接字(Socket)是抽象概念，表示TCP连接的<strong>一端</strong></li>
<li>通过套接字可以进行数据发送或接收</li>
</ul>
<p>TCP的连接由两个套接字组成</p>
<p><code>TCP=\{Socket1:Socket2\}=\{\{IP:Port\}\{IP:Port\}\}</code></p>
<p><strong>Socket编程</strong></p>
<p><img src="http://xy.liruoning.cn/images/41-tcp&udp-19.png" alt=""></p>
<p>下面是PHP有关Socket编程的小例子</p>
<p><strong>Server</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">server</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//创建Socket</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(($sock = socket_create(AF_INET,SOCK_STREAM,SOL_TCP)) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"socket_create() Why failure is:"</span>.socket_strerror($sock).<span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $host=<span class="string">"127.0.0.1"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $port=<span class="number">6666</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(($ret = socket_bind($sock,$host,$port)) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"socket_bind() Why failure is:"</span>.socket_strerror($ret).<span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(($ret = socket_listen($sock,<span class="number">4</span>)) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"socket_listen() Why failure is:"</span>.socket_strerror($ret).<span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"Server Started, Listen On $host:$port\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $message = <span class="string">"Wolcome to my Server\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $strlen=strlen($message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(($socketMsg=socket_accept($sock))&lt;<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">echo</span> <span class="string">"socket_accept() failed: reason: "</span> . socket_strerror($socketMsg) . <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          socket_write($socketMsg,$message,$strlen);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">echo</span> <span class="string">"向客户端发送的数据$message\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           $read = socket_read($socketMsg,<span class="number">1024</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">echo</span> <span class="string">"客户端回复的数据:$read\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        socket_close($socketMsg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    socket_close($sock);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Client</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Client</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $host=<span class="string">"127.0.0.1"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $port=<span class="number">6666</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $socket=socket_create(AF_INET,SOCK_STREAM,SOL_TCP );</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ($socket &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"socket_create() failed: reason: "</span> . socket_strerror($socket) . <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"try to connect '$host' port: '$port'...\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $result= socket_connect($socket,$host,$port);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ($result &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"socket_connect() failed.\nReason: ($result) "</span> . socket_strerror($result) . <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 连接成功输出提示信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"connect successfully\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 向服务端发送数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        $msg = <span class="string">"I am Client "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        socket_write($socket,$msg , strlen($msg));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 获取服务端数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        $result = socket_read($socket, <span class="number">1024</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"服务器回传数据为："</span>.$result.<span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"close socket...\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        socket_close($socket);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"close ok\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>由浅入深学习并查集（PHP）</title>
    <url>/2020/02/24/59-php%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;在这篇博文中由浅入深的讲述了并查集，在我们的平时实现的代码中并查集的应用也是有许多的的，在连接的操作上用的比较多，我们从一个简单的并查集 到通过统计size的大小来优化，到统计树的高度来优化，以及路径压缩的实现优化，也是获益匪浅。</p>
<a id="more"></a>

<h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><p>&emsp;&emsp; 并查集可以很好的解决连接的问题。<br>对于一组数据来说并查集主要支持两个动作:</p>
<ol>
<li>union(p,q)  将 p q 两个元素合并在一起，也就是连接起来</li>
<li>find(p)        查找 p 元素具体在哪一个组中<br><img src="http://xy.liruoning.cn/images/59-php-1.png" alt=""></li>
</ol>
<p>如图所示 0-9 十个元素  0、2、4、6…. ，1、3、5、7….  如图所示有两个组 0组和1组在0、2、4、6这些偶数是互相连接的  1、3、5、7….这些奇数是互相连接的。下面我们实现一下相关代码。</p>
<h5 id="普通并查集的实现"><a href="#普通并查集的实现" class="headerlink" title="普通并查集的实现"></a>普通并查集的实现</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unionfind</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> $id;     <span class="comment">//id[]组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> $count; <span class="comment">//元素的个数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $n)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">  </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">$this</span>-&gt;count = $n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">$this</span>-&gt;id=[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$n;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">$this</span>-&gt;id=$i;       <span class="comment">//开始的时候每一个元素是一个组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($p)</span></span>&#123;   <span class="comment">//查找p元素的组号</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id[$p];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//p 和 q元素是否相连</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isConnected</span><span class="params">($q,$p)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id[$q]==<span class="keyword">$this</span>-&gt;id[$p];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// p 和 q元素相连</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">union</span><span class="params">($p,$q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      $pID = <span class="keyword">$this</span>-&gt;id[$p];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      $qID =<span class="keyword">$this</span>-&gt;id[$q];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>($pID==$qID)&#123;  <span class="comment">//这两个元素已经在一起了 就不需要 在进行赋值了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="keyword">$this</span>-&gt;count;$i++)&#123;  <span class="comment">//两个元素没有在一起遍历所有元素使之相连</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">if</span>($pID==<span class="keyword">$this</span>-&gt;id[$i])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="keyword">$this</span>-&gt;id[$i]==$qID;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="并查集的优化"><a href="#并查集的优化" class="headerlink" title="并查集的优化"></a>并查集的优化</h5><p>在上面的代码中我们可以看到虽然find()查找操作为O(1)的复杂度比较快，但是union连接的操作确实一个O(n)级别的。</p>
<p>所以在下面我们引出了 parent 指针的概念，parent指针每次都指向其父亲的节点，这样也将会简单的构建出树的模型</p>
<p>如下图所示当我们需要p 节点 和q 节点相连的时候，只需要将其<strong>根</strong>节点连接即可,这时也免去了O(n)复杂度的遍历。</p>
<p><img src="http://xy.liruoning.cn/images/59-php-2.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unionfind2</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> $parent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> $count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $n)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">  </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">$this</span>-&gt;count=$n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">$this</span>-&gt;parent=[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//初始节点的父亲指针指向自己</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$n;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">$this</span>-&gt;parent=$i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> ($q == <span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">while</span>($q!=<span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          $q = <span class="keyword">$this</span>-&gt;parent[$q];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isConnected</span><span class="params">($p,$q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;find($p)==<span class="keyword">$this</span>-&gt;find($q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">union</span><span class="params">($p,$q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;find($p)==<span class="keyword">$this</span>-&gt;find($q))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      $pROOT = <span class="keyword">$this</span>-&gt;find($p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      $qROOT = <span class="keyword">$this</span>-&gt;find($q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">$this</span>-&gt;parent[$qROOT] = $pROOT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="并查集的再次优化"><a href="#并查集的再次优化" class="headerlink" title="并查集的再次优化"></a>并查集的再次优化</h5><p>如下图所示：当我们在进行 4 号节点和9号节点进行合并的时候如果9号节点指向4号节点的根节点，直接让9号节点的parent 指向8号节点就可以。但是如果4号节点合并到9号节点上，这时候就需要从4号节点find() 一层一层的找到根节点在指向9节点，这个过程效率确实低下的。那该如何优化呢？这时候我们就需要size变量来记录这一组中的元素个数，这样在合并的时候，进行一个元素个数的比较，便可避免上面所说的问题。</p>
<p><img src="http://xy.liruoning.cn/images/59-php-3.png" alt=""></p>
<p>代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unionfind2</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> $parent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> $count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> $size; <span class="comment">//当前根节点所在集合的元素个数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $n)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">  </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">$this</span>-&gt;count=$n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">$this</span>-&gt;parent=[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">$this</span>-&gt;size=[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//初始节点的父亲指针指向自己</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$n;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">$this</span>-&gt;parent=$i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">$this</span>-&gt;size=<span class="number">1</span>;    <span class="comment">//开始的元素个数为1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> ($q == <span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">while</span>($q!=<span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          $q = <span class="keyword">$this</span>-&gt;parent[$q];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isConnected</span><span class="params">($p,$q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;find($p)==<span class="keyword">$this</span>-&gt;find($q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">union</span><span class="params">($p,$q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;find($p)==<span class="keyword">$this</span>-&gt;find($q))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      $pROOT = <span class="keyword">$this</span>-&gt;find($p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      $qROOT = <span class="keyword">$this</span>-&gt;find($q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;size[$qROOT]&lt;<span class="keyword">$this</span>-&gt;size[$pROOT])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">$this</span>-&gt;parent[$qROOT] = $pROOT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">$this</span>-&gt;size[$pROOT]+=<span class="keyword">$this</span>-&gt;size[$qROOT];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">$this</span>-&gt;parent[$pROOT] = $qROOT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">$this</span>-&gt;size[$qROOT]+=<span class="keyword">$this</span>-&gt;size[$pROOT];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="并查集的另一种优化"><a href="#并查集的另一种优化" class="headerlink" title="并查集的另一种优化"></a>并查集的另一种优化</h5><p>&emsp;&emsp;在上面我们将并查集的元素个数进行统计从而解决了元素多的向元素少的合并缺陷，但是并不是所有的情况都适用如下图所示：</p>
<p><img src="http://xy.liruoning.cn/images/59-php-4.png" alt=""></p>
<p>在4号节点和2号的根节点进行合并的时候，4号节点对应的根节点为8，2号节点对应的根节点为7.在图中我们可以看到当我们使用上面的代码合并的时候，以7为根节点的元素明显多于以8为根节点的元素，将会发生以8为根节点的元素合并到以7为根节点的元素上，这时候显然树的高度增加了。如果我们将以7为根节点的组指向以8为根节点的组的时，树的高度并没有增加，显然这个结果是我们想要的。显然我们只靠元素的个数是不可以准确的判断一个树的连接的。这时将有一个经典的优化 <code>rank</code>来记录树的高度 rank[i]表示 i 节点所在树的高度。</p>
<p>代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> $parent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> $count;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> $rank; <span class="comment">//当前树的高度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $n)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">$this</span>-&gt;count=$n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">$this</span>-&gt;parent=[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">$this</span>-&gt;rank=[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//初始节点的父亲指针指向自己</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$n;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;parent=$i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;rank=<span class="number">1</span>;    <span class="comment">//开始的元素个数为1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ($q == <span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>($q!=<span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $q = <span class="keyword">$this</span>-&gt;parent[$q];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isConnected</span><span class="params">($p,$q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;find($p)==<span class="keyword">$this</span>-&gt;find($q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">union</span><span class="params">($p,$q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;find($p)==<span class="keyword">$this</span>-&gt;find($q))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $pROOT = <span class="keyword">$this</span>-&gt;find($p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $qROOT = <span class="keyword">$this</span>-&gt;find($q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;rank[$qROOT]&gt;<span class="keyword">$this</span>-&gt;rank[$pROOT])&#123;   <span class="comment">//在这个时候rank的值其实是并没有增加的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;parent[$qROOT] = $pROOT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="keyword">$this</span>-&gt;rank[$qROOT]&lt;<span class="keyword">$this</span>-&gt;rank[$pROOT])&#123; <span class="comment">//这个时候rank的值也是并没有增加的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;parent[$pROOT] = $qROOT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;parent[$qROOT] = $pROOT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;rank[$qROOT]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="最后一种并查集的优化方式（路径压缩）"><a href="#最后一种并查集的优化方式（路径压缩）" class="headerlink" title="最后一种并查集的优化方式（路径压缩）"></a>最后一种并查集的优化方式（路径压缩）</h5><p>&emsp;&emsp; 路径压缩优化，最主要的就是优化的<code>find()</code>操作，在<code>find()</code>的操作中其实就是将以一个节点开始一次通过查找parent的操作进行来最终定位到根节点，在这个过程中其实已经将查找的节点到根节的所有的节点进行了遍历。那有什么办法可以减少路径中的节点呢？这时候我们就需要路径的压缩了。那么如何路径的压缩呢？</p>
<img src="http://xy.liruoning.cn/images/59-php-5.png" style="zoom:50%;" />

<p>如图所示当我们想要，<code>find 4</code> 的时候 我们让4节点的parent指向 3节点的parent,这个时候我们就跳过了3号节点，直接找到了3号节点的父亲 这个过程就被称为路径的压缩。如下图所示：</p>
<img src="http://xy.liruoning.cn/images/59-php-6.png" style="zoom:50%;" />

<p>执行了上面的过程我们在就需要将需要将2的节点指向父亲的父亲，这时候我们在查询父亲的节点是否为本身，这时候我们发现节点0的节点就是其本身，最终就完成了查询。从开始到最终的转化我们可以看到树的层数是大大的减小了。</p>
<img src="http://xy.liruoning.cn/images/59-php-7.png" style="zoom:50%;" />

<p>具体的代码实现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ($q == <span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>($q!=<span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;parent[$q] = <span class="keyword">$this</span>-&gt;parent[<span class="keyword">$this</span>-&gt;parent[$q]]; <span class="comment">//p父亲的节点指向父亲的父亲</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        $q =  <span class="keyword">$this</span>-&gt;parent[$q];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们只需要加入  <code>$this-&gt;parent[$q] = $this-&gt;parent[$this-&gt;parent[$q]];</code>便可实现了路径的压缩 让q的父亲指向其父亲的父亲便可实现路径的压缩。</p>
<p>下面我们考虑可不可以将路径压缩成只有一个根节点</p>
<p><img src="http://xy.liruoning.cn/images/59-php-8.png" alt=""></p>
<p>这个时候我们便需要一个递归的过程相应的就是将parent指向 find 节点的值（find找到的就是根），这时便可形成上图所示的结果。这样我们便实现了第二个版本的压缩。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find2</span><span class="params">($q)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ($q == <span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>($q!=<span class="keyword">$this</span>-&gt;parent[$q])&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;parent[$q]=<span class="keyword">$this</span>-&gt;find2($q);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $q = <span class="keyword">$this</span>-&gt;parent[$q];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>从官网下载安装包，到搭建完成lnmp环境</title>
    <url>/2020/02/23/49-lnmp/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;  搭建lnmp环境，如果不是很熟练 ，经常会出一些小问题，所以今天我就想从0开始分别搭建 nginx php mysql 的环境。环境版本 Centos 7, nginx1.16.1 ,php7.4.3 ,mysql5.7.29。下面是搭建的主要步骤，里面还有一些比较常见错误的解决方法，希望可以帮助到你。</p>
<a id="more"></a>


<h4 id="nginx编译安装"><a href="#nginx编译安装" class="headerlink" title="nginx编译安装"></a>nginx编译安装</h4><ol>
<li><p>去nginx官网下载稳定版的nginx包，官网地址<a href="http://www.nginx.org" target="_blank" rel="noopener">www.nginx.org</a> 自行下载就可以。<br>具体步骤：<br>进入官网选择合适的nginx 版本如图：<br><img src="http://xy.liruoning.cn/images/49-lnmp-1.png" alt=""><br> 选择Stable（稳定版）右击复制链接地址如图：<br><img src="http://xy.liruoning.cn/images/49-lnmp-2.png" alt=""><br>进入Linux系统，进入<code>/usr/local/src</code>（这个目录自己决定） 目录下。</p>
</li>
<li><p>执行<code>wget http://nginx.org/download/nginx-1.16.1.tar.gz</code>命令下载相应的nginx压缩包</p>
</li>
<li><p>执行<code>tar -zxvf nginx-1.16.1.tar.gz</code> 将安装包解压</p>
</li>
<li><p>执行<code>cd nginx-1.16.1</code> 进入解压出来的nginx包 </p>
</li>
<li><p>执行<code>./configure --prefix=/usr/local/nginx</code>  在这里 99%会报错因为，我的Linux系统是新安装的。而nginx的一些模块需要依赖其它的第三方库根据报错信息来安装缺少那些库。</p>
<p>在这里简单提一下<strong>configure脚本的作用</strong> ：configure 一般会完成两项工作：一是检查环境，根据环境检查结果生成 C 代码；二是生成编译代码需要的makefile 文件。</p>
</li>
<li><p>因为nginx一些模块缺少依赖的第三方库,如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:&#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.16.1# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">checking for OS</span></pre></td></tr><tr><td class="code"><pre><span class="line"> + Linux 5.3.0-28-generic x86_64</span></pre></td></tr><tr><td class="code"><pre><span class="line">checking for C compiler ... not found</span></pre></td></tr><tr><td class="code"><pre><span class="line">.&#x2F;configure: error: C compiler cc is not found</span></pre></td></tr></table></figure>
</li>
<li><p>根据资料查询：nginx 安装的第三方库有 pcre库（支持rewrite模块）、zlib库（支持gzip模块）和openssl库（支持ssl模块）等。</p>
</li>
<li><p>执行<code>[lrn@localhost ~]$ sudo yum -y install gcc gcc-c++ wutomake pcre pcre-devel zlib zlib-devel open openssl-devel</code> 安装相应的依赖库。</p>
</li>
</ol>
<p>到此我们就完成了 nginx 编译安装的准备环境。</p>
<ol>
<li><code>./configure --prefix=/usr/local/nginx</code> 来指定nginx要安装的目录，并生成Makefile文件。</li>
</ol>
<p><img src="http://xy.liruoning.cn/images/49-lnmp-3.png" alt=""></p>
<ol start="2">
<li><p>得到Makefile文件就可以编译源代码了 执行 <code>make</code>命令进行编译</p>
</li>
<li><p>如果上边的<code>make</code>编译命令没问题，执行<code>make install</code>进行安装</p>
</li>
<li><p>安装完成，进入相应的安装目录可以看到一下文件 执行sbin 下面的 nginx二进制文件启动nginx 查看服务是否启动。</p>
</li>
</ol>
<p>   <img src="http://xy.liruoning.cn/images/49-lnmp-4.png" alt=""></p>
<ol start="5">
<li><p>nginx 常用命令</p>
<p><code>/usr/local/nginx/sbin/nginx -t # 检查Nginx配置语法是否有误</code></p>
<p><code>/usr/local/nginx/sbin/nginx  #启动</code></p>
<p><code>/usr/local/nginx/sbin/nginx -s stop  #立即停止</code> </p>
<p><code>/usr/local/nginx/sbin/nginx -s quit  #平滑停止</code></p>
<p><code>/usr/local/nginx/sbin/nginx -s reload #重载配置</code></p>
<p><code>/usr/local/nginx/sbin/nginx -s reopen #重开日志</code></p>
</li>
<li><p>配置环境变量：</p>
<p> <code>vim /etc/profile</code> // 进入 profile 文件</p>
<p><code>export PATH=/usr/local/nginx/sbin:$PATH</code>//添加这条语句</p>
<p> <code>source /etc/profile</code> //重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录</p>
</li>
<li><p>可以通过<code>lsof -i :80</code>查询占用 80的进程</p>
</li>
<li><p>执行</p>
<p><code>root@localhost sbin]# ps -ef|grep nginx
root      59021      1  0 09:43 ?        00:00:00 nginx: master process ./nginx
nobody    59024  59021  0 09:43 ?        00:00:00 nginx: worker process
root      59030   3115  0 09:43 pts/0    00:00:00 grep --color=auto nginx</code></p>
<p>发现nginx 已经存在，到此nginx 告一段落。</p>
</li>
</ol>
<h4 id="PHP的编译安装"><a href="#PHP的编译安装" class="headerlink" title="PHP的编译安装"></a>PHP的编译安装</h4><ol>
<li><p>进入PHP的官网下载，你想要的PHP版本 ,复制链接地址，wget 下载相应的PHP版本<br><img src="http://xy.liruoning.cn/images/49-lnmp-5.png" alt=""></p>
</li>
<li><p>在这里我依旧将PHP的安装包放到了 <code>/usr/local/src</code> 下面</p>
</li>
<li><p>执行<code>tar -zxvf</code> 命令解压 安装包</p>
</li>
<li><p>安装PHP依赖<code>yum install gcc gcc-c++ zip unzip libxml2 libxml2-devel curl-devel autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel  zlib zlib-devel glibc glibc-devel glib2 glib2-devel gd-devel bzip2 bzip2-devel</code></p>
</li>
<li><p>cd到解压的目录   <code>./configure --prefix=/usr/local/php7 --enable-opcache --with-config-file-path=/usr/local/php/etc --with-curl --enable-fpm  --enable-gd --with-iconv --enable-mbstring --with-mysqli=mysqlnd --with-openssl --enable-static --enable-sockets --enable-inline-optimization --with-zlib --disable-ipv6 --disable-fileinfo --disable-debug</code> 检查环境</p>
<p>在这里简单提一下：<strong>php7.4以后的版本不支持“–with-gd”，得改成“–enable-gd”，否则会报错“GD Library Error: imagecreatetruecolor does not exist - please contact your webhost and ask them to install the GD library</strong></p>
</li>
</ol>
<p>   <strong>小插曲</strong></p>
<ol>
<li><p>`error: Package requirements (sqlite3 &gt; 3.7.4) were not met</p>
<p>error: Package requirements (sqlite3 &gt; 3.7.4) were not met<br>No package ‘sqlite3’ found`</p>
<p>根据错误提示下载相应的包</p>
<p>执行：<code>yum install libsqlite3x-devel -y</code></p>
<p>在我执行上面语句的时候，又有一下的报错</p>
<p>报错提示：<strong>没有可用软件包 libsqlite3x-devel。 错误：无须任何处理</strong></p>
<p>执行<code>yum install epel-release</code>命令即可</p>
</li>
<li><p>再一次执行configure .<br>如下报错：<br>error: Package requirements (oniguruma) were not met<br>No package ‘oniguruma’ found<br>报错提示非常的明显：<br>yum install oniguruma-devel -y 便可完成</p>
</li>
</ol>
<ol start="6">
<li><p>执行configure 完美完成环境检查了</p>
</li>
<li><p>执行make进行编译最后提示</p>
<p><code>Build complete.
Don&#39;t forget to run &#39;make test&#39;.</code></p>
<p>不要忘记make test 然后执行 make test </p>
</li>
<li><p>然后make install 进行安装</p>
<h4 id="PHP配置"><a href="#PHP配置" class="headerlink" title="PHP配置"></a>PHP配置</h4></li>
</ol>
<p><code>root@localhost php7]# cp /usr/local/src/php-7.4.3/php.ini-development ./lib/php.ini</code><br><code>vim php.ini</code><br>date.timezone = PRC #修改时区PRC<br>expose_php = Off  # 避免PHP信息暴露在http头中<br>display_errors = Off# 生产环境设置为off,开发环境就设置为On,便于调试 说明:设置了dispaly_errors为off后,需要在php-fpm.conf中开启错误日志记录路径error_log = log/php-fpm.log<br><strong>PHP进程管理器</strong><br>[root@localhost php7]# cp etc/php-fpm.conf.default etc/php-fpm.conf<br>[root@localhost php7]# cd /usr/local/php/etc/php-fpm.d/<br>[root@localhost php-fpm.d]# cp <a href="http://www.conf.default" target="_blank" rel="noopener">www.conf.default</a> <a href="http://www.conf" target="_blank" rel="noopener">www.conf</a><br><strong>管理php-fpm</strong><br><code>vim /usr/local/php/etc/php-fpm.conf</code><br>打开下面两个选项：<br>pid = run/php-fpm.pid<br>error_log = log/php-fpm.log</p>
<p><strong>启动php-fpm</strong><br>cd /usr/local/php7<br>sbin/php-fpm # 启动PHP-FPM</p>
<p><strong>向进程发送信号,就可以完成进程管理</strong><br>停止: kill -INT <code>cat /usr/local/php/var/run/php-fpm.pid</code><br>平滑停止: kill -QUIT <code>cat /usr/local/php/var/run/php-fpm.pid</code><br>重启:kill -USR2 <code>cat /usr/local/php/var/run/php-fpm.pid</code><br>重新打开日志:kill -USR1 <code>cat /usr/local/php/var/run/php-fpm.pid</code><br><strong>配置环境变量</strong><br> <code>vim /etc/profile</code> // 进入 profile 文件<br><code>export PATH=/usr/local/php7/bin:$PATH</code>//添加这条语句<br><code>source /etc/profile</code> //重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录</p>
<h4 id="Nginx和PHP关联"><a href="#Nginx和PHP关联" class="headerlink" title="Nginx和PHP关联"></a>Nginx和PHP关联</h4><ol>
<li><p>修改 /nginx/conf/nginx.conf文件 添加</p>
<p>` location ~ .php$ {</p>
<pre><code>    root           html;
    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include        fastcgi_params;
}`</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;#脚本文件请求的路径,也就是说当访问127.0.0.1&#x2F;index.php的时候，需要读取网站根目录下面的index.php文件，如果没有配置这一配置项时，nginx不回去网站根目录下访问.php文件，所以返回空白</span></pre></td></tr></table></figure>
</li>
<li><p>执行 <code>./sbin/nginx -s reload</code> 重载nginx</p>
<p>可能会出现：nginx: [error] open() “/usr/local/nginx/logs/nginx.pid” failed (2: No such file or directory)报错。</p>
<p>执行<code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code>  </p>
<p>使用nginx -c的参数指定nginx.conf文件的位置</p>
</li>
<li><p>然后建立test.php 在html下 执行出现如图结果,PHP的安装就告一段落</p>
<p><img src="http://xy.liruoning.cn/images/49-lnmp-6.png" alt=""></p>
</li>
</ol>
<h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h4><p><strong>安装依赖</strong></p>
<p> <code>yum install cmake ncurses-devel</code>  cmake是新版MySQL的编译工具,必须安装</p>
<p> 如果你的系统是CentOS7，你还需要安装如下依赖 yum install perl perl-devel autoconf</p>
<p> useradd -s /sbin/nologin -M mysql  # 添加MySQL用户</p>
<p><strong>编译安装MySQL</strong></p>
<p><strong>下载MySQL</strong></p>
<ol>
<li><p><code>cd /usr/local/src 执行 wget https://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm</code></p>
</li>
<li><p>安装rpm包  在<code>/usr/local/src</code> <code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p>
</li>
</ol>
<p><strong>安装MySQL</strong></p>
<ol>
<li>在<code>/usr/local/src</code> 下 <code>yum install mysql-community-server</code></li>
</ol>
<p><strong>启动mysql</strong></p>
<ol>
<li><code>service mysqld start/restart</code></li>
<li>查看是否存在MySQL的进程 </li>
</ol>
<p><strong>查看数据库密码并修改</strong></p>
<ol>
<li><code>cat /var/log/mysqld.log|grep &#39;password&#39;</code> 因为开始的时候 数据库的初始密码是随机的，进行查看登录并修改。</li>
<li><code>mysql -uroot -p</code>  登陆数据库</li>
<li>#注意：如果只想设置简单密码需要修改两个全局参数：<br>mysql&gt; set global validate_password_policy=0;<br>mysql&gt; set global validate_password_length=1;<br>#修改<br>mysql&gt; SET PASSWORD = PASSWORD(‘123456’);</li>
</ol>
<p><img src="http://xy.liruoning.cn/images/49-lnmp-7.png" alt=""></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>&emsp; &emsp; 现在这三个环境已经搭建完毕，开始撸代码~。 </p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL优化</title>
    <url>/2020/02/22/40-mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;今天把MySQL的相关优化简单做了一些总结，包括如何定位查询比较慢的语句，通过profile、慢查询日志、processlist、show status等操作,找到具体要优化的语句，找到具体慢的过程进行优化。</p>
<a id="more"></a>
<h4 id="查找需要优化的语句"><a href="#查找需要优化的语句" class="headerlink" title="查找需要优化的语句"></a>查找需要优化的语句</h4><h5 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h5><p>记录<strong>慢查询日志</strong>（可以借助pt-query-digest工具来分析）：是MySQL提供的一种日志用于存储<strong>执行时间超过某个界限的sql语句</strong>，在MySQL中默认是没有开启慢查询日志的，即使开启了这个界限也是默认的10秒。</p>
<p><strong>开启MySQL慢查询日志</strong></p>
<p>方法一：<br>先关闭mysql，再以安全模式启动<br><code>mysqld.exe --safe-mode --slow-query-log</code> 开启慢查询日志 对于–safe-mode 已经废弃在低版本可以有，高版本就不加了。</p>
<p><img src="http://xy.liruoning.cn/images/40-mysql-8.png" alt=""></p>
<p>方法二（修改MySQL配置长期开启）：</p>
<p>进入mysql.ini文件在<code>[mysqld]</code>添加下面两条语句。</p>
<p>①slow_query_log=1 开启慢查询日志<br>②slow_query_log_file=”你的慢查询日志的路径” (这里有一个坑如果在window系统的话提前建好目录，Linux应该给予相应的权限)<br>③long_query_time=10 慢查询阈值，当查询时间多于设定的阈值时，该SQL会被记录日志中或者数据表中</p>
<p><strong>查询慢查询日志的时间</strong>&amp;<strong>设置边界记录时间</strong></p>
<p>查看时间：<code>show variables like &quot;%long_query_time%&quot;</code></p>
<p>设置时间： <code>set long_query_time=0.05</code> 命令设置边界时间。</p>
<p><strong>慢查询日志文件的位置&amp;查询日志的sql写入</strong></p>
<p>用以下语句来查询慢查询日志的存储位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;%slow_query_log_file%&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">| slow_query_log_file | D:\DESKTOP-ICVGFU3-slow.log</span></pre></td></tr></table></figure>

<p>下面是我做的慢查询写入测试</p>
<p>看一看出看到那个数据库那条语句满了。</p>
<p><img src="http://xy.liruoning.cn/images/40-mysql-12.png" alt=""></p>
<h5 id="show-profile查找SQL精确的记录时间"><a href="#show-profile查找SQL精确的记录时间" class="headerlink" title="show profile查找SQL精确的记录时间"></a>show profile查找SQL精确的记录时间</h5><p>​    set profiling=1;开启 ，服务器上执行的所有语句会检测消耗的时间，存到临时表。</p>
<p>​     通过查询临时表的主键ID来分析那一条语句发生了慢的操作</p>
<p>​     <img src="http://xy.liruoning.cn/images/40-mysql-1.png" alt=""></p>
<p>​     首选打开 profiling它会将我们的 查询记录存入到临时表</p>
<p>​     然后我进行了下面的三次操作，当然主要还是分析的第三次的<code>select</code>查询</p>
<img src="http://xy.liruoning.cn/images/40-mysql-2.png" style="zoom:50%;" /> 

<p>  然后show profiles; 来查询 profiles临时表</p>
 <img src="http://xy.liruoning.cn/images/40-mysql-3.png" style="zoom:67%;" />

<p>通过 show profile for query ID 来查询具体语句的执行时间</p>
 <img src="http://xy.liruoning.cn/images/40-mysql-4.png" style="zoom:67%;" />

<p> PS：上边我只是举了一个简单的例子如果实地的去分析，好要理解具体时间的浪费地点。</p>
<h5 id="show-status-来查看数据库的状态"><a href="#show-status-来查看数据库的状态" class="headerlink" title="show status 来查看数据库的状态"></a>show status 来查看数据库的状态</h5><p>show status 会返回一些计数器，show global status 查看服务器级别的所有计数</p>
<p>有时候可以根据这些基数猜出那些操作代价较高或者消耗时间多。</p>
<p>​    <img src="http://xy.liruoning.cn/images/40-mysql-5.png" style="zoom:67%;" /></p>
<p>​     以上是两个例子，其实好友很多goole || baidu 都可以查询得到。</p>
<h5 id="show-processlist"><a href="#show-processlist" class="headerlink" title="show processlist"></a>show processlist</h5><p>①观察现在所有连接的连接状态</p>
<p>②观察是否有大量的线程处于不正常的状态或者特征。</p>
   <img src="http://xy.liruoning.cn/images/40-mysql-6.png" style="zoom:67%;" />

<h5 id="explain-分析单条SQL语句"><a href="#explain-分析单条SQL语句" class="headerlink" title="explain 分析单条SQL语句"></a>explain 分析单条SQL语句</h5>   <img src="http://xy.liruoning.cn/images/40-mysql-7.png" style="zoom:67%;" />

<p><code>id:</code>查询的编号，一般有子查询才会递增</p>
<p><code>select_type</code>有以下几个值:</p>
<ol>
<li>simple:不含子查询单表查询</li>
<li>primary:含子查询或派生查询</li>
<li>derived:from性的子查询</li>
<li>subquery：除了from字句中包含的子查询外，其他地方出现的子查询都可能是subquery</li>
<li>union： UNION中的第二个或后面的SELECT语句</li>
<li>union result : UNION的结果</li>
</ol>
<p><code>table:</code> 查询针对的表</p>
<p>partitions:版本5.7以前，该项是explain partitions显示的选项，5.7以后成为了默认选项。该列显示的为分区表命中的分区情况。非分区表该字段为空（null）。</p>
<p><code>type:</code>依次从好到差：system，const，eq_ref，ref，fulltext，ref_or_null，index_merge，unique_subquery，index_subquery，range，index，ALL，除了all之外，其他的type都可以使用到索引，除了index_merge之外，其他的type只可以用到一个索引。</p>
<p>A：system：表中只有一行数据或者是空表，且只能用于myisam和memory表。如果是Innodb引擎表，type列在这个情况通常都是all或者index<br> B：const：使用唯一索引或者主键，返回记录一定是1行记录的等值where条件时，通常type是const。其他数据库也叫做唯一索引扫描<br> C：eq_ref：出现在要连接过个表的查询计划中，驱动表只返回一行数据，且这行数据是第二个表的主键或者唯一索引，且必须为not null，唯一索引和主键是多列时，只有所有的列都用作比较时才会出现eq_ref<br> D：ref：不像eq_ref那样要求连接顺序，也没有主键和唯一索引的要求，只要使用相等条件检索时就可能出现，常见与辅助索引的等值查找。或者多列主键、唯一索引中，使用第一个列之外的列作为等值查找也会出现，总之，返回数据不唯一的等值查找就可能出现。<br> E：fulltext：全文索引检索，要注意，全文索引的优先级很高，若全文索引和普通索引同时存在时，mysql不管代价，优先选择使用全文索引<br> F：ref_or_null：与ref方法类似，只是增加了null值的比较。实际用的不多。<br> 例如：<br> SELECT * FROM ref_table<br> WHERE key_column=expr OR key_column IS NULL;<br> G：index_merge：表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引，官方排序这个在ref_or_null之后，但是实际上由于要读取所个索引，性能可能大部分时间都不如range<br> H：unique_subquery：用于where中的in形式子查询，子查询返回不重复值唯一值<br> I：index_subquery：用于in形式子查询使用到了辅助索引或者in常数列表，子查询可能返回重复值，可以使用索引将子查询去重。<br> J：range：索引范围扫描，常见于使用 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN()或者like等运算符的查询中。<br> K：index：索引全表扫描，把索引从头到尾扫一遍，常见于使用索引列就可以处理不需要读取数据文件的查询、可以使用索引排序或者分组的查询。按照官方文档的说法：</p>
<p><code>possible_keys:</code>查询可能使用到的索引都会在这里列出来</p>
<p><code>key:</code>查询真正使用到的索引</p>
<p><code>key_len:</code> 查询使用到的索引长度（具体使用多少列的索引这里就会算进去）</p>
<p><code>ref:</code>如果是等值查询这里显示const,如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段，如果是条件使用了表达式或者函数，或者条件列发生了内部隐式转换，这里可能显示为func</p>
<p><code>row:</code>这里是执行计划中估算的扫描行数，不是精确值</p>
<p><code>filtered:</code>使用explain extended时会出现这个列，5.7之后的版本默认就有这个字段，不需要使用explain extended了。这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例，注意是百分比，不是具体记录数。</p>
<p><code>extra:</code> 尽量不要出现 using filesort和using temporary</p>
<p>A：distinct：在select部分使用了distinc关键字<br>B：no tables used：不带from字句的查询或者From dual查询<br>C：使用not in()形式子查询或not exists运算符的连接查询，这种叫做反连接。即，一般连接查询是先查询内表，再查询外表，反连接就是先查询外表，再查询内表。<br>D：using filesort：排序时无法使用到索引时，就会出现这个。常见于order by和group by语句中<br>E：using index：查询时不需要回表查询，直接通过索引就可以获取查询的数据。<br>F：using join buffer（block nested loop），using join buffer（batched key accss）：5.6.x之后的版本优化关联查询的BNL，BKA特性。主要是减少内表的循环数量以及比较顺序地扫描查询。</p>
<blockquote>
<p>参考链接：<a href="https://www.jianshu.com/p/73f2c8448722" target="_blank" rel="noopener">https://www.jianshu.com/p/73f2c8448722</a>  这位作者讲的超级详细感谢</p>
</blockquote>
<h4 id="优化查询过程中的数据访问"><a href="#优化查询过程中的数据访问" class="headerlink" title="优化查询过程中的数据访问"></a>优化查询过程中的数据访问</h4><p>① 是否在查询过程中检索到了大量不需要的数据，不需要的<strong>行</strong>或者<strong>列</strong> 可以用l<strong>imit</strong> 解决</p>
<p>②查询过程中尽量指定列名 A.id A.name B.id</p>
<p>③<strong>重复查询</strong>相同的语句我们可以使用缓存，缓存相应的数据，下次直接读取缓存。</p>
<p>④在explain中分析是否扫描了额外的记录行（如果需要少量的记录扫描了大量的记录行。</p>
<p>​    <strong>解决：</strong> 可以使用索引覆盖，这样存储引擎不需要回表获取对应的行就可以返回结果。</p>
<p>⑤有的时候我们也可以牺牲我们的空间来换取时间。</p>
<p>​    例：有的时候我们经常会关联另一个表来查询另一个表的一个字段。这时候我们可以将这个字段存储到另一个表中，这样就不用连表查询了，虽然牺牲了一点空间。</p>
<h4 id="优化长难的查询语句"><a href="#优化长难的查询语句" class="headerlink" title="优化长难的查询语句"></a>优化长难的查询语句</h4><p><strong>一个复杂查询和多个简单查询</strong></p>
<p>   例：MySQL每秒钟可以扫描上百万条数据，但是响应给客户端的速度却不是很快。这时我们可能就需要把一个复杂的查询分割成多个小的查询也是很有必要的。</p>
<p><strong>分解关联查询</strong></p>
<p>将一条关联语句分解成多个SQL语句的查询来中</p>
<ol>
<li>缓存效率更高</li>
<li>执行单个查询可以减少锁的竞争</li>
<li>在应用层做关联更容易对数据库进行拆分</li>
</ol>
<h4 id="优化特定类型的查询语句"><a href="#优化特定类型的查询语句" class="headerlink" title="优化特定类型的查询语句"></a>优化特定类型的查询语句</h4><ol>
<li><p><code>count()</code> :count(*)中的*是忽略所有行直接统计所有的行数，不要使用count(列名)来代替。</p>
<p>对于MyISAM引擎 count(*) 是非常快的 在没有where的条件下，如果有where 可以使用explain来近似的代替count(*)</p>
</li>
<li><p>确定 <strong>ON</strong> 或者 <strong>USING</strong> 子句列有索引</p>
</li>
<li><p><strong>group by</strong> 和 <strong>order by</strong> 只有一个表的列 这样MySQL才可以使用到索引</p>
</li>
<li><p>优化<strong>group by</strong> 和<strong>distinct</strong></p>
<p>1)索引优化，效果好</p>
<p>2)使用标识列进行分组效率更高</p>
<p>3) 如果不需要order by 进行 group by 时使用 order by NULL ,MySQL就不会进行文件排序</p>
</li>
<li><p><strong>LIMIT</strong> 偏移量大的时候，查询效率较低</p>
<p>我们可以记录上一次查询的最大ID,下次查询的时候直接根据ID来查询。</p>
</li>
<li><p><strong>UNION</strong> 尽量有 <strong>UNION ALL</strong> 来代替</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP实现二分查找法（递归&amp;非递归）</title>
    <url>/2020/02/22/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/</url>
    <content><![CDATA[<h4 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h4><p>&emsp;&emsp; 对于<strong>有序</strong>的序列，才能使用二分查找法。将有序数组中间的元素定义成 <code>V</code>，<code>V</code>将这个有序序列分成两部分小于<code>V</code>的部分和大于<code>V</code>的部分如果要查找的值小于<code>V</code>则在左半部分找，相应的有边界<code>$r</code>的值为<code>mid-1</code>，一次类推找到相应的值位置。具体实现的代码如下有递归和非递归的过程。</p>
<a id="more"></a>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *在array数组中查找 $value所在的位置的index(索引)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 如果为查找到则会返回-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinSearch</span><span class="params">(array $arr,int $n,$value)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//在$arr中[l,r]的范围内查找$value</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $l=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $r=$n<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>($l&lt;=$r)&#123;  <span class="comment">//当$l==$r 时这个区间为有效的区间这时 我们应该继续查找下去故:$l&lt;=$r</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        $mid =intval($l+($r-$l)/<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($arr[$mid]==$value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> ($arr[$mid]&gt;$value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $r=$mid<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> ($arr[$mid]&lt;$value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $l=$mid+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinSearchR</span><span class="params">(array $arr,int $left,int $right,$value)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//在$arr中[l,r]的范围内查找$value</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $mid =intval($left+($right-$left)/<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>($left&gt;=$right)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>($arr[$mid]==$value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ($arr[$mid]&gt;$value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $right=$mid<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> BinSearchR($arr,$left,$right,$value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ($arr[$mid]&lt;$value)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $left=$mid+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> BinSearchR($arr,$left,$right,$value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP实现二分搜索树基础</title>
    <url>/2020/02/21/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;这一篇bolg主要讲述了二分搜索树，在功能上主要完成了在树中<strong>添加元素</strong>，<strong>前（使用了递归和非递归）、中、后序的遍历</strong>、<strong>广度优先搜索</strong>主要用到的是队列的特性（先进先出）。<strong>删除某个元素</strong>等操作。通过将这些功能的实现，对递归和非递归有了新的理解👨，这次实现链表的基本操作，关键的地方都写了注释，希望发表你的想法我们共同学习。</p>
<a id="more"></a>
<h4 id="具体的代码实现"><a href="#具体的代码实现" class="headerlink" title="具体的代码实现"></a>具体的代码实现</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> $e;   <span class="comment">//存储数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> $left; <span class="comment">// Node 存储左节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> $right; <span class="comment">// Node 存储右节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($e)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;e=$e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;left=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;right=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">"../list/linkStack.php"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">"../list/LinkListQueue.php"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">linkStack</span>\<span class="title">linkStack</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">LinkListQueue</span>\<span class="title">LinkListQueue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> $root; <span class="comment">//根元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span>  $size; <span class="comment">//有多少个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;root = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;size=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//当前存储元素的个数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSize</span><span class="params">()</span>: <span class="title">int</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>  <span class="keyword">$this</span>-&gt;size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//判断是否为空</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span><span class="params">()</span>:<span class="title">bool</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;size==<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;root=<span class="keyword">$this</span>-&gt;addNoRoot(<span class="keyword">$this</span>-&gt;root,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addNoRoot</span><span class="params">($Node,$e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        if($Node-&gt;e==$e)&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            return;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        if($Node-&gt;e &gt; $e&amp;&amp;$Node-&gt;left==null)&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $Node-&gt;left = new Node($e);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $this-&gt;size++;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            return;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#125;else&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $this-&gt;addNoRoot($Node-&gt;left,$e);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        if($Node-&gt;e &lt; $e&amp;&amp;$Node-&gt;right==null)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $Node-&gt;right=new Node($e);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $this-&gt;size++;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            return;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#125;else&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $this-&gt;addNoRoot($Node-&gt;right,$e);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node($e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e &gt;$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Node-&gt;left=<span class="keyword">$this</span>-&gt;addNoRoot($Node-&gt;left,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e &lt; $e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Node-&gt;right=<span class="keyword">$this</span>-&gt;addNoRoot($Node-&gt;right,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $Node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//前序遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prevOrder</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;prevOrderNode(<span class="keyword">$this</span>-&gt;root);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">prevOrderNode</span><span class="params">($Node)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> $Node-&gt;e.<span class="string">" "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;prevOrderNode($Node-&gt;left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;prevOrderNode($Node-&gt;right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//前序遍历的非递归写法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prevOrderNR</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $stack = <span class="keyword">new</span> linkStack();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $stack-&gt;push(<span class="keyword">$this</span>-&gt;root); <span class="comment">//先将根节点压入栈</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(!$stack-&gt;isEmpty())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             $top=$stack-&gt;peek();  <span class="comment">//if 栈不为空获得栈顶元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                 $stack-&gt;pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> $top-&gt;e.<span class="string">" "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 <span class="keyword">if</span>($top-&gt;right!=<span class="keyword">null</span>)&#123;       <span class="comment">//因为栈是后入先出的所以先压入右孩子，在压入左孩子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                     $stack-&gt;push($top-&gt;right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 <span class="keyword">if</span>($top-&gt;left!=<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                     $stack-&gt;push($top-&gt;left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//中序遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">inOrder</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;inOrderNode(<span class="keyword">$this</span>-&gt;root);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">inOrderNode</span><span class="params">($Node)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;inOrderNode($Node-&gt;left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> $Node-&gt;e.<span class="string">" "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;inOrderNode($Node-&gt;right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//后续遍历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postOrder</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;postOrderNode(<span class="keyword">$this</span>-&gt;root);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">postOrderNode</span><span class="params">($Node)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;postOrderNode($Node-&gt;left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;postOrderNode($Node-&gt;right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> $Node-&gt;e.<span class="string">" "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//广度优先遍历（层序遍历）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//主要利用了队列的特性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">levelOrder</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $Queue=<span class="keyword">new</span> LinkListQueue();   <span class="comment">//队列类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        $Queue-&gt;enqueue(<span class="keyword">$this</span>-&gt;root);  <span class="comment">//将根节点入队</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (!$Queue-&gt;isEmpty())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $front=$Queue-&gt;getFront(); <span class="comment">//获得队首元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Queue-&gt;dequeue();        <span class="comment">//进行出队操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">             <span class="keyword">echo</span> $front-&gt;e.<span class="string">" "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!is_null($front-&gt;left))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $Queue-&gt;enqueue($front-&gt;left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!is_null($front-&gt;right))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $Queue-&gt;enqueue($front-&gt;right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//找到最小元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mininum</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;size==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> <span class="string">"二分搜索树的值为空"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;mininumR(<span class="keyword">$this</span>-&gt;root)-&gt;e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mininumR</span><span class="params">($root)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($root-&gt;left==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $root;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;mininumR($root-&gt;left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeMin</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $ret=<span class="keyword">$this</span>-&gt;mininum();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;root=<span class="keyword">$this</span>-&gt;removeMinR(<span class="keyword">$this</span>-&gt;root);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//删除最小的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//下面提供了两种思路① 分别判断要删除的节点是否含有右子树然后再分别处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//② 如果左子树为空 直接返回 此时的右子树 把当时Node赋值为null（这是因为不管是否有右子树返回当时的根节点就可以如果没有右子树自然返回null）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeMinR</span><span class="params">($Node)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        if(is_null($Node-&gt;left)&amp;&amp;(!is_null($Node-&gt;right)))&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $curNode=$Node;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $Node=$Node-&gt;right;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $curNode=null;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $this-&gt;size--;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            return $Node;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        if(is_null($Node-&gt;left)&amp;&amp;is_null($Node-&gt;right))&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $Node=null;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $this-&gt;size--;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            return $Node;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(is_null($Node-&gt;left))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $rightNode=$Node-&gt;right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Node=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $rightNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $Node-&gt;left=<span class="keyword">$this</span>-&gt;removeMinR($Node-&gt;left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $Node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//找到最大元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">maxnum</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;size==<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"二分搜索树的值为空"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;maxnumR(<span class="keyword">$this</span>-&gt;root)-&gt;e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">maxnumR</span><span class="params">($root)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($root-&gt;right==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $root;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;maxnumR($root-&gt;right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeMAX</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $ret=<span class="keyword">$this</span>-&gt;maxnum();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;root=<span class="keyword">$this</span>-&gt;removeMaxR(<span class="keyword">$this</span>-&gt;root);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//删除最大数 ，这个和删除最小的数 思路是一样的只不过 是找右子树</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeMaxR</span><span class="params">($Node)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        if(!is_null($Node-&gt;left)&amp;&amp;(is_null($Node-&gt;right)))&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $curNode=$Node;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $Node=$Node-&gt;left;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $curNode=null;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $this-&gt;size--;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            return $Node;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        if(is_null($Node-&gt;left)&amp;&amp;is_null($Node-&gt;right))&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $Node=null;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            $this-&gt;size--;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            return $Node;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(is_null($Node-&gt;right))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $leftNode=$Node-&gt;left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Node=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $leftNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $Node-&gt;right=<span class="keyword">$this</span>-&gt;removeMaxR($Node-&gt;right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $Node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//删除掉节点 e</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 以查找后继节点来代替当前节点来删除</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeuccessor</span><span class="params">($e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;root = <span class="keyword">$this</span>-&gt;removeR(<span class="keyword">$this</span>-&gt;root,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;root;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeR</span><span class="params">($Node,$e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e&lt;$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          $Node-&gt;right=<span class="keyword">$this</span>-&gt;removeR($Node-&gt;right,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span> $Node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e&gt;$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           $Node-&gt;left=<span class="keyword">$this</span>-&gt;removeR($Node-&gt;left,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">return</span> $Node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e==$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(is_null($Node-&gt;left))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $rightNode=$Node-&gt;right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $Node=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> $rightNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(is_null($Node-&gt;right))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $leftNode = $Node-&gt;left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $Node=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> $leftNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//如果左右子树都不为空</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// ① 找到右子树的最小值（要删除节点 的后继节点）并删除</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 生成后继节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $successor=<span class="keyword">$this</span>-&gt;mininumR($Node-&gt;right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 将右子树赋值给后继节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $successor-&gt;right=<span class="keyword">$this</span>-&gt;removeMinR($Node-&gt;right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;size++; <span class="comment">//在removeMinR进行了size--</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 将左子树赋值给后继节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $successor-&gt;left = $Node-&gt;left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Node-&gt;left=$Node-&gt;right=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $successor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//删除掉节点 e</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 以查找后继节点来代替当前节点来删除</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">removePrecursor</span><span class="params">($e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;root=<span class="keyword">$this</span>-&gt;removePrecursorR(<span class="keyword">$this</span>-&gt;root,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;root;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">removePrecursorR</span><span class="params">($Node,$e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (is_null($Node))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e &lt; $e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Node-&gt;right=<span class="keyword">$this</span>-&gt;removePrecursorR($Node-&gt;right,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $Node; <span class="comment">//返回处理后的Node节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e &gt; $e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Node-&gt;left=<span class="keyword">$this</span>-&gt;removePrecursorR($Node-&gt;left,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $Node; <span class="comment">//返回处理后的Node节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//在 相等的这种情况 我们还要分为三种情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e==$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//①要删除节点的左子树为null,这个时候直接返回右子树接可以了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>($Node-&gt;left==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $rightNode=$Node-&gt;right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $Node=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> $rightNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//当删除的节点左子树为空的时候</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>($Node-&gt;right==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $leftNode =$Node-&gt;left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $Node=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> $leftNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//当左右子树都不为空的时候 ，这个时候我们找到前驱（左子树最大的节点）节点来代替要删除的节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Precursor=<span class="keyword">$this</span>-&gt;maxnumR($Node-&gt;left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//找到删除前驱后的左子树，并赋值给当前的前驱节点的左子树</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Precursor-&gt;left=<span class="keyword">$this</span>-&gt;removeMaxR($Node-&gt;left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;size++; <span class="comment">//在removeMaxR中进行size--了为了语义明白 我做了一次size++</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//将右子树赋值给前驱节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Precursor-&gt;right = $Node-&gt;right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//将$Node去除，并$size--</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $Node=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $Precursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="comment">//比要找的元素 e 小的最大的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">floor</span><span class="params">($e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $ret=<span class="keyword">$this</span>-&gt;floorR(<span class="keyword">$this</span>-&gt;root,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">floorR</span><span class="params">($Node,$e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e&gt;=$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(is_null($Node-&gt;left))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $Node-&gt;e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           $ret=<span class="keyword">$this</span>-&gt;floorR($Node-&gt;left,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">return</span> $ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e&lt;$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(is_null($Node-&gt;right))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $Node-&gt;e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $ret=<span class="keyword">$this</span>-&gt;floorR($Node-&gt;right,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="comment">// 比要找元素e 大的最小元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ceil</span><span class="params">($e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $ret = <span class="keyword">$this</span>-&gt;ceilR(<span class="keyword">$this</span>-&gt;root,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ceilR</span><span class="params">($Node,$e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e&gt;$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(is_null($Node-&gt;left))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> $Node-&gt;e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $ret = <span class="keyword">$this</span>-&gt;ceilR($Node-&gt;left,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($Node-&gt;e&lt;=$e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(is_null($Node-&gt;right))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> $Node-&gt;e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $ret = <span class="keyword">$this</span>-&gt;ceilR($Node-&gt;right,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery选择器&amp;对元素的操作</title>
    <url>/2020/02/20/4-jQuery2/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;本篇blog主要记录的jQuery表单以及表单属性值的操作,还有jQuery对元素的操作主要是对元素标签呀，class属性的读取和添加，在blog的后面有一些小例子都是比较相似的所以有的就没有写具体的例子但是对照学习，就可以总结出规律。通过学习这些jQuery的操作越来越体会到jQuery的便捷性了👏。</p>
<a id="more"></a>
<h4 id="jQuery选择器第二部"><a href="#jQuery选择器第二部" class="headerlink" title="jQuery选择器第二部"></a>jQuery选择器第二部</h4><h5 id="表单过滤选择器"><a href="#表单过滤选择器" class="headerlink" title="表单过滤选择器"></a>表单过滤选择器</h5><p>（1）:input：过滤所有的输入框</p>
<p>（2）:text：过滤所有的文本框</p>
<p>（3）:password：过滤所有的密码框</p>
<p>（4）:radio：过滤所有的单选框</p>
<p>（5）:checkbox：过滤所有的复选框框</p>
<p>（6）:submit：过滤所有的提交按钮</p>
<p>（7）:reset：过滤所有的重置按钮</p>
<p>（8）:button：过滤所有的点击按钮</p>
<p>（9）:file：过滤所有的文件上传框</p>
 <img src="http://xy.liruoning.cn/images/4-jquery-1.png" style="zoom:67%;" />

<p><strong>:selected</strong></p>
<p>匹配所有选中的选项元素</p>
<img src="http://xy.liruoning.cn/images/4-jquery-2.png" style="zoom:67%;" />

<p>:enabled</p>
<p><strong>匹配所有可用元素</strong>  ps:默认都是可用的，当加上disable属性的时候就会变为不可用</p>
<img src="http://xy.liruoning.cn/images/4-jquery-3.png" style="zoom:67%;" />

<p>:disabled</p>
<p><strong>匹配所有不可用元素</strong> </p>
<img src="http://xy.liruoning.cn/images/4-jquery-4.png" style="zoom:67%;" />

<h5 id="可见选择器和隐藏元素"><a href="#可见选择器和隐藏元素" class="headerlink" title="可见选择器和隐藏元素"></a>可见选择器和隐藏元素</h5><p>（1）<strong>:visible</strong> 选择器选取当前可见的每个元素。</p>
<p>除以下几种情况之外的元素即是可见元素：</p>
<p>² 设置为 display:none</p>
<p>² 带有 type=”hidden” 的表单元素</p>
<p>² width 和 height 设置为 0</p>
<p>² 隐藏的父元素（这也会隐藏子元素）</p>
<img src="http://xy.liruoning.cn/images/4-jquery-5.png" style="zoom:50%;" />

<p>（2）:hidden 选择器选取隐藏的元素。</p>
<img src="http://xy.liruoning.cn/images/4-jquery-6.png" style="zoom:67%;" />

<h5 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h5><p>1)   <strong>[attr]</strong>:选择具有<strong>attr**</strong>属性的元素**</p>
<p>2)   [attr<strong>=</strong>‘val’]:选择具有attr属性并且值<strong>是val</strong>的元素</p>
<p>3)   [attr<strong>！=</strong>‘val’]:选择具有attr属性并且值<strong>不是val</strong>的元素</p>
<p>4)   [attr<strong>^</strong>=‘val’]:选择具有attr属性并且值的<strong>开头</strong>是val的元素</p>
<p>5)   [attr<strong>$</strong>=‘val’]:选择具有attr属性并且值的<strong>结尾</strong>是val的元素</p>
<p>6)   [attr<strong>***=‘val’]:选择具有attr属性并且值的</strong>任何位置**是val的元素</p>
<p>7)   [attr<strong>|</strong>=‘val’]:选择具有attr属性并且值<strong>val后面有连接符</strong>的元素</p>
<p>8)   [attr<strong>~</strong>=‘val’]:选择具有attr属性并且值<strong>val后面有空格的元素</strong></p>
<img src="http://xy.liruoning.cn/images/4-jquery-7.png" style="zoom:67%;" />

<h5 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h5><p>1)   :has: 选择器选取所有<strong>包含一个或多个元素在其内的元素</strong>，匹配指定的选择器。</p>
<p>2)   :empty 选择器选取<strong>空的元素</strong>。</p>
<p>3)   :parent：过滤出<strong>有内容孩子的元素和empty相反</strong>。</p>
<p>4)   :contains：包含<strong>指定内容选择器</strong>。</p>
<p>5)   :not:选择器选取<strong>除了指定元素以外</strong>的所有元素。</p>
<p>​        <img src="http://xy.liruoning.cn/images/4-jquery-9.png" style="zoom:67%;" /></p>
<img src="http://xy.liruoning.cn/images/4-jquery-8.png" style="zoom:60%;" />

<h4 id="jQuery对元素的操作"><a href="#jQuery对元素的操作" class="headerlink" title="jQuery对元素的操作"></a>jQuery对元素的操作</h4><h5 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h5><p>（1）<strong>查询</strong>属性：<strong>attr(属性名)</strong>方法查询属性的值</p>
<p>（2）<strong>设置</strong>属性：<strong>attr(属性名,属性值)</strong>，如果设置多个属性<strong>attr({})</strong></p>
<p>（3）<strong>删除</strong>属性：<strong>removeAttr()</strong>  </p>
<p>删除单个属性</p>
<p><strong>删除多个属性加空格。</strong></p>
<img src="http://xy.liruoning.cn/images/4-jquery-10.png" style="zoom:67%;" />

<h5 id="内容操作（重点）"><a href="#内容操作（重点）" class="headerlink" title="内容操作（重点）"></a>内容操作（重点）</h5><p>（1）html()：<strong>获得 或 设置</strong>标签的html内容</p>
<p>​    <strong>html():相当于js的innerHTML属性。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        alert($(<span class="string">'li:eq(0)'</span>).html()) <span class="comment">//获得第一个索引li标签的内容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;body&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;ul id="choose"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li&gt;goole&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"baidu"</span>&gt;baidu&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li&gt;souhu&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/ul&gt;</span></span></pre></td></tr></table></figure>

<p>(2) 设置html内容。</p>
<img src="http://xy.liruoning.cn/images/4-jquery-11.png" style="zoom:67%;" />

<p>（1）text()：<strong>获得或设置</strong>标签的文本内容</p>
<p>  <strong>text():相当于js的innerText属性或者是textContent.</strong></p>
<p>  实例1：获取文本的内容</p>
  <img src="http://xy.liruoning.cn/images/4-jquery-12.png" style="zoom:50%;" />

<p>  实例2：设置文本的内容</p>
  <img src="http://xy.liruoning.cn/images/4-jquery-13.png" style="zoom:50%;" />

<p>（1）val() ：<strong>获得 或 设置</strong>表单的value属性值</p>
<p>  <strong>val():相当于js的value()属性。</strong></p>
<p>  实例1：获取表单的value属性</p>
 <img src="http://xy.liruoning.cn/images/4-jquery-14.png" style="zoom:50%;" />

<img src="http://xy.liruoning.cn/images/4-jquery-15.png" style="zoom:50%;" />

<h5 id="CSS样式操作（重点）"><a href="#CSS样式操作（重点）" class="headerlink" title="CSS样式操作（重点）"></a>CSS样式操作（重点）</h5><p>（1）css(属性名)：读取一个css属性的值</p>
<p>   css返回的属性值只能是<strong>行内样式</strong>。</p>
<p>   具体实例如下：</p>
<p>（2）如果设置一个css样式：css(css属性名,属性值)</p>
<p>   $(‘p’).css(‘background’,’red’);</p>
<p>（3）如果设置多个css样式：css({css属性:值})</p>
<p>  $(‘p’).css({‘background’:’red’,’color’:’blue’});</p>
<p>（4）<strong>addClass</strong>(class)：<strong>添加某个类</strong></p>
<p>  回顾一下js怎样添加样式：</p>
<p>（5）<strong>removeClass</strong>(class)  ：<strong>删除某个类</strong></p>
<p>（6）<strong>toggleClass</strong>(class)：<strong>切换样式</strong>，如果有class则删除，如果没有则添加</p>
<img src="http://xy.liruoning.cn/images/4-jquery-16.png" style="zoom:50%;" />

<h5 id="尺寸操作"><a href="#尺寸操作" class="headerlink" title="尺寸操作"></a>尺寸操作</h5><p>（1）<strong>width()</strong>：方法<strong>设置或返回元素的宽度</strong>（不包括内边距、边框或外边距）。</p>
<p>（2）<strong>height()</strong>：方法<strong>设置或返回元素的高度</strong>（不包括内边距、边框或外边距）。</p>
<p>（3）<strong>innerWidth()</strong> 方法返回元素的宽度（<strong>包括内边距</strong>）。</p>
<p>（4）<strong>innerHeight()</strong> 方法返回元素的高度（<strong>包括内边距</strong>）。</p>
<p>（5）<strong>outerWidth()</strong> 方法返回元素的宽度（<strong>包括内边距和边框</strong>）。</p>
<p>（6）<strong>outerHeight()</strong> 方法返回元素的高度（<strong>包括内边距和边框</strong>）。</p>
  <img src="http://xy.liruoning.cn/images/4-jquery-17.png" style="zoom:100%;" />

<h5 id="位置操作"><a href="#位置操作" class="headerlink" title="位置操作"></a>位置操作</h5><p><strong>scrollLeft()</strong> 方法设置或返回被选元素的<strong>水平滚动条位置</strong>。</p>
<p>overflow:auto,scroll:滚动条</p>
<img src="http://xy.liruoning.cn/images/4-jquery-18.png" style="zoom:50%;" />

<p><strong>scrollTop()</strong> 方法设置或返回被选元素的<strong>垂直滚动条位置</strong>。</p>
<p>看具体实例如下：</p>
<img src="http://xy.liruoning.cn/images/4-jquery-19.png" style="zoom:50%;" />

]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery基本语法&amp;选择器</title>
    <url>/2020/02/17/24-jQuery1/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;自己虽然是做后端PHP开发的，但是在部分情况下前端的知识还是要学一下，毕竟PHP在一些开发中是嵌入到前端代码中去的。<strong>首先</strong>我为什么想学一下jQuery呢，第一个原因就是，当我在开发中读前端代码或者想要加一些特效的时候，有好多都是用的jQuery框架虽然看起简单，但是不懂基本语法，读起来效率也不高所以我就想学一下，再就是反正也不难学。很快可以掌握，手册讲的也比较详细👏。</p>
<a id="more"></a>
<h4 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h4><ol>
<li>jQuery是一个JavaScript函数库。</li>
</ol>
<p>​     具有<strong>独特的链式语法</strong>和<strong>短小清晰的多功能接口</strong>；具有<strong>高效灵活的css选择器</strong>，并且可对CSS选择器         进行扩展；拥有便捷的插件扩展机制和丰富的插件。</p>
<ol start="2">
<li><p>jQuery库包含以下功能：</p>
<p>HTML 元素选取</p>
<p>HTML 元素操作</p>
<p>CSS 操作</p>
<p>HTML 事件函数</p>
<p>JavaScript 特效和动画</p>
<p>HTML DOM 遍历和修改</p>
<p>AJAX</p>
</li>
<li><p>jQuery下载并安装</p>
<ol>
<li><p>jQuery有两个版本的 jQuery 可供下载：</p>
<p>Production version - 用于实际的网站中，已被精简和压缩。</p>
<p>Development version - 用于测试和开发（未压缩，是可读的代码）</p>
</li>
<li><p>自己去官网下载我这里就不再赘述 <a href="http://www.jquery.com" target="_blank" rel="noopener">www.jquery.com</a></p>
</li>
</ol>
</li>
</ol>
<h4 id="jQuery语法"><a href="#jQuery语法" class="headerlink" title="jQuery语法"></a>jQuery语法</h4><ol>
<li><p><strong>$(selector).action()</strong></p>
<p><strong>selector</strong>:选择器，就是我们css中，标签选择器，id选择器，类选择器等。</p>
<p><strong>action()</strong>:方法，特效，事件。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./js/jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $(<span class="string">'#btn1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="string">'img'</span>).show()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $(<span class="string">'#btn2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="string">'img'</span>).hide()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;input type="button" id="btn1" value="点击显示"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;input type="button" id="btn2" value="点击隐藏"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;img src="./img</span><span class="regexp">/1.jpeg" /</span>&gt;</span></pre></td></tr></table></figure>

<p><strong>$(‘document’).ready() 和 window.load区别</strong></p>
<ol>
<li><strong>加载时间</strong>:$(‘document’).ready()是等到DOM结构绘制完加载(不用等到全部加载完)，window.load：是等页面全部加载完包括图片。</li>
<li>$(‘document’).ready()可以加载多个，window.load不能加载多个只能加载最后一个</li>
<li>$(‘document’).ready(function{}) 可以简写成 $(function(){})。</li>
</ol>
<h4 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h4><h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a><strong>id选择器</strong></h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"../js/jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="string">'ul#choose'</span>).css(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"border"</span>:<span class="string">"2px dashed tomato"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"color"</span>:<span class="string">"blue"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"font-weight"</span>:<span class="string">"bolder"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;ul id="choose"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li&gt;goole&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;baidu&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li&gt;souhu&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/ul&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;button id="btn"&gt;单击&lt;/</span>button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/body&gt;</span></span></pre></td></tr></table></figure>

<h5 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a><strong>class选择器</strong></h5><p>①单选择器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="string">".p"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;p class="p"&gt;点击变色&lt;/</span>p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"choose"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;goole&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li&gt;baidu&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;souhu&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;单击&lt;<span class="regexp">/button&gt;</span></span></pre></td></tr></table></figure>

<p>②多选择器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="string">".p,.baidu"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;p class="p"&gt;点击变色&lt;/</span>p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"choose"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;goole&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li class="baidu"&gt;baidu&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;souhu&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;单击&lt;<span class="regexp">/button&gt;</span></span></pre></td></tr></table></figure>

<p>③元素选择器（标签选择器）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>,<span class="string">"red"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;p class="p"&gt;点击变色&lt;/</span>p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"choose"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;goole&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li class="baidu"&gt;baidu&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;souhu&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;单击&lt;<span class="regexp">/button&gt;</span></span></pre></td></tr></table></figure>

<p>④组合选择器</p>
<img src="http://xy.liruoning.cn/images/24-jquery-1.png" style="zoom:67%;" />

<p>⑤特殊选择器:this *</p>
<p>​     this:</p>
<p>​    <img src="http://xy.liruoning.cn/images/24-jquery-2.png" style="zoom:67%;" /></p>
<p>   ‘*’</p>
<p><img src="http://xy.liruoning.cn/images/24-jquery-3.png" alt=""></p>
<h5 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h5><p>①后代元素选择器：父元素 后代元素</p>
<img src="http://xy.liruoning.cn/images/24-jquery-4.png" style="zoom:80%;" />

<p>②子选择器：父元素 &gt; 子元素</p>
<img src="http://xy.liruoning.cn/images/24-jquery-5.png" style="zoom:67%;" />

<p>③相邻选择器：我+邻居</p>
<img src="http://xy.liruoning.cn/images/24-jquery-6.png" style="zoom:80%;" />

<p>④兄弟选择器：我~兄弟</p>
<p>​    <img src="http://xy.liruoning.cn/images/24-jquery-7.png" style="zoom:67%;" /></p>
<h5 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h5><p>​    问题提出：比如我们给第一个元素，或者最后一个元素，或者是第几个，或者奇数行，或者是偶数行应用样式，怎样实现？</p>
<p>（1）:first 匹配找到的<strong>第一个</strong>元素</p>
<p>（2）:last 匹配找到的<strong>最后一个</strong>元素</p>
<p>（3）:even 匹配索引是<strong>偶数</strong>的所有元素,<strong>索引从0开始</strong> </p>
<p>（4）:odd 匹配索引是<strong>奇数</strong>的所有元素，<strong>索引从0开始</strong></p>
<p>（5）:eq(index) 匹配索引<strong>等于index</strong>的所有元素，<strong>index**</strong>索引从0开始**，可以是负数。</p>
<p><strong>（6）</strong>:gt(index) :匹配所有<strong>大于</strong>索引值的元素<strong>greaterthan</strong></p>
<p>（7）:lt(index)匹配所有<strong>小于</strong>索引值的元素<strong>lessthan</strong></p>
<img src="http://xy.liruoning.cn/images/24-jquery-8.png" style="zoom:40%;" />

<p>（8）<strong>:header</strong> 获取网页中的<strong>标题元素（h1-h6）</strong></p>
<p>​        <img src="http://xy.liruoning.cn/images/24-jquery-9.png" style="zoom:67%;" /></p>
<h5 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h5><p>  首先回顾nth-child和nth-of-type选择器</p>
<p>​    nth-child <strong>不限制类型</strong>（不同元素） 第几个元素(索引从1开始)</p>
<p>​    <img src="http://xy.liruoning.cn/images/24-jquery-10.png" style="zoom:50%;" /></p>
<p>​    nth-of-type<strong>限制类型(同类型)下</strong>的第几个元素（索引从1开始）</p>
<p>​    <img src="http://xy.liruoning.cn/images/24-jquery-11.png" style="zoom:67%;" /></p>
<p>​    1)   匹配父元素下，索引值是<strong>偶数</strong>的子元素：nth-child(<strong>evev</strong>)（索引从1开始）</p>
<p>​      <img src="http://xy.liruoning.cn/images/24-jquery-13.png" style="zoom:67%;" /></p>
<p>​    2)   选取父元素下,索引值是<strong>奇数</strong>的子元素：nth-child(<strong>odd</strong>)（索引从1开始）</p>
<p>​       <img src="http://xy.liruoning.cn/images/24-jquery-12.png" style="zoom:50%;" /></p>
<p>​    3)   匹配每个父元素下,索引值为index的子元素：nth-child(index)</p>
<p>​           :nth-child(n) 选择器选取属于其父元素的<strong>不限类型</strong>的第 n 个子元素的所有元素。</p>
<p>​            <img src="http://xy.liruoning.cn/images/24-jquery-14.png" style="zoom:50%;" /></p>
<p>​        4)   匹配每个父元素的第一个子元素：first-child</p>
<p>​         ：first和：first-child的区别</p>
<p>​         ：first:<strong>总体第一个元素</strong></p>
<p>​         ：first-child:<strong>每个子类中的第一个元素</strong></p>
<p>​            <img src="http://xy.liruoning.cn/images/24-jquery-15.png" style="zoom:50%;" /></p>
<p>​         <img src="http://xy.liruoning.cn/images/24-jquery-16.png" style="zoom:67%;" /></p>
<p>​       5)   匹配每个父元素的最后一个子元素：last-child</p>
<p>​        ：last和：last-child的区别</p>
<p>​            <img src="http://xy.liruoning.cn/images/24-jquery-17.png" style="zoom:50%;" /></p>
<p>​        <img src="http://xy.liruoning.cn/images/24-jquery-18.png" style="zoom:50%;" /></p>
<p>6)   :nth-of-type(n) 选择器选取属于其父元素的<strong>同类型</strong>的第 n 个子元素的所有元素。</p>
<p>​        <img src="http://xy.liruoning.cn/images/24-jquery-19.png" style="zoom:67%;" /></p>
<h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4><p>这是选择器的第一步后面还要更新，而且不会拖~</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP实现链表</title>
    <url>/2020/02/16/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h4 id="事因"><a href="#事因" class="headerlink" title="事因"></a>事因</h4><p>​        在大二的时候学了数据结构（C版），当时学的时候完成了老师给的实验作业，也基本过了一遍。但是过了一年有些理论没怎么用也忘记了不少，在学校期间自己也是掌握了PHP比较擅长的语言。所以就想在网上找些例子重新捡起知识点，但是没有找到特别合适的，所以自己就想写一下这些数据结构的算法，供大家参考也可以相互交流学习。</p>
<a id="more"></a>
<h4 id="链表的基础"><a href="#链表的基础" class="headerlink" title="链表的基础"></a>链表的基础</h4><ul>
<li>首先从链表开始讲起</li>
</ul>
<h4 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h4><p>   第一个问题：什么是链表？？？</p>
<p>   <strong>解答：</strong></p>
<p>​    ①链表是一种<strong>真正的动态数据结构</strong>（最简单的一种）</p>
<p>​    ②数据存储在一个节点中（Node）中（通常由两部分组成一部分存储数据本身，另一部分存储下一个几点的信息）</p>
<p>​    <strong>优点</strong>：真正的动态，不需要处理固定容量的问题。</p>
<p>​    <strong>缺点</strong>:  丧失了访问的随机性</p>
<h4 id="链表的简单实现"><a href="#链表的简单实现" class="headerlink" title="链表的简单实现"></a>链表的简单实现</h4><img src="http://xy.liruoning.cn/images/1-lianbiao-1.png" style="zoom:67%;" />

<p>下面是链表实现在代码附带注释，可以更好的理解。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  $e; <span class="comment">//存储的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  $next; <span class="comment">//下一个结点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//关于$e 和 $next 初始值为null分三种情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ①用户只传来了 $e这个参数 $next 默认为null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ②用户传来了 $e 和 $next 的值这时候直接赋值就可以了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ③ 用户什么都没传 $e 和 $next 分别都为null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($e=null,$next=null)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;e = $e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;next=$next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linklist</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span>  $dummyHead;  <span class="comment">//虚拟头节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span>  $size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($head=null)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;dummyHead=<span class="keyword">new</span> Node($head);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;size=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 得到链表中元素的个数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSize</span><span class="params">()</span>: <span class="title">int</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//链表是否为空</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">isEmpty</span><span class="params">()</span>: <span class="title">bool</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size==<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//在链表的index(0-based)位置添加一个元素 e</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $index,$e )</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($index&lt;<span class="number">0</span>||$index&gt;<span class="keyword">$this</span>-&gt;size)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">echo</span> <span class="string">"参数不合法"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//如果插入的节点节点在链表的头</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $prev = <span class="keyword">$this</span>-&gt;dummyHead;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$index;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $prev = $prev-&gt;next;  <span class="comment">//照到要插入节点的前一个节点的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $node = <span class="keyword">new</span>  Node($e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $node-&gt;next=$prev-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $prev-&gt;next=$node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//在链表头添加一个新的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">addHead</span><span class="params">($e)</span>: <span class="title">void</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">$this</span>-&gt;add(<span class="number">0</span>,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//在链表的末尾插入一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">addLast</span><span class="params">($e)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">$this</span>-&gt;add(<span class="keyword">$this</span>-&gt;size,$e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//获得第index位置的元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">get</span><span class="params">(int $index)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($index&lt;<span class="number">0</span>||$index&gt;<span class="keyword">$this</span>-&gt;size)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> <span class="string">"参数不合法"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $cur = <span class="keyword">$this</span>-&gt;dummyHead-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$index;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $cur=$cur-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $cur-&gt;e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//获得链表的第一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//获得链表的最后一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLast</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;size<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//修改链表的第index位置的元素为e</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(int $index,$e)</span>: <span class="title">void</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($index&lt;<span class="number">0</span>||$index&gt;<span class="keyword">$this</span>-&gt;size)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> <span class="string">"参数不合法"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $cur =<span class="keyword">$this</span>-&gt;dummyHead-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$index;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $cur = $cur-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $cur-&gt;e=$e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 查找某个节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">contains</span><span class="params">($e)</span>:<span class="title">bool</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $cur = <span class="keyword">$this</span>-&gt;dummyHead-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>($cur-&gt;next!=<span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> ($cur-&gt;e == $e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $cur=$cur-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>  <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//删除index处的节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delNode</span><span class="params">(int $index)</span>: <span class="title">bool</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($index&lt;<span class="number">0</span>||$index&gt;<span class="keyword">$this</span>-&gt;size)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> <span class="string">"参数不合法"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $prev = <span class="keyword">$this</span>-&gt;dummyHead;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$index;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $prev=$prev-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $retNode = $prev-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $prev-&gt;next=$retNode-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $retNode = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//删除第一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delFirst</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;delNode(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//删除最后一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delLast</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;delNode(<span class="keyword">$this</span>-&gt;size<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $cur = <span class="keyword">$this</span>-&gt;dummyHead-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>($cur-&gt;next!==<span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">echo</span> $cur-&gt;e.<span class="string">"-&gt;"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $cur=$cur-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> $cur-&gt;e.<span class="string">"-&gt;NULL"</span>.<span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="链表来实现栈"><a href="#链表来实现栈" class="headerlink" title="链表来实现栈"></a>链表来实现栈</h4><p> 使用链表来实现栈，只对链表的头节点进行操作头节点为栈顶（top）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkStack</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> $list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;list=<span class="keyword">new</span> Linklist();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSize</span><span class="params">()</span>: <span class="title">int</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>  <span class="keyword">$this</span>-&gt;list-&gt;getSize();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span><span class="params">()</span>: <span class="title">bool</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;list-&gt;isEmpty();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//这里我把链表头当作栈顶因为 在链表头操作是O(1)级别的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span><span class="params">($e)</span>: <span class="title">void</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;list-&gt;addHead($e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//弹出栈顶元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pop</span><span class="params">()</span>: <span class="title">void</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;list-&gt;delFirst();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//查看栈顶元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;list-&gt;getFirst();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span><span class="params">()</span>: <span class="title">void</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">echo</span> <span class="string">"Stack:top "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">$this</span>-&gt;list-&gt;toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="利用链表来实现队列"><a href="#利用链表来实现队列" class="headerlink" title="利用链表来实现队列"></a>利用链表来实现队列</h4><p>​        使用链表来实现队列，如果还是像上边那种结构一样，当我们在队尾插入，元素的时候要遍历整个链表为O(n)级别的复杂度。所以我们引入了<code>tail</code>让它始终指向最后一个元素。当插入元素是直接改变tail的值就可以实现O(1)。</p>
<p><img src="http://xy.liruoning.cn/images/1-lianbiao-2.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  $e; <span class="comment">//存储的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  $next; <span class="comment">//下一个结点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//关于$e 和 $next 初始值为null分三种情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ①用户只传来了 $e这个参数 $next 默认为null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ②用户传来了 $e 和 $next 的值这时候直接赋值就可以了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ③ 用户什么都没传 $e 和 $next 分别都为null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($e=null,$next=null)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;e = $e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;next=$next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkListQueue</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> $head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> $tail;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> $size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;head=<span class="keyword">new</span> Node();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;tail=<span class="keyword">new</span> Node();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;size=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//获得队列的长度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSize</span><span class="params">()</span>:<span class="title">int</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>  <span class="keyword">$this</span>-&gt;size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//队列是否为空</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span><span class="params">()</span>:<span class="title">bool</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>  <span class="keyword">$this</span>-&gt;size==<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//入队操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">enqueue</span><span class="params">($e)</span>:<span class="title">void</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;tail-&gt;e==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;tail=<span class="keyword">new</span> Node($e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;head=<span class="keyword">$this</span>-&gt;tail;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;tail-&gt;next=<span class="keyword">new</span> Node($e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;tail=<span class="keyword">$this</span>-&gt;tail-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">$this</span>-&gt;size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//出队操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;isEmpty())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> <span class="string">"队列为空"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $retNode = <span class="keyword">$this</span>-&gt;head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;head=<span class="keyword">$this</span>-&gt;head-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $retNode-&gt;next=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//当队列中只有一个元素的时候</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;head==<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;tail==<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//查看队首元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFront</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isEmpty())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> <span class="string">"队列为空"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;head-&gt;e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toString</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $cur = <span class="keyword">$this</span>-&gt;head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"Queue:Front "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> ($cur-&gt;next!=<span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> $cur-&gt;e.<span class="string">" "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $cur=$cur-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> $cur-&gt;e.<span class="string">" tail\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4><p>上边是PHP实现链表的基本操作，近几天还会更新一篇。希望大家积极发表想法，共同学习🤗。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP网络协议基本知识点</title>
    <url>/2020/02/15/38-http%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;在这篇blog中讲述了http的状态码，常见状态码代表什么意思，OSI七层模型各自的工作，http的工作原理，常见的请求方法，常见的网络协议的端口号等内容。</p>
<a id="more"></a>

<h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><p><strong>状态码五大类：</strong></p>
<ol>
<li>1XX 表示接收的请求正在处理</li>
<li>2XX 表示请求正常处理完毕</li>
<li>3XX  表示重定向(客户端需要附加操作才可以完成重启)</li>
<li>4XX  客户端错误</li>
<li>5XX  服务器端错误</li>
</ol>
<p><strong>常见的状态码：</strong></p>
<ol>
<li><p>2XX</p>
<p>200  代表的是 OK</p>
<p>204  服务器的响应已经<strong>成功</strong>处理，在<strong>实体报文</strong>中<strong>不含</strong>响应<strong>内容</strong></p>
</li>
</ol>
<p>​    206 表示服务器端已经处理了部分的GET请求。</p>
<ol>
<li><p>3XX</p>
<p>301  表示永久的重定向</p>
<p>302  临时的重定向(返回的页面告诉浏览器到另外一个url取资源)</p>
<p>303  请求的资源存在另一个URL应使用请求定向请求对应的URL</p>
<p>304  客户端发送附带条件的请求资源的时候服务器端允许请求资源，但因满足请求。未发生，服务端直接返回304。</p>
<p>307  临时重定向</p>
</li>
<li><p>4XX</p>
<p>400  客户端的错误（请求报文中存在语法错误）</p>
<p>401  发送的请求要有HTTP认证的认证信息</p>
<p>403   禁止访问, 即告诉浏览器，你没有权限访问该资源</p>
<p>404  not found  没有该资源.</p>
</li>
</ol>
<ol start="4">
<li><p>5XX </p>
<p>500 服务器端的错误</p>
<p>503  正在处于超负载、服务器在停机维护</p>
</li>
</ol>
<h4 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h4><ol>
<li>应用层 ：为应用程序提供服务并管理程序之间的通信’SMTP、FTP、HTTP等协议</li>
<li>表示层 ：数据的格式转换、加密解密、压缩解压</li>
<li>会话层 :  建立管理和断开通信链接，实现数据同步</li>
<li>传输层 :  为数据提供可靠和不可靠的端到端传输，TCP,UDP协议属于这一层 </li>
<li>网络层 ：负责地址管理、路由选择和拥塞控制，该层最知名的是IP协议</li>
<li>数据链路层：将数据分割成帧，负责MAC地址的<strong>寻址</strong>、<strong>差错效验</strong>和<strong>信息纠正</strong>，<strong>以太网</strong>属于这一层</li>
<li>物理层 ：管理最基础的传输通道，建立物理连接，并提供物理链路所需的机械电器功能和过程等特性</li>
</ol>
<h4 id="HTTP协议的特点"><a href="#HTTP协议的特点" class="headerlink" title="HTTP协议的特点"></a>HTTP协议的特点</h4><ol>
<li>基于B/S模型</li>
<li>通信开销小、简单快速、传输成本低</li>
<li>使用灵活、可使用超文本<strong>传输协议</strong></li>
<li>节省传输时间</li>
<li>无状态</li>
</ol>
<h4 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h4><p>客户端发送请求给服务器，这时候创建一个TCP连接，指定端口，连接服务器。</p>
<p>服务器端监听客户端的请求，一但监听到请求信息，就会分析请求内容然后，响应相应的状态和数据内容。</p>
<h4 id="HTTP常见的响应头"><a href="#HTTP常见的响应头" class="headerlink" title="HTTP常见的响应头"></a>HTTP常见的响应头</h4><p>Content-Type：<strong>内容</strong>的MIME类型（text/html）</p>
<p>Accept:<strong>可接受</strong>的MIME类型(image/png,image/gif;q=0.8)</p>
<p>Origin:最初的请求来源于哪里，主要用于Post请求</p>
<p>Cookie: HTTP发起时发送给服务端Cookie的值。</p>
<p>Cache-Control: 指定请求和响应的缓存机制</p>
<p>User-Agent:用户的代理信息，列入操作系统，浏览器的名称和版本等。（Mozilla/5.0(iPhone; CPU iPhone OS 9_1 like Mac OS X)）</p>
<p>Referrer(Referer):上一个页面的地址(<a href="https://www.lrnjy.club" target="_blank" rel="noopener">https://www.lrnjy.club</a>)</p>
<p>X-Forworded-For:  请求端真实的IP</p>
<p>Access-Control-Allow-Origin:跨域的时候用允许特定域名的请求。</p>
<p>Last-Modified: 最后的响应时间。</p>
<h4 id="HTTP协议的请求方法"><a href="#HTTP协议的请求方法" class="headerlink" title="HTTP协议的请求方法"></a>HTTP协议的请求方法</h4><ol>
<li><strong>GET:</strong> 请求主要用于查询操作(对数据的读取)的请求是<code>幂等的</code></li>
<li><strong>HEAD:</strong><code>HEAD</code>方法与<code>GET</code>方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应<code>HEAD</code>请求时不会回传资源的内容部分(响应主体）。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。<code>HEAD</code>方法常被用于客户端查看服务器的性能。</li>
<li><strong>OPTIONS:</strong> <code>OPTIONS</code>请求与<code>HEAD</code>类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’*’来代替资源名称，向服务器发送<code>OPTIONS</code>请求，可以测试服务器功能是否正常。JavaScript的<a href="http://itbilu.com/javascript/js/VkiXuUcC.html" target="_blank" rel="noopener">XMLHttpRequest</a>对象进行<code>CORS</code>跨域资源共享时，就是使用<code>OPTIONS</code>方法发送嗅探请求，以判断是否有对指定资源的访问权限</li>
<li><strong>POST：</strong>对于指定的资源提交数据，请求服务器进行处理。如：表单的提交，文件的上传，POST可能会对资源修改或者创建所以是<code>非幂等的</code></li>
<li><strong>PUT:</strong><code>PUT</code>请求会向指定资源位置上传其最新内容，<code>PUT</code>方法是<code>幂等</code>的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。</li>
<li><strong>DELETE:</strong><code>DELETE</code>请求用于请求服务器删除所请求<code>URI</code>（统一资源标识符，Uniform Resource Identifier）所标识的资源。<code>DELETE</code>请求后指定资源会被删除，<code>DELETE</code>方法也是<code>幂等</code>的。</li>
<li><strong>TRACE</strong>:<code>TRACE</code>请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。</li>
</ol>
<h5 id="GET和POST区别"><a href="#GET和POST区别" class="headerlink" title="GET和POST区别"></a>GET和POST区别</h5><ol>
<li><strong>后退按钮刷新：</strong> GET在浏览器选择后退按钮时<strong>无害</strong>，POST则会<strong>重新提交表单</strong></li>
<li><strong>书签:</strong> GET可以<strong>被收藏</strong>为<strong>书签</strong>，POST<strong>不可能被收藏为书签</strong>。</li>
<li><strong>浏览器缓存：</strong>GET请求可以被<strong>浏览器缓存</strong>，POST<strong>不会被浏览器缓存</strong>。</li>
<li><strong>编码类型：</strong> GET application/x-www-form-urlencoded , POST application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</li>
<li><strong>历史记录：</strong> GET　参数保留在浏览器历史记录中，ＰＯＳＴ参数不会保留到历史记录中</li>
<li><strong>请求数据的长度</strong>：GET发送数据时，请求的URL在地址栏中，有长度的限制，（最大长度2048和字符） ，POST则不会有限制</li>
<li><strong>对数据类型的限制</strong>：GET只允许ASCll字符，POST无限制也允许二进制</li>
<li><strong>安全性</strong>：POST比GET更安全，因为GET请求的参数直接暴露在URL中所以一些比较敏感的信息就不要让GET来传输！</li>
<li><strong>可见性</strong>：GET 数据在url中是可见的， POST不可见。</li>
</ol>
<h4 id="HTTPS的工作原理"><a href="#HTTPS的工作原理" class="headerlink" title="HTTPS的工作原理"></a>HTTPS的工作原理</h4><ol>
<li>HTTS是基于SSL/TLS的HTTP协议，所有的HTTP数据都是在SSL/TLS协议的封装之上传输的。</li>
<li>HTTPS协议在HTTP协议的基础上，添加了SSL/TLS握手以及数据的加密传输，也属于应用层。</li>
</ol>
<h4 id="常见的网络协议"><a href="#常见的网络协议" class="headerlink" title="常见的网络协议"></a>常见的网络协议</h4><ol>
<li>FTP:文件传输协议 （21端口）</li>
<li>Telnet: 用户远程登陆的端口，通过这个协议用户可以以一种基于DOC下的服务。（23端口）</li>
<li>SMTP:简单邮件的传输协议(25端口)</li>
<li>POP3:接收电子邮件（110端口）</li>
<li>HTTP:超文本传输协议。（80端口）</li>
<li>DNS:域名解析协议（53端口）</li>
</ol>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>php开发环境&amp;配置</title>
    <url>/2020/02/14/39-php%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83&amp;%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="PHP运行原理"><a href="#PHP运行原理" class="headerlink" title="PHP运行原理"></a>PHP运行原理</h4><p> <strong>CGI</strong> : 脚本解析器和webserver 之间的桥梁。</p>
<a id="more"></a>
<p> <strong>FastCGI</strong>:</p>
<ul>
<li><p><strong>出现的背景</strong></p>
<p>在早期的时候每当用户请求CGI的时候，EB服务器就请求操作系统生成一个新的CGI解释器进程(如php-cgi.exe)。在一个进程处理完毕后就会被kill掉。在访问量逐渐增大的的时候，其中的弊端就出现了，这个时候出现了FastCGI</p>
</li>
<li><p><strong>FastCGI</strong>:</p>
<p>FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次（这是CGI最为人诟病的fork-and-execute 模式）。</p>
</li>
</ul>
<p><strong>PHP-FPM</strong>（FastCGI Process Manager）:</p>
<ol>
<li><p>PHP-FPM负责管理一个进程池，来处理来自Web服务器的请求</p>
</li>
<li><p>进程分为master 进程 和 work进程，一般master进程只有一个来监听端口接受来自webserver的请求。</p>
</li>
</ol>
<h4 id="php常见配置"><a href="#php常见配置" class="headerlink" title="php常见配置"></a>php常见配置</h4><ol>
<li>register_globals: 是否允许注册全局变量</li>
<li>allow_url_fopen: 是否允许远程打开文件</li>
<li>allow_url_include: 是否允许远程包含文件</li>
<li>date.timezone :设置时区</li>
<li>display_errors:是否显示错误</li>
<li>error_reporting:错误报告的级别</li>
<li>safe_model:是否开启安全模式</li>
<li>upload_max_filesize: 允许上传的最大文件的大小</li>
<li>max_file_uploads: 最大的上传文件的数量是多少</li>
<li>post_max_size:提交post数据的最大大小是多大  </li>
</ol>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的索引基础更新</title>
    <url>/2020/02/13/36-mysql%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h4 id="索引的定义"><a href="#索引的定义" class="headerlink" title="索引的定义"></a>索引的定义</h4><a id="more"></a>
<ol>
<li>索引就类似于书记的目录，我们看书如果高效率的定位到自己想看的内容，就是通过目录然后对应到相应的页码</li>
<li>索引也是一样，每次我们查找数据的时候，通过查找索引找到对应的值，然后通过对应的值找到对应的行</li>
</ol>
<h4 id="索引的优势"><a href="#索引的优势" class="headerlink" title="索引的优势"></a>索引的优势</h4><ol>
<li>大大减小数据库需要扫面的数据量</li>
<li>帮助服务器避免排序和临时表</li>
<li>将随机I/O ，变成顺序I/O</li>
<li>提高查询速度，降低写的速度，占用磁盘</li>
</ol>
<h4 id="索引对数据库性能的影响"><a href="#索引对数据库性能的影响" class="headerlink" title="索引对数据库性能的影响"></a>索引对数据库性能的影响</h4><ol>
<li>对于<strong>小型表</strong>来说索引并不会起到很的作用，有的时候可能会减小效率</li>
<li><strong>中大型表</strong>，索引还是比较有效的</li>
<li><strong>特大型表</strong>，建立索引的代价也会随之增长，可以使用<strong>分区技术</strong>来解决</li>
</ol>
<h4 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h4><ol>
<li>普通索引（index）：最基本的索引没有任何的约束</li>
<li>唯一索引 (unique)：与普通索引类似但是有<strong>唯一性</strong>的约束</li>
<li>主键索引 ：特殊的唯一索引，不允许有空值</li>
<li>组合索引：将多个列，组合到一起建立索引</li>
<li>外键索引：只有InnoDB表引擎才可以使用外键索引，保证数据的一致性完整性和实现级联操作</li>
<li>全文索引：MySQL自带的全文索引只能用于MyISAM,并且只能对英文进行全文索引</li>
</ol>
<h5 id="唯一索引和主键索引的区别"><a href="#唯一索引和主键索引的区别" class="headerlink" title="唯一索引和主键索引的区别"></a>唯一索引和主键索引的区别</h5><ol>
<li>一个表只能有一个主键索引，可以有多个唯一多余</li>
<li>主键索引一定是唯一索引但是，唯一索引不一定是主键索引</li>
<li><strong>主键</strong>可以和外键构成参照完整性约束，防止数据的不一致</li>
</ol>
<h4 id="MySQL索引的创建原则"><a href="#MySQL索引的创建原则" class="headerlink" title="MySQL索引的创建原则"></a>MySQL索引的创建原则</h4><ol>
<li>最适合建立索引的列是where后面的列，还有就是子连接语句后面的列 on,而不是select后面的列</li>
<li>索引列的基数越大，索引的效果越好</li>
<li>对字符串创建索引应该定义一个前缀长度，可以节省大量的索引空间</li>
<li>根据情况创建复合索引（根据章和节创建复合索引）</li>
<li>尽量避免创建过多的索引，索引会占用额外的空间，降低写操作</li>
<li>主键尽可能选择较短的数据类型，可以减少索引的磁盘占用率，提高查询效率</li>
</ol>
<h4 id="MySQL建立索引应该注意的一些事儿"><a href="#MySQL建立索引应该注意的一些事儿" class="headerlink" title="MySQL建立索引应该注意的一些事儿"></a>MySQL建立索引应该注意的一些事儿</h4><ol>
<li>使用复合索引的时候注意左前缀原则</li>
<li>like,查询的时候% 不能放在前面这样索引会失效，可以使用全文索引</li>
<li>is null 列可以使用全文索引</li>
<li>MySQL估计使用全文索引比全表索引更慢的时候会，放弃索引</li>
<li>如果or前面的索引列有索引，or后面的没有索引,索引就不会被用到</li>
<li>列类型为字符串类型，where 条件给一个整型 索引不会触发</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL相关基础知识点的回顾</title>
    <url>/2020/02/12/35-MySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h4 id="MySQL的数据类型"><a href="#MySQL的数据类型" class="headerlink" title="MySQL的数据类型"></a>MySQL的数据类型</h4><a id="more"></a>
<p>①<strong>整数类型：</strong></p>
<p>tinyint(1)、smallint(2)、mediumint(3)、int(4)、bigint(8)</p>
<p>属性：unsigned</p>
<p>②<strong>实数类型：</strong></p>
<p>float、double、decimal(可以存储比Bigint还大的整数；可以用于存储精确的小数)</p>
<p>float和double支持使用标准的浮点进行近似计算</p>
<p>③<strong>字符串类型:</strong></p>
<p>varchar、char、text、blob.</p>
<p>varchar：</p>
<ol>
<li>类型用于存储可变长的字符串。它比起定长的类型更节省空间。</li>
<li>使用1或2个额外的字节记录字符串的长度，当小于255字节、使用一个字节表示，否则用2两个。</li>
<li>如果存储内容超多指定长度就会被截断。</li>
</ol>
<p>char:</p>
<ol>
<li>是定长、根据定义的字符串的长度分配足够的空间。</li>
<li>会根据需要采用空格进行填充以方便比较。</li>
<li>适合存储很短的字符串或者所有值都接近同一个长度。</li>
<li>超出定义的长度会被截断。</li>
</ol>
<p>varchar  <strong>VS</strong>  char:</p>
<ol>
<li>对于经常变更的数据char 比 varchar更好 ，char不容易产生碎片化</li>
<li>对于非常短的列，char比varchar 在存储空间上更有效率</li>
<li>只分配真正需要的空间，更长的列会消耗更多的内存</li>
</ol>
<p>Blob &amp;&amp; Text:</p>
<ol>
<li>尽量避免使用，查询会使用临时表，导致严重的性能开销</li>
</ol>
<p>④<strong>枚举类型（enum）</strong></p>
<ol>
<li>有时可以使用枚举代替常用的字符串类型</li>
<li>把不重复的集合存储成一个预定义的集合非常的紧凑，把列表值压缩到一个或两个字节。</li>
<li>内部存储的是整数</li>
</ol>
<p>注意：</p>
<ol>
<li>尽量避免使用数字作为枚举的常量，比较混乱。</li>
<li>排序是按照内部存储的整数进行排序的</li>
<li>枚举表会使表的大小<strong>大大减小</strong></li>
</ol>
<p>⑤<strong>日期和时间类型</strong></p>
<p>​    timestamp、datetime </p>
<ol>
<li>尽量使用timestamp比datetime效率高</li>
<li>用<strong>整数</strong>保存时间戳的格式通常不方便处理，所以我们使用timestamp</li>
<li>如果需要存储微妙，可以使用bigint 存储</li>
</ol>
<h4 id="MySQL列属性"><a href="#MySQL列属性" class="headerlink" title="MySQL列属性"></a>MySQL列属性</h4><p>auto_increment、default、not null 、zerofill</p>
<h4 id="MySQL的基础操作"><a href="#MySQL的基础操作" class="headerlink" title="MySQL的基础操作"></a>MySQL的基础操作</h4><p>MySQL的连接和关闭：mysql -u(用户名) -p（密码） -h（主机） -P（端口）</p>
<h4 id="MySQL表引擎"><a href="#MySQL表引擎" class="headerlink" title="MySQL表引擎"></a>MySQL表引擎</h4><h5 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h5><ol>
<li>支持表锁和行级锁</li>
<li>支持外键</li>
<li>索引和数据存储在一个文件中</li>
<li>支持事务</li>
</ol>
<h5 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h5><ol>
<li>只支持表锁</li>
<li>索引和数据存储在一个文件中</li>
<li>不支持事务</li>
<li>不支持外键</li>
</ol>
<h5 id="其它表引擎"><a href="#其它表引擎" class="headerlink" title="其它表引擎"></a>其它表引擎</h5><p>Archive、Blackhole、CSV、Memory</p>
<h4 id="MySQL的锁机制"><a href="#MySQL的锁机制" class="headerlink" title="MySQL的锁机制"></a>MySQL的锁机制</h4><p><strong>读锁</strong></p>
<p>共享的、不堵塞、多个用户可以同时读一个资源、互不相干</p>
<p><strong>写锁</strong></p>
<p>排他的，一个写锁会阻塞其他的写锁和读锁，这样可以只允许一个人写入，防止其他用户读取正在写入的资源。</p>
<p><strong>锁粒度</strong></p>
<p>表锁，<strong>系统开销小</strong>会锁定整张表，MyISAM使用表锁</p>
<p>行级锁，系统开销大，最大程度支持并发，InnoDB支持行级锁</p>
<h4 id="MySQL的事务处理"><a href="#MySQL的事务处理" class="headerlink" title="MySQL的事务处理"></a>MySQL的事务处理</h4><ol>
<li>事务处理的表引擎经典的就是InnoDB,事务处理是由底层的引擎实现的 服务器层不管事务处理。</li>
<li>同一个事物不能使用多个表引擎</li>
<li>对于不支持事务的引擎，开启事务MySQL也不会提醒或报错</li>
</ol>
<h4 id="MySQL的存储过程"><a href="#MySQL的存储过程" class="headerlink" title="MySQL的存储过程"></a>MySQL的存储过程</h4><ol>
<li>将一条或多条MySQL的语句保存到一个MySQL集合中</li>
<li>可以在存储过程实现创建表、更新表、删除等操作</li>
<li>存储过程业务逻辑和流程的集合</li>
</ol>
<h4 id="MySQL的触发器"><a href="#MySQL的触发器" class="headerlink" title="MySQL的触发器"></a>MySQL的触发器</h4><p>来保证数据完整性的一种方法，于表事件相关的特殊存储过程。</p>
<p>可以通过数据库的相关表实现级联更改</p>
<p>监控某张表的更改自动做处理</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP面向对象部分回顾总结</title>
    <url>/2020/02/12/34-php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h4 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h4><p>封装、继承、多态</p>
<a id="more"></a>
<h4 id="php类权限控制修饰符"><a href="#php类权限控制修饰符" class="headerlink" title="php类权限控制修饰符"></a>php类权限控制修饰符</h4><ul>
<li><p>public:有最高权限，在类外和类的内部都可以使用。</p>
</li>
<li><p>protected:在类的内部和子类中可以使用。</p>
</li>
<li><p>private:只能在类的内部使用</p>
</li>
</ul>
<h4 id="面向对象的继承"><a href="#面向对象的继承" class="headerlink" title="面向对象的继承"></a>面向对象的继承</h4><p>PHP的继承为<strong>单一继承</strong>，只能继承一个类。</p>
<p>方法的重写。</p>
<p>例子：父类的函数是否被重写。调用parent则不会被重写，在类函数在父类的基础上进行，子类的操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">father</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">test</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"this is father"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">father</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">test</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"this is child"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$p = <span class="keyword">new</span> child();</span></pre></td></tr><tr><td class="code"><pre><span class="line">$p-&gt;test(); <span class="comment">//this is child</span></span></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">father</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">test</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"this is father"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">father</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">test</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">parent</span>::test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"this is child"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$p = <span class="keyword">new</span> child();</span></pre></td></tr><tr><td class="code"><pre><span class="line">$p-&gt;test();  <span class="comment">//this is fatherthis is child</span></span></pre></td></tr></table></figure>

<h4 id="抽象类的定义"><a href="#抽象类的定义" class="headerlink" title="抽象类的定义"></a>抽象类的定义</h4><p>①如果类里面有抽象，这个类<strong>必须</strong>定义成抽象类（没有抽象方法也可以定义成抽象类）</p>
<p>②<strong>接口</strong>（<strong>interface</strong> ）里面的方法都是抽象的</p>
<h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><p><strong>__get()</strong>:当用户访问<strong>不可访问的属性</strong>（不存在或者为protected 或者 private）时被调用</p>
<p><strong>__set():</strong>当用户去给不可访问的属性进行赋值的时候被调用</p>
<p><strong>__isset()</strong>:当用户利用isset或者empty()去判断不可访问的属性的时候被调用</p>
<p><strong>__unset()</strong>:当用户去<strong>销毁</strong>一个不可访问的一个属性的时候被调用</p>
<p><strong>__toString()</strong>:  当我们希望将一个对象当做字符串来输出时，就会触发__toString魔术方法(ps:当echo 一个类的对象的时候).</p>
<p><strong>__clone()</strong>:当我们需要将一个对象完全的赋值一份， 保证两个对象的属性和属性值一样，但是他们的数据库空间独立，则可以使用对象克隆。</p>
<p><strong>__call()</strong>:当我们调了一个不可以访问的成员方法时，__call魔术方法就会被调用.</p>
<h4 id="类的知识点"><a href="#类的知识点" class="headerlink" title="类的知识点"></a>类的知识点</h4><ul>
<li>定义一个类如果<strong>不给属性赋值</strong>默认是<strong>NULL</strong>类型</li>
<li>类名<strong>不区分大小</strong>写  </li>
<li><strong>静态变量</strong>是属于所有对象， 因此可以被所有的对象共享.</li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Session和Cookie回顾总结</title>
    <url>/2020/02/11/33-php%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h4 id="为什么要使用会话控制"><a href="#为什么要使用会话控制" class="headerlink" title="为什么要使用会话控制"></a>为什么要使用会话控制</h4><p>因为HTTP是无状态的，不能维护两个事务之间的状态，同一个用户请求一个页面两次，http不会认为这两请求都来自同一个用户。</p>
<a id="more"></a>

<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><h5 id="cookie的基本操作"><a href="#cookie的基本操作" class="headerlink" title="cookie的基本操作"></a>cookie的基本操作</h5><p><strong>创建cookie</strong></p>
<p>setcookie($name,$value,$expire,$$path,$domain,$secure)</p>
<p><strong>cookie读取</strong></p>
<p>$_COOKIE</p>
<p><strong>cookie修改</strong></p>
<p>如果给同一个cookie变量重新赋值，就是修改的意思，而且cookie的有效期会从修改的时间重新计算</p>
<p><strong>cookie的删除</strong></p>
<p>①让cookie的时间过期</p>
<p>setcookie(“name”,””,time()-1)</p>
<p>②再将$_COOKIE超全局数组中的cookie变量删除</p>
<p>unset($_COOKIE[‘name’])</p>
<h5 id="cookie的优点和缺点"><a href="#cookie的优点和缺点" class="headerlink" title="cookie的优点和缺点"></a>cookie的优点和缺点</h5><p><strong>优点：</strong></p>
<p>cookie存储在客户端不占用服务器的资源</p>
<p><strong>缺点：</strong></p>
<p>cookie是存储在客户端信息不是很安全，并且用户可以禁止cookie的使用（一但禁止就没有办法保存用户的信息了）。</p>
<h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>Session是基于Cookie的Session的信息是存储在<strong>服务器</strong>的一个文件里面，</p>
<h5 id="Session的基本操作"><a href="#Session的基本操作" class="headerlink" title="Session的基本操作"></a>Session的基本操作</h5><p><strong>Session的创建</strong></p>
<p>①开启session用session_start()</p>
<p>②$_SESSION数组对Session进行赋值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">$_SESSION[<span class="string">'name'</span>] = <span class="keyword">array</span>(<span class="string">'马六'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$_SESSION[<span class="string">'age'</span>] = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$_SESSION[<span class="string">'sex'</span>] = <span class="string">'nan'</span>;</span></pre></td></tr></table></figure>

<p><strong>Session的读取</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($_SESSION[<span class="string">'name'</span>]);</span></pre></td></tr></table></figure>

<p><strong>Session的删除</strong></p>
<p>①删除<strong>单个变量</strong></p>
<p>直接用 unset($_SESSION[‘name’])</p>
<p>②删除全部的数据</p>
<p>利用foreach循环删除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_start();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($_SESSION <span class="keyword">as</span> $k=&gt;$v)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">unset</span>($_SESSION[$k]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>③清空Session数组</p>
<p>$_SESSION=[]</p>
<p>④将Session文件删除</p>
<p>session_destroy()</p>
<h5 id="Session的一些配置"><a href="#Session的一些配置" class="headerlink" title="Session的一些配置"></a>Session的一些配置</h5><ul>
<li><strong>session.auto_start()</strong>。是否自动开启session</li>
<li><strong>session.cookie_domain</strong>。存储cookie的有效域名</li>
<li><strong>session.cookie_lifetime</strong>。cookie的过期时间</li>
<li><strong>session.cookie_path</strong>。设置session cookie的有效路径</li>
<li><strong>session_name</strong>。设置存储在客户端的sessionid的键名</li>
<li><strong>session.save_path</strong>。session文件在服务器存储在那个路径下</li>
<li><strong>session.use_cookies</strong>。是否使用cookie来传递我们的cookie</li>
<li><strong>session.use_trans_sid</strong>。是否使用传递的方式来传递sessionid</li>
<li><strong>session.gc_probability</strong>。垃圾回收机制 garbase collection 该项是除数</li>
<li><strong>session.gc_divisor =1000</strong>。被除数，垃圾回收机制，一旦说session过期了，删除该session文件的概率就是 gc_probability/gc_divisor</li>
<li><strong>session.gc_maxkifetime</strong>==1440 。一旦24分钟之内没有做任何操作就会触发垃圾回收机制。</li>
<li><strong>session.save_handler</strong>=file。session存储的句柄</li>
</ul>
<h5 id="Session的优点缺点"><a href="#Session的优点缺点" class="headerlink" title="Session的优点缺点"></a>Session的优点缺点</h5><p><strong>优点</strong></p>
<p>Session的信息安全都是存储在服务器里面的</p>
<p><strong>缺点</strong></p>
<p>占用服务器的资源</p>
<h5 id="Session的传递问题"><a href="#Session的传递问题" class="headerlink" title="Session的传递问题"></a>Session的传递问题</h5><p>当用户禁用掉cookie的时候</p>
<p>使用 session_name()和session_id()来进行传递</p>
<p>①<code>&lt;a href=&quot;1.php?&lt;?php echo session_name().&#39;=&#39;.session_id()&quot;&gt;later&lt;a/&gt;</code></p>
<p>②<code>&lt;a href=&quot;1.php?&lt;?php echo SID;?&gt;&quot;&gt;later&lt;a/&gt;</code></p>
<p>相对而言第二种方法的使用是比较智能的当用户使用cookie的时候SID就为空，当用户禁用cookie的时候SID为session.name=session.id的值。 </p>
<h5 id="Session的存储"><a href="#Session的存储" class="headerlink" title="Session的存储"></a>Session的存储</h5><p>我们可以使用 session_set_save_handler()进行存储的位置的自定义</p>
<p>可以是 MySQL、Memcache、Redis等</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改配置文件，将session存储机制修改为user（自定义）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">ini_set(<span class="string">'session.save_handler'</span>, <span class="string">'user'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//开始自己定义session的存储</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//参数1：就表示session_start的时候，怎么处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//参数2：脚本结束的时候怎么处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//参数3：读取session数据表中数据的函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//参数4：向session数据表写入数据的函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//参数5：销毁session数据表中的数据的函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//参数6：session过期之后的处理函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">session_set_save_handler(<span class="string">'open'</span>, <span class="string">'close'</span>, <span class="string">'read'</span>, <span class="string">'write'</span>, <span class="string">'destroy'</span>, <span class="string">'gc'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">session_start();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//初始化session、session_start时执行的函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">open</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//初始化数据库的链接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $link = @mysql_connect(<span class="string">'127.0.0.1'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mysql_select_db(<span class="string">"php_7"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mysql_query(<span class="string">"set names utf8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//脚本结束的函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">'脚本结束了...'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//从session表读取数据的方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//说明：客户端携带过来session_id,会自动传递到read里面</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">($sess_id)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $sql = <span class="string">"SELECT sess_content FROM session WHERE sess_id='$sess_id'"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $result = mysql_query($sql);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $res = mysql_fetch_assoc($result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $res[<span class="string">'sess_content'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//向session数据表写入数据的函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//说明：当用户$_SESSION['name'] = 'lisi';这样操作的时候，就会把数据写入到session表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($sess_id, $sess_content)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $sql = <span class="string">"INSERT INTO session VALUES('$sess_id','$sess_content',"</span> . time() . <span class="string">")"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> mysql_query($sql);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//destroy,当执行session_destroy()删除文件，现在要删除数据表中的记录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//说明：自动传递浏览器携带的session_id</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">($sess_id)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $sql = <span class="string">"DELETE FROM session WHERE sess_id = '$sess_id'"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> mysql_query($sql);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//当session_start()的时候判断哪些session文件过期了，在这里会判断哪些数据过期了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//说明：会自动把session数据的有效期传递进来</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span><span class="params">($max_lifetime)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $time = time() - $max_lifetime;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $sql = <span class="string">"DELETE FROM session WHERE last_time &lt; $time"</span>;   <span class="comment">//35 36 37 38 39 40</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> mysql_query($sql);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// $_SESSION['name'] = 'zhangsan';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// echo '写入成功';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">session_destroy();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'删除成功'</span>;</span></pre></td></tr></table></figure>

<p>注：参考的一个网课这个实例。</p>
<h4 id="session和cookie的区别"><a href="#session和cookie的区别" class="headerlink" title="session和cookie的区别"></a>session和cookie的区别</h4><p>（1）<strong>存储位置</strong><br>​    ①cookie存储在客户端（浏览器），每次请求是随身携带，在setcookie时创建的<br>​    ②session存储在服务器端，session_start的时候创建的<br>（2）<strong>安全性</strong><br>    ①cookie每次随身携带，安全性不如session高<br>（3）<strong>生命周期：</strong><br>    ①Cookie的生命周期在setcookie时设置的<br>    ②Session的生命周期在配置文件中的gc_maxlifetime设置，但是通过cookie里面携带的PHPSESSID找到的，这个cookie的有效期默认是0秒，也就是说一旦关闭了浏览器，cookie就失效了，下次访问会重新分配新的cookie<br>    ③cookie的生命周期是累计的，session的生命周期是间隔的，以20分钟为例<br>    cookie：1 2  3 4  ….. 20分钟<br>    session：1  2  3  4  ….. 19,如果从创建到第19分钟，重新访问了，会重新计算，也就是重新分配20分钟</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php文件及目录的回顾</title>
    <url>/2020/02/10/32-php%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h4 id="文件读取-写入操作"><a href="#文件读取-写入操作" class="headerlink" title="文件读取/写入操作"></a>文件读取/写入操作</h4><p>fopen()函数：用来打开一个文件，打开时需要指定打开的方式。打开模式 r/r+  w/w+ a/a+ x/x+ b(打开一个二进制文件) t(提供一个转换标记可以透明的把 \n \r)</p>
<a id="more"></a>
<h5 id="文件写入函数"><a href="#文件写入函数" class="headerlink" title="文件写入函数"></a>文件写入函数</h5><p>fwrite()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$file_path = <span class="string">"D:/wamp/www/file/hello.txt"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(file_exists($file_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ($fp=fopen($file_path,<span class="string">"w"</span>))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $con = <span class="string">''</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>;$i&lt;<span class="number">10</span>;$i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $con.=<span class="string">"hello,world\r\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fwrite($fp,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fclose($fp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;br&gt; 创建失败!'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;文件已经存在了"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>fputs():fwrite()的别名</p>
<h5 id="文件内容的读取"><a href="#文件内容的读取" class="headerlink" title="文件内容的读取"></a>文件内容的读取</h5><p>fstat() 通过已打开的文件指针取得<strong>文件信息</strong></p>
<p>以下是获取文件详细信息的两种形式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_full = <span class="string">'d:\wamp\wamp64\www\file\abc.txt'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$fp=fopen($file_full,<span class="string">"r"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(file_exists($file_full))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $file=fstat($fp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">date_default_timezone_set(<span class="string">'PRC'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt; 文件的信息为：'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.<span class="string">'文件的大小为：'</span>.$file[<span class="string">'size'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.<span class="string">"文件创建的时间"</span>.date(<span class="string">'Y-m-d H:m:s'</span>,$file[<span class="string">'ctime'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.<span class="string">"文件修改的时间为："</span>.date(<span class="string">'Y-m-d H:m:s'</span>,$file[<span class="string">'mtime'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.<span class="string">"文件访问的时间："</span>.date(<span class="string">'Y-m-d H:m:s'</span>,$file[<span class="string">'atime'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"~~~~~~~~~~~~~~~~~~~~"</span>.<span class="string">"&lt;br&gt;"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt; 文件的信息为：'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>.<span class="string">"文件的类型"</span>.filetype($file_full);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.<span class="string">'文件的大小为：'</span>.filesize($file_full);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.<span class="string">"文件创建的时间"</span>.filectime($file_full);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.<span class="string">"文件修改的时间为："</span>.filemtime($file_full);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.<span class="string">"文件访问的时间："</span>.fileatime($file_full);</span></pre></td></tr></table></figure>



<p>fread():文件的读取。</p>
<p> 我们是一次性的将内容读入到内存，这样处理大文件不是很好，因此这样我们可以使用第二种读取文件的方式.(可以设置缓冲)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_path = <span class="string">"D:/wamp/www/file/abc.txt"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists($file_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $fp = fopen($file_path,<span class="string">"r"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $file_size = filesize($file_path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = fread($fp,$file_size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose($fp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//str_replace — 子字符串替换</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = str_replace(<span class="string">"\r\n"</span>,<span class="string">"&lt;br&gt;"</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = str_replace(<span class="string">"    "</span>,<span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = str_replace(<span class="string">"\n"</span>,<span class="string">'&lt;br&gt;'</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> $con;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">'文件不存在'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>如果文件比较大的话用下面的方式。</p>
<p>设置缓冲区循环读取</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_path = <span class="string">"D:/wamp/www/file/english.docx"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists($file_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $fp = fopen($file_path,<span class="string">"r"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $buffer = <span class="string">''</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $buffer_size = <span class="number">1024</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = <span class="string">''</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (!feof($fp))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $buffer = fread($fp,$buffer_size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $con.=$buffer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose($fp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = str_replace(<span class="string">"\r\n"</span>,<span class="string">"&lt;br&gt;"</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = str_replace(<span class="string">"    "</span>,<span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = str_replace(<span class="string">"\n"</span>,<span class="string">'&lt;br&gt;'</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> $con;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt; 打开文件失败"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>使用的是最多的. file_get_contents file_put_contents() 这种方式最为简介</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_path = <span class="string">"D:/wamp/www/file/abc.txt"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(file_exists($file_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = file_get_contents($file_path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = str_replace(<span class="string">"\r\n"</span>,<span class="string">"&lt;br&gt;"</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = str_replace(<span class="string">"    "</span>,<span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $con = str_replace(<span class="string">"\n"</span>,<span class="string">'&lt;br&gt;'</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> $con;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"文件不存在"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>fgets — 从文件指针中读取一行</p>
<p>下面我用的案例是读取配置文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_parse_ini_file</span><span class="params">($str)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arr=<span class="keyword">array</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (file_exists($str)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (strcmp(substr($str, <span class="number">-3</span>), <span class="string">"ini"</span>)==<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $fp = fopen($str,<span class="string">"r"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span> (!feof($fp))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $con=fgets($fp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $arr1=explode(<span class="string">"="</span>,$con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $arr[$arr1[<span class="number">0</span>]]=$arr1[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_path = <span class="string">"D:/wamp/www/file/config.ini"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (my_parse_ini_file($file_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var_dump(my_parse_ini_file($file_path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"你传入的并非配置文件"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>fgetc — 从文件指针中读取字符（获取一个字符）</p>
<p>file():可以将一个文件读取到一个数组当中去。</p>
<p>readfile():将内容读取出来并且输出到缓冲区。</p>
<h5 id="文件函数的关闭"><a href="#文件函数的关闭" class="headerlink" title="文件函数的关闭"></a>文件函数的关闭</h5><p>fclose():文件的关闭上面我已经写到过几次了这里就不多加赘述了。</p>
<h5 id="文件的删除"><a href="#文件的删除" class="headerlink" title="文件的删除"></a>文件的删除</h5><p>用的是unlink()函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_path =<span class="string">"D:/wamp/www/file/abc.txt"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(file_exists($file_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (unlink($file_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"删除成功"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"删除失败"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"该文件不存在，无法删除"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="文件名子的修改"><a href="#文件名子的修改" class="headerlink" title="文件名子的修改"></a>文件名子的修改</h5><p>rename()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_path =<span class="string">"D:/wamp/www/file/newhello.txt"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_new_path=<span class="string">"D:/wamp/www/file/戚继光.txt"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_new_path=iconv(<span class="string">"utf-8"</span>,<span class="string">"gbk"</span>,$file_new_path);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(file_exists($file_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (rename($file_path,$file_new_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"修改成功"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"修改失败"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"该文件不存在，无法删除"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>



<h5 id="访问远程文件"><a href="#访问远程文件" class="headerlink" title="访问远程文件"></a>访问远程文件</h5><ul>
<li>开启<strong>allow_url_fopen</strong>只有开启这个才可以利用<strong>fopen</strong>或者<strong>file_get_contents</strong>进行<strong>远程读取</strong>。</li>
<li>HTTP协议的连接只能使用只读。</li>
<li>FTP协议连接可以使用只读或者只写。</li>
</ul>
<h5 id="文件练习题"><a href="#文件练习题" class="headerlink" title="文件练习题"></a>文件练习题</h5><p>不断的往文件开头写入 hello word</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeHello</span><span class="params">($src)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(file_exists($src)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $fileHand = fopen($src,<span class="string">'r+'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $content= <span class="string">'hello word'</span>.fread($fileHand,filesize($src));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rewind($fileHand);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fwrite($fileHand,$content);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fclose($fileHand);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">writeHello(<span class="string">"hello.txt"</span>);</span></pre></td></tr></table></figure>

<h4 id="php对目录的操作"><a href="#php对目录的操作" class="headerlink" title="php对目录的操作"></a>php对目录的操作</h4><h5 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h5><p>创建目录mkdir():</p>
<p>如果想要创建多级目录给mkdir()函数的第三个参数传true</p>
<p>函数的参数形式：</p>
<p>bool <strong>mkdir</strong>     ( string <code>$pathname</code>   [, int <code>$mode</code> = 0777   [, bool <code>$recursive</code> = false   [, resource <code>$context</code>  ]]] )</p>
<ul>
<li><p><code>pathname</code></p>
<p>目录的路径。 </p>
</li>
<li><p><code>mode</code></p>
<p>默认的 mode 是 0777，意味着最大可能的访问权。有关 mode 的更多信息请阅读 （在window下可以被忽略）</p>
</li>
</ul>
<h5 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h5><p>rmdir()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$dir_full_path = <span class="string">'D:/wamp/www/file/dir1'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_dir($dir_full_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (rmdir($dir_full_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"删除目录成功"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"删除目录失败"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"文件目录已存在"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="名称相关的"><a href="#名称相关的" class="headerlink" title="名称相关的"></a>名称相关的</h5><ul>
<li>basename() 返回路径中的文件名部分</li>
</ul>
<p>​     函数的格式：string <strong>basename</strong>    ( string <code>$path</code>   [, string <code>$suffix</code>  ] )</p>
<p>​     参数的解释：</p>
<p>​        path: 一个路径</p>
<p>​        suffix:如果文件名是以 <code>suffix</code> 结束的，那这一部分也会被去掉。</p>
<p> <strong>例子：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"1) "</span>.basename(<span class="string">"/etc/sudoers.d"</span>, <span class="string">".d"</span>).PHP_EOL; <span class="comment">//1) sudoers</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"2) "</span>.basename(<span class="string">"/etc/passwd"</span>).PHP_EOL; <span class="comment">//2) passwd</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"3) "</span>.basename(<span class="string">"/etc/"</span>).PHP_EOL; <span class="comment">//3) etc</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"4) "</span>.basename(<span class="string">"."</span>).PHP_EOL; <span class="comment">// 4) .</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"5) "</span>.basename(<span class="string">"/"</span>); <span class="comment">// 5)</span></span></pre></td></tr></table></figure>



<ul>
<li><p>dirname — 返回路径中的目录部分</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"1) "</span> . dirname(<span class="string">"/etc/passwd"</span>) . PHP_EOL; <span class="comment">// 1) /etc</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"2) "</span> . dirname(<span class="string">"/etc/"</span>) . PHP_EOL; <span class="comment">// 2) \</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"3) "</span> . dirname(<span class="string">"."</span>); <span class="comment">// 3) .</span></span></pre></td></tr></table></figure>
</li>
<li><p>pathinfo — 返回文件路径的信息</p>
</li>
</ul>
<p>​      函数的格式：</p>
<p>​      <a href="mk:@MSITStore:C:\Users\李若宁\Desktop\php手册\php_enhanced_zh.chm::/res/language.pseudo-types.html#language.types.mixed" target="_blank" rel="noopener">  mixed</a> <strong>pathinfo</strong>    ( string <code>$path</code>   [, int <code>$options</code> = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME  ] )</p>
<p>   参数：</p>
<p>​    path：要解析的路径</p>
<pre><code>options: 如果指定了，将会返回指定元素；它们包括：PATHINFO_DIRNAME，PATHINFO_BASENAME 和 PATHINFO_EXTENSION 或 PATHINFO_FILENAME。 </code></pre><p>   如果没有指定 options 默认是返回全部的单元</p>
<p>  例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$path_parts = pathinfo(<span class="string">'/www/htdocs/inc/lib.inc.php'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $path_parts[<span class="string">'dirname'</span>], <span class="string">"\n"</span>; <span class="comment">// /www/htdocs/inc</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $path_parts[<span class="string">'basename'</span>], <span class="string">"\n"</span>; <span class="comment">// lib.inc.php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $path_parts[<span class="string">'extension'</span>], <span class="string">"\n"</span>; <span class="comment">//php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $path_parts[<span class="string">'filename'</span>], <span class="string">"\n"</span>;  <span class="comment">//lib.inc</span></span></pre></td></tr></table></figure>

<h5 id="目录的读取"><a href="#目录的读取" class="headerlink" title="目录的读取"></a>目录的读取</h5><p>opendir() , readdir() ,closedir()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$dir_path = <span class="string">"D:/wamp/www/"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_dir($dir_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $dir_handle = opendir($dir_path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="keyword">false</span>!==($file_name=readdir($dir_handle)))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (is_dir($dir_path.$file_name))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.$file_name.<span class="string">'是目录'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>.$file_name.<span class="string">'是文件'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    closedir($dir_handle);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"这个目录不存在"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>rewindir()函数：   倒回目录句柄</p>
<p>将 <code>dir_handle</code> 指定的目录流重置到目录的开头。</p>
<h5 id="获得目录的大小"><a href="#获得目录的大小" class="headerlink" title="获得目录的大小"></a>获得目录的大小</h5><p><strong>练习</strong> </p>
<p>获得目录的大小</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDirSize</span><span class="params">($dirname)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//定义一个变量默认为零</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $dirsize = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $dir= opendir($dirname);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>($filename=readdir($dir))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $file=$dirname.<span class="string">'/'</span>.$filename;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> ($filename!=<span class="string">"."</span>&amp;&amp;$filename!=<span class="string">".."</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (is_dir($file))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $dirsize+=getDirSize($file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $dirsize+=filesize($file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    closedir($dir);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $dirsize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$path=getDirSize(<span class="string">"D:/wamp/www"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $path;</span></pre></td></tr></table></figure>

<p>disk_free_space(): 返回目录中的可用空间(单位是字节)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$df_d = disk_free_space(<span class="string">"D:"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump(($df_d/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span>));</span></pre></td></tr></table></figure>

<p>disk_total_space — 返回一个目录的磁盘总大小</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$df_d = disk_total_space(<span class="string">"D:"</span>);</span></pre></td></tr></table></figure>

<h5 id="文件的拷贝"><a href="#文件的拷贝" class="headerlink" title="文件的拷贝"></a>文件的拷贝</h5><p>copy()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">"content-type:text/html:charset-utf-8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_src_path = <span class="string">"D:/wamp/www/file/图片copy.jpg"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_src_path = iconv(<span class="string">"utf-8"</span>,<span class="string">"gbk"</span>,$file_src_path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_des_path = <span class="string">"D:/wamp/www/file/计划.jpg"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$file_des_path = iconv(<span class="string">"utf-8"</span>,<span class="string">"gbk"</span>,$file_des_path);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists($file_src_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (copy($file_src_path,$file_des_path))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"图片copy成功"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">echo</span> <span class="string">"图片copy失败"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"没有这个文件，无法拷贝"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="文件的截取"><a href="#文件的截取" class="headerlink" title="文件的截取"></a>文件的截取</h5><p>ftruncate — 将文件截断到给定的长度</p>
<h5 id="文件的属性"><a href="#文件的属性" class="headerlink" title="文件的属性"></a>文件的属性</h5><p>file_exists()、is_readable()、is_writable()、is_executable()、filectime()、fileatime()、filemtime()</p>
<p>flock()文件锁。</p>
<h5 id="文件的指针"><a href="#文件的指针" class="headerlink" title="文件的指针"></a>文件的指针</h5><p>fetll():返回文件指针读取或写入的位置。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$fp = fopen(<span class="string">"abc.txt"</span>, <span class="string">"r"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$data = fgets($fp, <span class="number">12</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> ftell($fp); <span class="comment">// 11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fclose($fp);</span></pre></td></tr></table></figure>

<p>fseek 在文件指针中定位</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$fp = fopen(<span class="string">'abc.txt'</span>, <span class="string">'r'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$data = fgets($fp, <span class="number">100</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// move back to the beginning of the file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// same as rewind($fp);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fseek($fp, <span class="number">0</span>);</span></pre></td></tr></table></figure>

<p>rewind — 倒回文件指针的位置</p>
<p>注意：如果将文件以附加（”a” 或者 “a+”）模式打开，写入文件的任何数据总是会被附加在后面，不管文件指针的位置。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$handle = fopen(<span class="string">'abc.txt'</span>, <span class="string">'r+'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fwrite($handle, <span class="string">'Really long sentence.'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">rewind($handle);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fwrite($handle, <span class="string">'Foo'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">rewind($handle);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> fread($handle, filesize(<span class="string">'abc.txt'</span>)); <span class="comment">//Foolly long sentence.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fclose($handle);</span></pre></td></tr></table></figure>

<h5 id="目录操作的练习"><a href="#目录操作的练习" class="headerlink" title="目录操作的练习"></a>目录操作的练习</h5><p>目录的删除（里面包含子目录还有文件）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteDir</span><span class="params">($src)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $dirHand=opendir($src);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="keyword">false</span>!=($file=readdir($dirHand)))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($file!=<span class="string">"."</span>&amp;&amp;$file!=<span class="string">".."</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $full = $src.<span class="string">"/"</span>.$file;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(is_dir($full))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                deleteDir($full);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;<span class="keyword">elseif</span>(is_file($full))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                unlink($full);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sleep(<span class="number">5</span>);mu</span></pre></td></tr><tr><td class="code"><pre><span class="line">    closedir($dirHand);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 删除当时的本文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    rmdir($src);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">deleteDir(<span class="string">'d:\wamp\wamp64\www\file\2019'</span>);</span></pre></td></tr></table></figure>

<p>目录的复制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">"DS"</span>,DIRECTORY_SEPARATOR);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dirCopy</span><span class="params">($sorce,$dest)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $arrDir = scandir($sorce);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(!file_exists($dest))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mkdir($dest);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(count($arrDir)&gt;<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">foreach</span> ($arrDir <span class="keyword">as</span> $file) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> ($file != <span class="string">"."</span> &amp;&amp; $file != <span class="string">".."</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $original = $sorce . DS . $file;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $aims = $dest . DS . $file;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (is_dir($original)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span>(!file_exists($aims))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        mkdir($aims);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    dirCopy($original, $aims);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    copy($original, $aims);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">dirCopy(<span class="string">'d:\wamp\wamp64\www\file'</span>,<span class="string">'d:\wamp\wamp64\www\file1'</span>);</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基本类型操作回顾</title>
    <url>/2020/02/07/51-redis%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="Redis的特点"><a href="#Redis的特点" class="headerlink" title="Redis的特点"></a>Redis的特点</h4><p>&emsp;&emsp;首先redis 是完全开源免费的，遵守BSD协议,是一个高性能的key-value数据库。</p>
<ol>
<li>简单的key-value存储性能极高</li>
<li>Redis 拥有更多的数据结构，并支持更丰富的数据操作。</li>
<li>Redis支持持久化和数据恢复</li>
<li>Redis的所有操作都是原子性的（要么执行成功要么执行失败，不会结束在中间的莫各环节）</li>
<li>服务端支持AUTH 密码验证<a id="more"></a>

</li>
</ol>
<h4 id="Redis类型操作"><a href="#Redis类型操作" class="headerlink" title="Redis类型操作"></a>Redis类型操作</h4><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>语法：set   key   value [ex 秒数]/[px 毫秒数] </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name xiaoming #使用set 直接设置key value 在没设置h</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;xiaoming&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set user_id 20 ex 20  # 表示20秒过期</span></pre></td></tr></table></figure>

<p>PHP操作redis</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$r = <span class="keyword">new</span> Redis(); <span class="comment"># 先new 一个redis 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$r-&gt;connect(<span class="string">"localhost"</span>,<span class="number">6379</span>); <span class="comment"># 连接redis</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $r-&gt;get(<span class="string">"name"</span>);<span class="comment">//xiaoming    #执行相关命令</span></span></pre></td></tr></table></figure>

<p><strong>key操作</strong></p>
<p>常见的键值操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * # 返回所有的键值</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;name&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;id&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys na* #模糊查询</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;name&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists name #判断键值是否错在 存在返回1 不存在返回0</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists name1</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; type name #返回键的类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">string</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; type id</span></pre></td></tr><tr><td class="code"><pre><span class="line">string</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire date 20 #设置过期时间</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ttl date #查看还有多久过期</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 16</span></pre></td></tr></table></figure>

<h5 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h5><ol>
<li>与PHP的array 类似 一个key里面可以保存<strong>多个key-value对</strong>，每个k-v都是字符串类型。</li>
<li>一般用在属性的操作比较多，比如 user_id 有下列字段 { name xiaoming，age 18, sex 男，love 读书 }像这种的</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset website goole &quot;www.g.cn&quot;    # 设置一个字段</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset website baidu &quot;www.baiud.com&quot; </span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset website souhu &quot;www.souhu.com&quot; 4399 &quot;www.4399.com&quot; #设置多个字段</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget website souhu # 取值</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;www.souhu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget website souhu baidu goole #取多个字段的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;www.souhu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;www.baiud.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;www.g.cn&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall website #取所有字段的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;goole&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;www.g.cn&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;baidu&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;www.baiud.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;souhu&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;www.souhu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">7) &quot;4399&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">8) &quot;www.4399.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hlen website # 取字段的数量</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists website lrnjy #判断字段是否存在</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists website souhu</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hsetnx website souhu &quot;www.souhu2.com&quot; #当字段不存在时赋值</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget website souhu</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;www.souhu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hsetnx website lrnjy &quot;www.lenjy.club&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget website lrnjy</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;www.lenjy.club&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user age 18</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hincrby user age 1  #增加数字</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 19</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hdel website lrnjy #删除一个字段</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys website #返回key 所有的field返回所有的字段值</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;goole&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;baidu&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;souhu&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;4399&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">·····································································································</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hvals website # 返回所有field的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;www.g.cn&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;www.baiud.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;www.souhu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;www.4399.com&quot;</span></pre></td></tr></table></figure>

<h5 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h5><ol>
<li>实现方式为双向链表，主要用于存储有序的字符串列表，在队列的两端添加和弹出元素，特别适用于做消息队列。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush language python  #向链表左端添加元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush language python</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush language php   #向链表右端添加元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush language php2</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;php2&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush language php3</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 5</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;php3&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;php2&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;php3&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;php2&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpop language  # 弹出左端的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;php3&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpop language # 弹出右端的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;php2&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; llen language #获得链表中元素的个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 3</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 2 #获得链表中某一片段的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 1 </span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush language php</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush language hello</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 5</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush language hello1</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 6</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush language php</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 7</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush language hello</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 8</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush language hello</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 9</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;hello1&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">7) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">8) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">9) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrem language 2 php # 从左到右 删除两个 字段为php的字段</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;hello1&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">7) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lindex language 1 #获取指定索引的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lindex language 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lindex language 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lset language 1 python2 #设置指定索引的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;python2&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;hello1&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">7) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ltrim language 1 -1 #只保留列表中指定的片段</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;python2&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;hello1&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; linsert language before php python #向列表“中”插入元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 7</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange language 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;python2&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;hello1&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;python&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;php&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;hello&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">7) &quot;hello&quot;</span></pre></td></tr></table></figure>

<h5 id="set-集合"><a href="#set-集合" class="headerlink" title="set(集合)"></a>set(集合)</h5><p>&emsp;&emsp;集合<strong>每个元素</strong>都是<strong>不同的</strong>，元素没有顺序，在集合中主要在交集、差集、并集的时候比较方便。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd subject &quot;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd subject &quot;shuxue&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd subject &quot;shuxue&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd subject &quot;english&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd subject &quot;chemistry&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd subject &quot;physics &quot; &quot;Chinese&quot; #增加元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers subject # 由查询结果我们可知 数组的无序性</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;chemistry\x16&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;\x16&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;english\x16&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;shuxue\x16&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;Chinese&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;physics &quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; srem subject &quot;Chinese&quot; # 删除元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers subject # 获得集合中所有的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;shuxue\x16&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;english\x16&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;\x16&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;chemistry\x16&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;physics &quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd subject xiaoming </span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sismember subject xiaoming # 判断某个元素是否存在</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sismember subject xiaoming1 </span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sdiff class1 class2 #求两个元素的差集（在class1中有的元素在class2中没有） </span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaoai&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaoli&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;xiaowang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;xiaozhang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers class1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaozhang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaoai&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;xiaowang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;xiaoli&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;xiaoming&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers class2</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaoning&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;xiaoming&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;xiaoruo&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sdiff class2 class1 #求两个元素的差集（在class2中有的元素在class1中没有） </span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaoning&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaoruo&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sinter class1 class2 # 求两个元素的交集</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaoming&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sunion class1 class2 #求两个元素的并集 在 class1 和 class2 中都有的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaoning&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaozhang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;xiaoruo&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;xiaoai&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;xiaowang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">7) &quot;xiaoli&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">8) &quot;xiaoming&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard class1 #获取元素的个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 6</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sdiffstore class3 class1 class2 #将结果进行差集运算并将运算的结果存储到class3中</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers class3</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaoai&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaoli&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;xiaowang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;xiaozhang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sinterstore class4 class1 class2 #将结果进行交集运算并将运算的结果存储到class4中</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers class4</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaoming&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sunionstore class5 class1 class2 #将结果进行并集运算并将运算的结果存储到class5中</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 8</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers class5</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaoning&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaozhang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;xiaoruo&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;xiaoai&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;xiaowang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">7) &quot;xiaoli&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">8) &quot;xiaoming&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers class1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaozhang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaoai&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;xiaowang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;xiaoli&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;xiaoming&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; spop class1 2  #随机弹出n个元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaoming&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaozhang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; spop class1 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaoai&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers class1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaowang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;xiaoli&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; srandmember class1 1 #随机获得元素中的某一个值</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers class1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;xiaowang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;xiaofang&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;xiaoli&quot;</span></pre></td></tr></table></figure>

<h5 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h5><p>&emsp;&emsp;有序集合 ，主要排序用的比较多可以做一下排行榜的这些功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd page_rank 10 goole.com 5 baidu.com 8 bing.com #添加元素并且按分数排序</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange page_rank 0 -1 withscores</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;baidu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;5&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;bing.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;8&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;goole.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;10&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore page_rank goole.com #获取元素的分数</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;10&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore page_rank bing.com</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;8&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange page_rank 0 -1 withscores #获取倒叙排名在某范围内的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;goole.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;10&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;bing.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;8&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">5) &quot;baidu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">6) &quot;5&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrangebyscore page_rank 5 8 withscores #获取分数在5-8范围的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;baidu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;5&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;bing.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;8&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrangebyscore page_rank -inf  8 withscores # 获取小于8的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;baidu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;5&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">3) &quot;bing.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4) &quot;8&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrangebyscore page_rank -inf  5 withscores</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;baidu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;5&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore page_rank   baidu.com</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;5&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zincrby page_rank 6   baidu.com  # 百度的分数字段加6</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;11&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard page_rank #获取集合中元素的个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount page_rank 6 8 #获取指定分数范围内元素的个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem page_rank bing.com #删除一个或多个元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange page_rank 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;goole.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;baidu.com&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd salary 2000 jack 5000 tom 3500 peter</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zremrangebyrank  salary 0 1 #按着排名范围删除元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1 withscores</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;tom&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">2) &quot;5000&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd salary 2000 jack 5000 tom 3500 peter</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zremrangebyscore salary 2000 4000  #按照分数删除元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1) &quot;tom&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd salary 2000 jack 5000 tom 3500 peter</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrank salary tom  #获取正序排序的元素排名</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrank salary jack</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrank salary jack #获得逆序排序的元素排名</span></pre></td></tr><tr><td class="code"><pre><span class="line">(integer) 2</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP正则表达式回顾</title>
    <url>/2020/02/06/29-PHP%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="正则表达式的基本知识点"><a href="#正则表达式的基本知识点" class="headerlink" title="正则表达式的基本知识点"></a>正则表达式的基本知识点</h4><h5 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h5><a id="more"></a>
<ol>
<li><p>分割</p>
</li>
<li><p>查找</p>
</li>
<li><p>匹配</p>
</li>
<li><p>替换字符串</p>
<h5 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h5><p>（/） （#） （~）</p>
<h5 id="通用原子"><a href="#通用原子" class="headerlink" title="通用原子"></a>通用原子</h5><ol>
<li>\d  匹配一个数字字符[0-9]</li>
<li>\D  匹配一个非数字字符 [^0-9]</li>
<li>\w  匹配包括下划线的任何单词字符，类似但<strong>不等价</strong>于‘[A-Za-z0-9_]’</li>
<li>\W 匹配任何非单词字符。’[^A-Za-z0-9]‘</li>
<li>\s   匹配任何不可见字符，包括空格、制表符、换页符。等价于[\f\n\r\t\v]</li>
<li>\S 匹配任何的可见字符 ，等价于[^\f\n\r\t\v]</li>
</ol>
<h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h5><ol>
<li>点(.)  除了换行之外的任意<strong>单字符</strong></li>
<li>*   匹配前面的表达式出现0-多次 ，等价于{0,}。<strong>例如：</strong>ab*  能匹配  a ab  abb</li>
<li>?  匹配前面的表达式出现 0或者1次 ，等价于{0,1}  <strong>例如:</strong> ab(es)?  能匹配 ab 或 ab(es)</li>
<li>^  匹配输入字符的开始位置  </li>
<li>$  匹配输入字符的结束位置</li>
<li>+  匹配前面的表达式出现一次或多次 <strong>例如:</strong>能匹配  ab  abb 但不能匹配 a</li>
<li>{n}  是确定的正数匹配确定的n次  <strong>例如:</strong> “o{2}“ 不能匹配 Bob 但是能匹配 food </li>
<li>{n,}  至少匹配 n 次  <strong>例如</strong>  “o{2,}” 不能匹配Bob 但是可以匹配 fooooooood中的所有的 o。</li>
<li>{n,m}  至少匹配 n 次 最多匹配 m次</li>
<li><input disabled="" type="checkbox"> 字符集合匹配所包含的任意字符 <strong>例如:</strong> [abc] 可以匹配pian中的 a</li>
<li>( )  可以代表一个整体 定义一个组</li>
<li>[^] 取反的意思</li>
<li>|    x|y 匹配 x 或 y</li>
<li>[-]   [0-9] 匹配的是 0到 9 的数字</li>
</ol>
<h5 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h5><ul>
<li><p>模式修正符号，一个字符就是一个功能，可以组合使用</p>
<p><strong>例如 ：</strong> “/go*gle/ieU”</p>
</li>
</ul>
<ol>
<li>i  模式中的字符将同时匹配大小写字母(不区分大小写)</li>
<li>m  字符串视为多行进行处理。 在使用^ 或 $ 这两个符号时，每一行满足都可以。（正则表达式默认是视为一行处理的）</li>
<li>s   正则表达式中的 . 可以匹配换行 （默认 . 不能匹配回车换行）</li>
<li>U （.<em>）或者（.+）的情况正则表达式比较贪婪， U可以解决贪婪     (.\</em>?)  (.+?)  一般U我们不会用 都是加一个？来解决贪婪模式。</li>
<li>x  如果设置了这个修饰符，模式中的<strong>没有经过转义</strong>的或<strong>不在字符类</strong>中的<strong>空白数据字符</strong>总会被忽略， 并且位于一个<strong>未转义</strong>的<strong>字符类</strong>外部的#字符和下一个换行符之间的字符也被忽略。 </li>
<li>A  必须以这个模式开头</li>
<li>D  如果这个修饰符被设置，模式中的元字符美元符号仅仅匹配目标字符串的末尾。</li>
<li>u  UTF-8中文匹配用到。</li>
</ol>
</li>
</ol>
<h5 id="正则表达式PCRE函数"><a href="#正则表达式PCRE函数" class="headerlink" title="正则表达式PCRE函数"></a>正则表达式PCRE函数</h5><ol>
<li>preg_match(): 执行一个正则表达式匹配。</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$subject = <span class="string">"abcdef"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pattern = <span class="string">'/^abc/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">preg_match($pattern, $subject, $matches);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($matches);<span class="comment">//Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//    [0] =&gt; abc</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//)</span></span></pre></td></tr></table></figure>

<ol start="2">
<li><p>preg_match_all():使用正则表达式（规则）对字符串进行筛选，筛选到结果先保存到数组，并继续筛选，直到字符串结束</p>
</li>
<li><p>preg_replace():    使用正则表达式（规则）对字符串进行筛选，再将筛选的内容进行替换。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"one,two,one"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$reg = <span class="string">"/one/"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$result = preg_replace($reg,<span class="string">"three"</span>,$str);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $result; <span class="comment">//three,two,three</span></span></pre></td></tr></table></figure>
</li>
<li><p>preg_split():使用preg_split可以先根据定义的规则进行筛选，再根据筛选的结果拆分字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"one,two,one!three!four"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$reg = <span class="string">"/[,!]/"</span>; <span class="comment">//按照 ， ！ 进行分割 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$result = preg_split($reg,$str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($result); <span class="comment">// Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//[0] =&gt; one</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//[1] =&gt; two</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//[2] =&gt; one</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//[3] =&gt; three</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//[4] =&gt; four</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//)</span></span></pre></td></tr></table></figure>



</li>
</ol>
<h5 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h5><p>  正则表达式一个最重要的特性就是将匹配成功的模式的某部分进行存储供以后使用这一能力。<br>对一个正则表达式模式或部分模式两边添加圆括号<strong>()</strong>可以把这部分表达式存储到一个临时缓冲区中。 </p>
<p>所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容按顺序存储。<br>存储子匹配的缓冲区编号从1开始，连续编号至最大99个子表达式。<br>每个缓冲区都可以使用’\n’(或用’$n’)访问，其中n为1至99的阿拉伯数字，用来按顺序标识特定缓冲区(子表达式)。<br>原文链接：<a href="https://blog.csdn.net/qq_20408491/article/details/75095055" target="_blank" rel="noopener">https://blog.csdn.net/qq_20408491/article/details/75095055</a></p>
<p><strong>例子：</strong></p>
<p>讲str字符串替换成不带&lt;b&gt;标签的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">'&lt;b&gt;abc&lt;/b&gt;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pattern = <span class="string">'/&lt;b&gt;(.*)&lt;\/b&gt;/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$strabc=preg_replace($pattern,<span class="string">"\\1"</span>,$str);  <span class="comment">// \\1 代表的就是第一个()的内容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $strabc;  <span class="comment">//abc</span></span></pre></td></tr></table></figure>

<h6 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h6><p>首先我想匹配是&lt;b&gt;标签里面的内容 但是 由于贪婪模式 他匹配的为第一个&lt;b&gt;和&lt;/b&gt;之间的内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">'&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;dsads&lt;/b&gt;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pattern = <span class="string">'/&lt;b&gt;(.*)&lt;\/b&gt;/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$strabc=preg_replace($pattern,<span class="string">"\\1"</span>,$str);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $strabc;  <span class="comment">//abc&lt;/b&gt;&lt;b&gt;dsads</span></span></pre></td></tr></table></figure>

<ul>
<li>解决贪婪模式</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">'&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;dsads&lt;/b&gt;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pattern = <span class="string">'/&lt;b&gt;(.*?)&lt;\/b&gt;/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$strabc=preg_replace($pattern,<span class="string">"\\1"</span>,$str);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $strabc;  <span class="comment">//abcdsads</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$str = <span class="string">'&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;dsads&lt;/b&gt;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$pattern = <span class="string">'/&lt;b&gt;(.*)&lt;\/b&gt;/U'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$strabc=preg_replace($pattern,<span class="string">"\\1"</span>,$str);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $strabc;  <span class="comment">//abcdsads</span></span></pre></td></tr></table></figure>

<p>加一个？ 或者使用模式修正符U都可以取消贪婪模式。</p>
<h6 id="中文匹配"><a href="#中文匹配" class="headerlink" title="中文匹配"></a>中文匹配</h6><p><strong>UTF-8</strong>汉字编码范围是<strong>0x4e00-0x9fa5</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"中文"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$reg = <span class="string">'/[\x&#123;4e00&#125;-\x&#123;9fa5&#125;]+/u'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">preg_match($reg,$str,$match);</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($match);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//array(1) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//    [0]=&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//  string(6) "中文"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//&#125;</span></span></pre></td></tr></table></figure>

<p><strong>ANSI(gb2312)</strong>环境下，<strong>0xb0-0xf7</strong>,<strong>0xa1-0xfe</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"中文"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$reg = <span class="string">'/['</span>.chr(<span class="number">0xb0</span>).<span class="string">'-'</span>.chr(<span class="number">0xf7</span>).<span class="string">']['</span>.chr(<span class="number">0xa1</span>).<span class="string">'-'</span>.chr(<span class="number">0xfe</span>).<span class="string">']/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">preg_match($reg,$str,$match);</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($match);</span></pre></td></tr></table></figure>

<p>UTF-8要使用<strong>u模式修正符</strong>使模式字符串被看成UTF-8，在ANSI(gb2312)环境下，要<strong>使用chr将Ascii转换为字符</strong></p>
<h4 id="正则表达式真题"><a href="#正则表达式真题" class="headerlink" title="正则表达式真题"></a>正则表达式真题</h4><p>1.至少写出一种验证139开头的11位手机号码的<strong>正则表达式</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"13956565656"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$reg = <span class="string">"/^139\d&#123;8&#125;/"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">preg_match($reg,$str,$match);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($match);</span></pre></td></tr></table></figure>

<p>2.写出一个正则表达式，取出页面中所有img标签中src的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"&lt;img src=\"edit.html\"&gt;"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$reg=<span class="string">'/&lt;img.*?src="(.*?)".*?\/?&gt;/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">preg_match($reg,$str,$match);</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($match);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//array(2) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//    [0]=&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//  string(21) "&lt;img src="edit.html"&gt;"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//    [1]=&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//  string(9) "edit.html"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//&#125;</span></span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript面向对象编程</title>
    <url>/2020/02/05/30-js%E9%9D%A2%E5%83%8F%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="Javascript面像对象的编程"><a href="#Javascript面像对象的编程" class="headerlink" title="Javascript面像对象的编程"></a>Javascript面像对象的编程</h4><h5 id="三条定律"><a href="#三条定律" class="headerlink" title="三条定律"></a>三条定律</h5><ul>
<li>一切都是对象，最基本的单位就是一个一个的对象<a id="more"></a>

</li>
</ul>
<p>我们根据这些对象应用场景、来源进行了分类：</p>
<h6 id="ECMA内置对象，不依赖任何宿主环境"><a href="#ECMA内置对象，不依赖任何宿主环境" class="headerlink" title="ECMA内置对象，不依赖任何宿主环境"></a>ECMA内置对象，不依赖任何宿主环境</h6><p> Object,Array,String,Number,Boolean,Date…</p>
<h6 id="宿主对象，JavaScript依赖的环境提供的对象"><a href="#宿主对象，JavaScript依赖的环境提供的对象" class="headerlink" title="宿主对象，JavaScript依赖的环境提供的对象"></a>宿主对象，JavaScript依赖的环境提供的对象</h6><p><strong>例如：</strong>JavaScript在<strong>浏览器端</strong>运行的时候，<strong>浏览器</strong>就是<strong>宿主环境</strong></p>
<p>window,document,history,bom</p>
<h6 id="我们自定义的对象"><a href="#我们自定义的对象" class="headerlink" title="我们自定义的对象"></a>我们自定义的对象</h6><ul>
<li><p>__proto__  属性的介绍</p>
<p>该属性是一个隐性属性，用来调试用的，让你知道该对象构造函数是谁。</p>
<img src="http://xy.liruoning.cn/images/30-js-1.png" style="zoom:70%;" />
</li>
<li><p><strong>数字</strong>、<strong>字符串</strong>的由来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> a= <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(a.__proto__);  <span class="comment">//Number &#123;0, constructor: ƒ, toExponential: ƒ, toFixed: ƒ, toPrecision: ƒ, …&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(a==<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">20</span>)) <span class="comment">//true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> a= <span class="string">"hello"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(a.__proto__);  <span class="comment">//String &#123;"", constructor: ƒ, anchor: ƒ, big: ƒ, blink: ƒ, …&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(a==<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello"</span>)) <span class="comment">//true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li><p>对象是属性、方法的集合</p>
<p> 对象的属性、方法 和 变量、函数的区别在于：</p>
<p> 变量、函数没有归属，而属性、方法属于对象的，有归属</p>
</li>
</ul>
</li>
<li><p>对象是由函数实例化而来</p>
<p>可以通过<strong>proto</strong>属性获得该对象的原型是谁，也就是说该对象是通过哪个函数造出来的</p>
</li>
</ul>
<h5 id="一条链"><a href="#一条链" class="headerlink" title="一条链"></a>一条链</h5><p>在JS中有两条链：</p>
<ul>
<li>作用域链</li>
<li>原型链</li>
</ul>
<p><strong>什么是原型链</strong>？一个对象最顶层的、祖先</p>
<p>如何<strong>获得一个对象的原型</strong>呢？通过对象的属性：<strong>prototype</strong>获得的</p>
<img src="http://xy.liruoning.cn/images/30-js-2.png" style="zoom:67%;" />

<h5 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h5><p>封装性：</p>
<ol>
<li>将自然界的事物，使用编程语言进行描述，就体现了封装性</li>
<li>将重用的代码，提取到公共的地方，体现了封装性或者将变量、函数，使用对象进行收编</li>
</ol>
<p>继承性：</p>
<ol>
<li>JavaScript的继承性体现在prototype原型上面</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.inner = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> child();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> child();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(d1);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(d2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<img src="http://xy.liruoning.cn/images/30-js-3.png" style="zoom:67%;" />

<p>每一次new 都会维护一次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">child.prototype.inner = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="built_in">console</span>.log(<span class="string">"this is test"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> child();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> child();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(d1);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(d2);</span></pre></td></tr></table></figure>

<img src="http://xy.liruoning.cn/images/30-js-4.png" style="zoom:67%;" />

<p>对inner函数不会每一次new 都会处理。每个对象都是空的，需要从原型中继承。</p>
<p>多态性：</p>
<p>多态性在弱类型的语言中，体现的不是很明显，但是在JavaScript中，多态性的体现就表现在this的使用上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;div id =<span class="string">"div1"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  var divD = document.getElementById('div1');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  divD.onclick = function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      console.log(this);    /</span><span class="regexp">/ this指向divD对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  function demo() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      console.log(this);   /</span><span class="regexp">/this 指向window</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  demo();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  window.setInterval(function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      console.log(this)    /</span><span class="regexp">/this 指向 window对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">  &#125;,1000)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>php自定义和系统内置回顾</title>
    <url>/2020/02/04/27-php%E8%87%AA%E5%AE%9A%E4%B9%89%E5%92%8C%E5%86%85%E9%83%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="变量的作用域和静态变量"><a href="#变量的作用域和静态变量" class="headerlink" title="变量的作用域和静态变量"></a>变量的作用域和静态变量</h4><h5 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h5><p>静态变量<strong>仅存在局部函数域中存在</strong>，当程序执行<strong>离开此函数域</strong>时，其值<strong>并不会</strong>消失。 </p>
<a id="more"></a>

<p><strong>static</strong>关键字</p>
<ol>
<li>仅初始化一次</li>
<li>初始化时需要赋值</li>
<li>每次执行函数该值会保留</li>
<li>static修饰的变量是局部的，仅在函数的内部有用</li>
<li>可以记录函数的调用次数，从而可以在某些条件下终止递归</li>
</ol>
<h4 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h4><h5 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h5><ol>
<li>默认情况下，我们函数的传递是值传递。当我们想要<strong>改变参数</strong>的时候，改为引用传递。</li>
</ol>
<h5 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h5><ol>
<li>我们函数的返回值是通过return返回</li>
<li>可以返回数组对象任意类型</li>
<li>返回语句会终止函数的执行，将控制权交给函数的调用处</li>
<li>省略<strong>return</strong>，返回值是<strong>NULL</strong>,不可以有<strong>多个</strong>返回值。</li>
</ol>
<h5 id="函数引用的返回"><a href="#函数引用的返回" class="headerlink" title="函数引用的返回"></a>函数引用的返回</h5><p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">myfunc</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> $a = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$b=myfunc();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $b;    <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$b = &amp;myfunc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">$b=<span class="number">100</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $b;    <span class="comment">//100</span></span></pre></td></tr></table></figure>

<p>从一个函数返回一个<strong>引用</strong>,必须在函数的声明和在返回值给一个变量的时候加上引用符号&amp;；</p>
<h5 id="系统内置函数"><a href="#系统内置函数" class="headerlink" title="系统内置函数"></a>系统内置函数</h5><h6 id="时间日期函数"><a href="#时间日期函数" class="headerlink" title="时间日期函数"></a>时间日期函数</h6><ol>
<li><p>date() ：将时间戳转化成日期格式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> date(<span class="string">"Y-m-d H:i:s"</span>);  <span class="comment">//2020-02-03 07:42:18</span></span></pre></td></tr></table></figure>

<p>date()函数有两个参数 <strong>第一个</strong>参数：定义格式。<strong>第二个</strong>参数：时间戳如果不定义默认是当前的。</p>
</li>
<li><p>time()：获得UNIX时间戳</p>
</li>
<li><p>date_default_timezone_set():设置时区。 date_default_timezone_set(“PRC”)中华人民共和国时区</p>
</li>
<li><p>mktime():取得<strong>一个日期</strong>的UNIX<strong>时间戳</strong></p>
<p>传值<strong>格式</strong>：</p>
<p>int <strong>mktime</strong>    ([ int <code>$hour</code> = date(“H”)   [, int <code>$minute</code> = date(“i”)   [, int <code>$second</code> = date(“s”)   [, int <code>$month</code> = date(“n”)   [, int <code>$day</code> = date(“j”)   [, int <code>$year</code> = date(“Y”)   [, int <code>$is_dst</code> = -1  ]]]]]]] )</p>
</li>
<li><p>strtotime():将任何英文文本的日期时间描述解析为 Unix 时间戳</p>
<p>传值<strong>格式</strong>：int <strong>strtotime</strong>    ( string <code>$time</code>   [, int <code>$now</code> = time()  ] )</p>
</li>
<li><p>microtime():返回UNIX时间戳和微秒数</p>
</li>
</ol>
<h6 id="IP处理函数"><a href="#IP处理函数" class="headerlink" title="IP处理函数"></a>IP处理函数</h6><ol>
<li>ip2long():将一个IPV4的字符串互联网协议转换成数字格式</li>
<li>long2ip():Converts an long integer address into a string in (IPv4) Internet standard dotted format</li>
</ol>
<h6 id="打印函数"><a href="#打印函数" class="headerlink" title="打印函数"></a>打印函数</h6><ol>
<li>print(),echo 两个都是语言结构 <strong>不同</strong>print()只能打印一个值 echo 可以打印多个变量用 “，”隔开。print()有返回值但是总是返回1不过这个没有什么意义。</li>
<li>printf()和sprintf()。printf()把变量进行格式化的输出。sprintf()把格式话的字符串，写入一个变量不会输出。</li>
<li>print_r()把数组对象进行格式化的输出。</li>
<li>var_dump() 把变量进行格式化输出并且返回<strong>类型</strong></li>
<li>var_export():此函数返回关于传递给该函数的变量的结构信息，它和       <a href="mk:@MSITStore:C:\Users\李若宁\Desktop\php手册\php_enhanced_zh.chm::/res/function.var-dump.html" target="_blank" rel="noopener">var_dump()</a> 类似，不同的是其返回的表示是<strong>合法的PHP 代码</strong>。 您可以通过将函数的第二个参数设置为      <strong><code>TRUE</code></strong>，从而返回变量的表示。</li>
</ol>
<h6 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h6><ol>
<li>serialize():函数用于序列化对象或数组，并返回一个字符串,函数序列化对象后，可以很方便的将它传递给其他需要它的地方，且其类型和结构不会改变。</li>
<li>unserialize():函数用于将通过 <a href="https://www.runoob.com/php/php-serialize-function.html" target="_blank" rel="noopener">serialize() </a>函数序列化后的对象或数组进行反序列化，并返回原始的对象结构。</li>
</ol>
<h6 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h6><ol>
<li><p>strrev():颠倒字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"this is php string test"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> strrev($str); <span class="comment">//tset gnirts php si siht</span></span></pre></td></tr></table></figure>

<p>2.implode():将一个一维数组的值转化为字符串</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * string implode( string $glue, array $pieces)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 参数： glue默认为空的字符串。 pieces 你想要转换的数组。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 返回值：返回一个字符串，其内容为由 glue 分割开的数组的值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$arr = [<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">$str=implode(<span class="string">"-"</span>,$arr);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $str; <span class="comment">//one-two-three</span></span></pre></td></tr></table></figure>

<p>   3.explode ()使用一个字符串分割另一个字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"this is php string test"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$arr=explode(<span class="string">" "</span>,$str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($arr); <span class="comment">//Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//[0] =&gt; this</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//[1] =&gt; is</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//[2] =&gt; php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//[3] =&gt; string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//[4] =&gt; test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//)</span></span></pre></td></tr></table></figure>

<p>4.join(): 是implode()的别名</p>
<p>5.number_format():以千位分隔符方式格式化一个数字</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str = <span class="string">"1234567891.231432432"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$strFormat=number_format($str,<span class="number">4</span>);  <span class="comment">//第二个参数保留几位小数 第三个参数 小数和千分位的分隔符 第四个参数还有千分位的分割符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $strFormat;  <span class="comment">//1,234,567,891.2314</span></span></pre></td></tr></table></figure>

<p>6.trim():去除字符串首尾处的空白字符（或者其他字符）</p>
<p>  <strong>函数格式</strong>：string <strong>trim</strong>  ( string <code>$str</code> [, string <code>$charlist</code> = “ \t\n\r\0\x0B”  ] )</p>
<p>  此函数返回字符串 <code>str</code> 去除首尾空白字符后的结果。如果<strong>不指定第二个参数</strong>，<strong>trim()</strong> 将去除这些字符： </p>
<ol>
<li>“ “ (ASCII <em>32</em>         (<em>0x20</em>))，普通空格符。           </li>
<li>“\t” (ASCII <em>9</em>          (<em>0x09</em>))，制表符。           </li>
<li>“\n” (ASCII <em>10</em>       (<em>0x0A</em>))，换行符。           </li>
<li>“\r” (ASCII <em>13</em>        (<em>0x0D</em>))，回车符。           </li>
<li>“\0” (ASCII <em>0</em>         (<em>0x00</em>))，空字节符。           </li>
<li>“\x0B” (ASCII <em>11</em>    (<em>0x0B</em>))，垂直制表符。</li>
</ol>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$text   = <span class="string">"\t\tThese are a few words :) ...  "</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$binary = <span class="string">"\x09Example string\x0A"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$hello  = <span class="string">"Hello World"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($text, $binary, $hello); <span class="comment">//string(32) "      These are a few words :) ...  "</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  <span class="comment">//string(16) "   Example string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  <span class="comment">//string(11) "Hello World"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"\n"</span>;                    </span></pre></td></tr><tr><td class="code"><pre><span class="line">$trimmed = trim($text);</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($trimmed);               <span class="comment">//string(28) "These are a few words :) ..."      </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$trimmed = trim($text, <span class="string">" \t."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($trimmed);               <span class="comment">//string(24) "These are a few words :)"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$trimmed = trim($hello, <span class="string">"Hdle"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($trimmed);               <span class="comment">//string(5) "o Wor"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 清除 $binary 首位的 ASCII 控制字符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// （包括 0-31）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$clean = trim($binary, <span class="string">"\x00..\x1F"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($clean);                 <span class="comment">//string(14) "Example string"</span></span></pre></td></tr></table></figure>

<p> 7.ltrim():和trim()相似<strong>区别是</strong>删除 开口的空白字符（其他字符）</p>
<p> 8.rtrim():删除字符串末端的空白字符（或者其他字符）</p>
<h6 id="数组处理函数"><a href="#数组处理函数" class="headerlink" title="数组处理函数"></a>数组处理函数</h6><ol>
<li><p>array_keys():获得所有的<strong>键名</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$arr1=array_keys($arr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($arr1);<span class="comment">//Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">// (</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//     [0] =&gt; 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//     [1] =&gt; 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//     [2] =&gt; 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">// )</span></span></pre></td></tr></table></figure>
</li>
<li><p>array_values()： 数组中所有的值并给其<strong>建立数字索引</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">"aa"</span>=&gt;<span class="string">"one"</span>,<span class="string">"bb"</span>=&gt;<span class="string">"two"</span>,<span class="string">"cc"</span>=&gt;<span class="string">"three"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$arr1=array_values($arr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($arr1);<span class="comment">//Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">// (</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//     [0] =&gt; one</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//     [1] =&gt; two</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//     [2] =&gt; three</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">// )</span></span></pre></td></tr></table></figure>
</li>
<li><p>array_diff():计算数组的差集</p>
<p><strong>说明</strong>：array <strong>array_diff</strong>    ( array <code>$array1</code>   , array <code>$array2</code>   [, array <code>$...</code>  ] )</p>
<p>在  <code>array1</code> 中但是不在 <code>array2</code> 及任何其它参数数组中的值。 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$array1 = <span class="keyword">array</span>(<span class="string">"a"</span> =&gt; <span class="string">"green"</span>, <span class="string">"red"</span>, <span class="string">"blue"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$array2 = <span class="keyword">array</span>(<span class="string">"b"</span> =&gt; <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"red"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$result = array_diff($array1, $array2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($result); <span class="comment">//Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//    [1] =&gt; blue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//)</span></span></pre></td></tr></table></figure>
</li>
<li><p>array_intersect():计算数组的交集</p>
<p><strong>说明：</strong>array <strong>array_intersect</strong>    ( array <code>$array1</code>   , array <code>$array2</code>   [, array <code>$ ...</code>  ] )</p>
<p><strong>array_intersect()</strong> 返回一个数组，该数组包含了所有在      <code>array1</code> 中也同时出现在所有其它参数数组中的值。注意<strong>键名保留不变</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$array1 = <span class="keyword">array</span>(<span class="string">"a"</span> =&gt; <span class="string">"green"</span>, <span class="string">"red"</span>, <span class="string">"blue"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$array2 = <span class="keyword">array</span>(<span class="string">"b"</span> =&gt; <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"red"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$result = array_intersect($array1, $array2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($result); <span class="comment">//Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//[a] =&gt; green</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//[0] =&gt; red</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                  <span class="comment">//)</span></span></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>array_merge()：合并一个或多个数组</p>
<ul>
<li>数字键名将会重新编号</li>
<li>将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$array1 = <span class="keyword">array</span>(<span class="string">"color"</span> =&gt; <span class="string">"red"</span>, <span class="number">2</span>, <span class="number">4</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$array2 = <span class="keyword">array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"color"</span> =&gt; <span class="string">"green"</span>, <span class="string">"shape"</span> =&gt; <span class="string">"trapezoid"</span>, <span class="number">4</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$result = array_merge($array1, $array2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($result);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [color] =&gt; green</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [0] =&gt; 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [1] =&gt; 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [2] =&gt; a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [3] =&gt; b</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [shape] =&gt; trapezoid</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [4] =&gt; 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr></table></figure>
</li>
<li><p>array_merge_recursive():递归地合并一个或多个数组</p>
<ul>
<li>将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面。返回作为结果的数组。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ar1 = <span class="keyword">array</span>(<span class="string">"color"</span> =&gt; <span class="keyword">array</span>(<span class="string">"favorite"</span> =&gt; <span class="string">"red"</span>), <span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ar2 = <span class="keyword">array</span>(<span class="number">10</span>, <span class="string">"color"</span> =&gt; <span class="keyword">array</span>(<span class="string">"favorite"</span> =&gt; <span class="string">"green"</span>, <span class="string">"blue"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">$result = array_merge_recursive($ar1, $ar2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($result);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [color] =&gt; Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *        (</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *            [favorite] =&gt; Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                (</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                    [0] =&gt; red</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                    [1] =&gt; green</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                )</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *            [0] =&gt; blue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *        )</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [0] =&gt; 5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *    [1] =&gt; 10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr></table></figure>
</li>
<li><p>array_shift()：将数组的第一个单元移出并作为结果返回，将      <code>array</code> 的长度减一并将所有其它单元向前移动一位。所有的<strong>数字键名</strong>将改为<strong>从零开始计数</strong>，<strong>文字键名将不变</strong>。 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$stack = <span class="keyword">array</span>(<span class="string">"orange"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span>, <span class="string">"raspberry"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$fruit = array_shift($stack);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($stack);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*    [0] =&gt; banana</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*    [1] =&gt; apple</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*    [2] =&gt; raspberry</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*)</span></span></pre></td></tr></table></figure>
</li>
<li><p>array_unshift()</p>
<ul>
<li><p>将传入的单元插入到      <code>array</code> 数组的开头。注意单元是作为整体被插入的，因此传入单元将保持同样的顺序。所有的<strong>数值键名</strong>将修改为<strong>从零开始重新计数</strong>，所有的<strong>文字键名保持不变</strong>。 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$queue = <span class="keyword">array</span>(<span class="string">"orange"</span>, <span class="string">"banana"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">array_unshift($queue, <span class="string">"apple"</span>, <span class="string">"raspberry"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($queue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">/*Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                /*(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                /*    [0] =&gt; apple</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                /*    [1] =&gt; raspberry</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                /*    [2] =&gt; orange</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                /*    [3] =&gt; banana</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                /*)</span></span></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<ol start="9">
<li><p>array_pop()：弹出并返回      <code>array</code> 数组的最后一个单元，并将数组     <code>array</code> 的长度减一。如果   <code>array</code> <strong>为空（或者不是数组）</strong>将返回 <strong><code>NULL</code></strong>。 此外如果被调用<strong>不是一个数</strong>则会产生一个 <a href="">Warning</a>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$stack = <span class="keyword">array</span>(<span class="string">"orange"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span>, <span class="string">"raspberry"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$fruit = array_pop($stack);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($stack);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  (</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">      [0] =&gt; orange</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">      [1] =&gt; banana</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">      [2] =&gt; apple</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  )</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr></table></figure>



</li>
</ol>
<ol start="10">
<li><p>array_push()：将   <code>array</code> 当成一个栈，并将传入的变量压入   <code>array</code> 的<strong>末尾</strong>。<code>array</code>   的长度将根据入栈变量的数目增加。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$stack = <span class="keyword">array</span>(<span class="string">"orange"</span>, <span class="string">"banana"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">array_push($stack, <span class="string">"apple"</span>, <span class="string">"raspberry"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">print_r($stack);<span class="comment">//Array</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//[0] =&gt; orange</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//[1] =&gt; banana</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//[2] =&gt; apple</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//[3] =&gt; raspberry</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//)</span></span></pre></td></tr></table></figure>
</li>
<li><p>sort()：对数组进行排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$fruits = <span class="keyword">array</span>(<span class="string">"lemon"</span>, <span class="string">"orange"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">sort($fruits);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($fruits <span class="keyword">as</span> $key =&gt; $val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"fruits["</span> . $key . <span class="string">"] = "</span> . $val . <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*fruits[0] = apple</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  fruits[1] = banana</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  fruits[2] = lemon</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  fruits[3] = orange</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">*/</span></span></pre></td></tr></table></figure>

<p>12.asort()：对数组进行排序并保持索引关系</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$fruits = <span class="keyword">array</span>(<span class="string">"d"</span> =&gt; <span class="string">"lemon"</span>, <span class="string">"a"</span> =&gt; <span class="string">"orange"</span>, <span class="string">"b"</span> =&gt; <span class="string">"banana"</span>, <span class="string">"c"</span> =&gt; <span class="string">"apple"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">asort($fruits);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($fruits <span class="keyword">as</span> $key =&gt; $val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"$key = $val\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * c = apple</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * b = banana</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * d = lemon</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * a = orange</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr></table></figure>

<p>12.arsort()：对数组进行逆排序并保持索引关系 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$fruits = <span class="keyword">array</span>(<span class="string">"d"</span> =&gt; <span class="string">"lemon"</span>, <span class="string">"a"</span> =&gt; <span class="string">"orange"</span>, <span class="string">"b"</span> =&gt; <span class="string">"banana"</span>, <span class="string">"c"</span> =&gt; <span class="string">"apple"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">arsort($fruits);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($fruits <span class="keyword">as</span> $key =&gt; $val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"$key = $val\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * a = orange</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * d = lemon</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * b = banana</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * c = apple</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>网站项目测试接口时MySQL的sort和limit结合出现的问题</title>
    <url>/2020/02/03/28-mysql/</url>
    <content><![CDATA[<h4 id="事因"><a href="#事因" class="headerlink" title="事因"></a>事因</h4><p>最近写了一个小项目在测试数据的时候，发现的一个MySQL的奇怪问题。同样的排序字段加limit和不加limit排序出来的结果不一样。</p>
<a id="more"></a>
<h4 id="看测试"><a href="#看测试" class="headerlink" title="看测试"></a>看测试</h4><p><img src="http://xy.liruoning.cn/images/28-mysql-1.png" alt=""></p>
<p><img src="http://xy.liruoning.cn/images/28-mysql-2.png" alt=""></p>
<p><img src="http://xy.liruoning.cn/images/28-mysql-3.png" alt=""></p>
<p>由上面的三张图我们可以看出来同样是sort 排序 加上limit 排序出来的结果不一样。</p>
<p><strong>分析</strong></p>
<p>官方文档有提到如果你将Limit row_count与order by混用，mysql会找到排序的row_count行后立马返回，而不是排序整个查询结果再返回。如果是通过索引排序，会非常快；如果是文件排序，所有匹配查询的行（不带Limit的）都会被选中，被选中的大多数或者全部会被排序，直到limit要求的row_count被找到了。如果limit要求的row_count行一旦被找到，Mysql就不会排序结果集中剩余的行了。</p>
<p>由上面的解释可以知道，mysql是找到row_count行后立马返回，而不是排序整个查询结果在返回。所以造成了那样的结果（我的猜测）。</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>sort 和 id字段同时排序这样就不会出现那样结果了问题解决。</p>
<h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4><p>如果你有什么好的想法，可以留言我们一起学习呀。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>JS事件</title>
    <url>/2020/02/02/21-js%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="Javascript事件介绍"><a href="#Javascript事件介绍" class="headerlink" title="Javascript事件介绍"></a>Javascript事件介绍</h3><p>在JavaScript中事件，指的是用户 和网页发生交互时的一些行为，例如：鼠标点击、按下键盘按键、鼠标移动，这些行为就称之为事件，事件发生时，我们的程序也应该提供对应的处理方法。  </p>
<a id="more"></a>
<h4 id="Javascript事件分类"><a href="#Javascript事件分类" class="headerlink" title="Javascript事件分类"></a>Javascript事件分类</h4><p>鼠标事件，通过鼠标和网页进行交互<br><code>click()</code>          鼠标单击<br><code>dblclick()</code>    鼠标双击<br><code>mouseover()</code>    鼠标移入事件<br><code>mouseout()</code>      鼠标移出事件<br><code>mousemove()</code>    鼠标移动事件<br><code>mousedown()</code>    鼠标按下事件<br><code>mouseup()</code>      鼠标按键被松开事件<br><code>scroll</code>        滚动事件（body）键盘事件，通过键盘上的按键和网页进行交互<br><code>keydown</code>    按键被按下<br><code>keyup</code>         按键抬起  </p>
<p><strong>表单事件，提交表单时</strong><br><code>submit</code>        表单提交事件<br><code>select</code>           文本框的文本被选中<br><code>focus</code>            获得焦点事件<br><code>blur</code>            失去焦点事件<br><code>change</code>        内容改变事件<br>页面加载完毕事件：<br><code>load</code></p>
<h4 id="Javascript事件监听"><a href="#Javascript事件监听" class="headerlink" title="Javascript事件监听"></a>Javascript事件监听</h4><p>我们需要先监视网页上用户的这些行为，这样，当行为发生的时候，我们才能提供相应的处理方法，如果不监视，就无法获得用户的这些行为。  </p>
<ul>
<li>HTML事件监听程序：<br>将监视器，绑定到html的标签部分，作为html标签的属性<br>举例演示：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">"changeColor()"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    这是一个段落。</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   function changeColor() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       var re = document.getElementsByTagName("div")[0];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       re.style.color="red";</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<ul>
<li>DOM0级事件监听程序：<br>将事件监听器（摄像头），绑定到DOM节点对象上，也就是作为DOM对象的属性存在。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div onclick=<span class="string">"changeColor()"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    这是一个段落。</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    var  re = document.getElementsByTagName("div")[0];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   function changeColor() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       re.style.color="red";</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   /</span><span class="regexp">/当鼠标移入的时候会变绿</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   re.onmouseover=function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       re.style.color="green";</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   /</span><span class="regexp">/当鼠标移除的时候会变橙色</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    re.onmouseout=function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">        re.style.color="orange"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<ul>
<li>DOM2级事件监听程序<br>通过DOM对象.addEventListener()，针对主流浏览器（ie9+  Chrome、Firefox登录），非主流浏览器（IE6、7、8）使用attachEvent方法进行绑定。<br>通常在使用DOM3级事件绑定程序的时候，先判断一下是否是主流浏览器。</li>
</ul>
<p><strong>addEventListener()、attachEvent的作用：事件监听方式添加的事件，特点是可以为一个元素绑定多个同类型的事件。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装DOM2级事件监听</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//参数1：监听哪个DOM对象的事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//参数2：监视的事件类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//参数3：事件发生时执行的回调函数  true - 事件句柄在捕获阶段执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                              <span class="comment">//false- false- 默认。事件句柄在冒泡阶段执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">obj,eventType,callback</span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123; <span class="comment">//先判断是否为主流的浏览器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		obj.addEventListener(eventType, callback, <span class="literal">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		obj.attachEvent(<span class="string">'on'</span>+eventType, callback);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	&lt;style type=<span class="string">"text/css"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		#outer&#123;width:100px;height:100px;border:1px solid red;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&lt;<span class="regexp">/style&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">	&lt;script type="text/</span>javascript<span class="string">" src="</span>js/common.js<span class="string">"&gt;&lt;/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/head&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;body&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">	&lt;div id="</span>outer<span class="string">"&gt;&lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">	&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		var oDiv = document.getElementById('outer');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		bindEvent(oDiv,"</span>click<span class="string">",function()&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">			alert('hello');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		&#125;);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		bindEvent(oDiv,"</span>click<span class="string">",function()&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">			alert('world');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		&#125;);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		bindEvent(oDiv,"</span>mouseover<span class="string">",function()&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">			oDiv.style.backgroundColor='pink';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		&#125;);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		bindEvent(oDiv,"</span>mouseout<span class="string">",function()&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">			oDiv.style.backgroundColor='orange';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		&#125;);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">	&lt;/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong>事件的捕获</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        #outer&#123;width: 300px;height: 300px;background: #0f2a44&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        #innter&#123;width: 100px;height:100px;background: #eea236;margin: 20px&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;<span class="regexp">/style&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"outer"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div id=<span class="string">"innter"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var  outer = document.getElementById('outer');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var innter =document.getElementById('innter');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    outer.addEventListener("</span>click<span class="string">",function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        alert("</span>outer<span class="string">")</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;,true)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    innter.addEventListener("</span>click<span class="string">",function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        alert("</span>innter<span class="string">");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;,true)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong>效果：</strong>先执行outer(父节点)，在执行innter(子节点)。</p>
<p><strong>事件冒泡</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;style type="text/</span>css<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        #outer&#123;width: 300px;height: 300px;background: #0f2a44&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        #innter&#123;width: 100px;height:100px;background: #eea236;margin: 20px&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;/style&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/head&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;body&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;div id="</span>outer<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;div id="</span>innter<span class="string">"&gt;&lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var  outer = document.getElementById('outer');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var innter =document.getElementById('innter');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    outer.addEventListener("</span>click<span class="string">",function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        alert("</span>outer<span class="string">")</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;,false)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    innter.addEventListener("</span>click<span class="string">",function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        alert("</span>innter<span class="string">");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;,false)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/script</span></span></pre></td></tr></table></figure>

<p><strong>效果：</strong>先执行执行innter(子节点)，再outer(父节点)。</p>
<p>不管是<strong>事件捕获</strong>还是<strong>事件冒泡</strong>都不会给用户一个很好的体验。</p>
<p>所以我们通过来阻止</p>
<ul>
<li><p>主流浏览器通过：事件对象的stopPropogation()阻止，</p>
</li>
<li><p>非主流浏览器通过：事件对象的cancelBubble = true阻止</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        #outer&#123;width: 300px;height: 300px;background: #0f2a44&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        #innter&#123;width: 100px;height:100px;background: #eea236;margin: 20px&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;<span class="regexp">/style&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"outer"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;div id=<span class="string">"innter"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var  outer = document.getElementById('outer');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var innter =document.getElementById('innter');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    outer.addEventListener("</span>click<span class="string">",function (ev) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        alert("</span>outer<span class="string">")</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        if (ev.stopPropagation)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            ev.stopPropagation();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;else &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            ev.cancelBubble=true;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;,false)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    innter.addEventListener("</span>click<span class="string">",function (ev) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        alert("</span>innter<span class="string">");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        if (ev.stopPropagation)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            ev.stopPropagation();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;else &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            ev.cancelBubble=true;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;,false)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/script&gt;</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Javascript事件分类-1"><a href="#Javascript事件分类-1" class="headerlink" title="Javascript事件分类"></a>Javascript事件分类</h4><h6 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h6><p>1、鼠标单击事件：click<br>2、鼠标双击事件：dbclick</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"outer"</span>&gt;<span class="keyword">this</span> is test&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    var  oDiv=document.getElementById('outer');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    oDiv.ondblclick = function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">        oDiv.style.color="red";           /</span><span class="regexp">/双击变成红色</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<p>3、鼠标按下、抬起的行为：mousedown、mouseup<br>当我们mousedown这个行为发生的时候，我们可以通过<strong>事件对象</strong>的button属性获得是左击、右击。<br>button属性的值是 0 表示左击、1表示按下的是滑轮、2表示右击。</p>
<ul>
<li>事件对象的获得：<br>event，当用户的<strong>行为发生时</strong>，<strong>自动产生</strong>的对象，并且<strong>会自动</strong>给你传递到事件的处理程序中去，通常如果需要你接收一下，如果不需要就不用接收<br>通过事件对象，通常是用来获得当事件（用户的行为）发生时，事件主题的一些信息（左击、还是右击；鼠标的坐标等）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        body&#123;<span class="attr">height</span>: <span class="number">1200</span>px&#125;  <span class="comment">//给body设置一个高度，如果不设置这个高度body将为空也就是说点不住。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;<span class="regexp">/style&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;title&gt;Title&lt;/</span>title&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/head&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;body&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		//监视body的鼠标按下行为，一旦行为发生：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		//自动产生事件对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		//自动传递到事件处理程序中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		document.body.onmousedown = function(ev)&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">			// console.log(ev);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">			console.log(ev.button);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		document.body.onmouseup = function()&#123;  //鼠标按下去的行为</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">			console.log('鼠标抬起了...');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">		&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/script&gt;</span></span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/22-js-1.png" alt=""></p>
<p>4、鼠标移入、鼠标移出：<br>mouseover、mouseout</p>
<p>5、鼠标移动的行为：mousemove<br>通常会在鼠标移动行为发生时，获得鼠标的实时的坐标<br>通过clientX、clientY、pageX、pageY这些属性获得鼠标的坐标<br>唯一的区别，在于当出现滚动条的时候，计算方式不一样：<br><code>clientX</code>、<code>clientY</code>：距离客户端的XY轴的距离，没有计算出现滚动条之后，卷去的距离<br><code>pageX</code>、<code>pageY</code>：距离页面顶部、左边的距离，包含滚动条卷去的高度  </p>
<p>6、鼠标滚动的行为：scroll<br>说明：由于鼠标滚动的时候，控制的是body整体滚动，所以这个行为监视的是body，通过document.body.scrollTop获得、设置滚动条距离顶部的高度</p>
<p><img src="http://xy.liruoning.cn/images/22-js-2.png" alt=""></p>
<h6 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h6><p>用户通过键盘的按键和网页进行交互的行为。</p>
<ul>
<li>keydown 键盘按下事件</li>
</ul>
<p>1、keydown：键盘按键被按下的行为，通常该行为发生的时候，我们可以通过事件对象的keyCode属性获得按下的是哪个按键</p>
<p>2、keydown：键盘按键被按下的行为，通常该行为发生的时候，我们可以通过事件对象的key属性获得按下的是哪个按键（以后的新版本用这个好一点）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.body.onkeydown=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        alert(ev.key);  <span class="comment">// 按下 ‘w’ 键 将打印出 ‘w’</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p>​       3、我们可以通过事件对象的 ctrlKey 、altKey 、shiftKey 三个属性来确定这三个键是否被按 下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.body.onkeydown=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       alert(ev.ctrlKey);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       alert(ev.altKey);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       alert(ev.shiftKey);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p>​        发布留言的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"content"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;textarea rows="8" cols="60"&gt;&lt;/</span>textarea&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'textarea'</span>)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (ev.key == <span class="string">"Enter"</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           cont.innerText=text.value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           text.value = <span class="string">""</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="comment">// 阻止事件对象默认的行为 。 列入 Enter 具有换行的行为</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           ev.preventDefault();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li><p>keyup  键盘抬起事件</p>
<p>每次抬起发表一次。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;textarea rows=<span class="string">"8"</span> cols=<span class="string">"60"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'textarea'</span>)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    text.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>



<p>  <img src="http://xy.liruoning.cn/images/22-js-3.png" alt=""></p>
<h6 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h6><ul>
<li><p>submit，表单提交的行为，一旦这个行为发生的时候，通常会做表单项的数据验证，如果表单项的数据不合法，连服务器的大门都不让进</p>
</li>
<li><p>onsubmit 事件处理程序中，<code>return false</code>则阻止表单提交，如果<code>return true</code>则继续往下执行</p>
<p>一个利用submit事件处理的简单的表单验证的<code>demo</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"index.php"</span> method=<span class="string">"get"</span> onsubmit=<span class="string">"return checkVar()"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"username"</span> &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/form&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   function checkVar() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       var username = document.getElementById('username');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       var reg = /</span>^[A-Za-z]\w&#123;<span class="number">5</span>,<span class="number">19</span>&#125;$/;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">var</span> result = reg.test(username.value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (result)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           alert(<span class="string">"用户名通过"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">return</span>  result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           alert(<span class="string">"用户名必须是6-19位,以字母开头"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">return</span>  result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li>select：监视输入框的内容被选中的行为</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"index.php"</span> method=<span class="string">"get"</span> &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"username"</span> &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/form&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    var username = document.getElementById('username');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    /</span><span class="regexp">/监视输入框中的内容被选中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   username.onselect = function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       this.style.backgroundColor = 'red';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/22-js-4.png" alt=""></p>
<ul>
<li><p>focus：获得焦点（光标）行为</p>
</li>
<li><p>blur：失去焦点（光标）行为</p>
</li>
</ul>
<p>实现获得光标未填入内容时，显示为空。失去光标的时候，显示请输入用户名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"index.php"</span> method=<span class="string">"get"</span> &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"username"</span> &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/form&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    var username = document.getElementById('username');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    /</span><span class="regexp">/获得聚焦</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   username.onfocus = function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      if (this.value=='请输入用户名')&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">          this.value = "";</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">      &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   /</span><span class="regexp">/失去聚焦</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   username.onblur = function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       if (this.value=='') &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">           this.value = '请输入用户名'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/22-js-5.png" alt=""></p>
<ul>
<li><p>change：下拉列表内容改变的行为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"index.php"</span> method=<span class="string">"get"</span> &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &lt;select name=<span class="string">"city"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &lt;option value=<span class="string">"1"</span>&gt;北京市&lt;<span class="regexp">/option&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   &lt;option value="2"&gt;河北省&lt;/</span>option&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &lt;option value=<span class="string">"3"</span>&gt;湖南省&lt;<span class="regexp">/option&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   &lt;/</span>select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/form&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   var select = document.getElementsByName('city')[0];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   select.onchange = function () &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">       alert(this.value);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">   &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>load：html文档加载完毕行为</p>
<p>使用最多的地方就是window.onload了</p>
<h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4><p>以上就是 事件的基本内容 ，通过这次复习 自己感觉还是很有收获的。以前写功能的时候，有些功能自己也确实写复杂了，通过这次复习也了解到了一些简单的方式🤗。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>php流程控制回顾</title>
    <url>/2020/02/02/26-php%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h4 id="PHP数组的遍历"><a href="#PHP数组的遍历" class="headerlink" title="PHP数组的遍历"></a>PHP数组的遍历</h4><ul>
<li><p>php数组遍历的三种方式：</p>
<a id="more"></a>

<p>①for循环</p>
<p>只能遍历索引数组</p>
<p>②foreach循环</p>
<p>可以遍历索引数组也可以遍历关联数组</p>
<p><strong>会</strong>将数组的指针 reset() </p>
<p>[^reset — 将数组的内部指针指向第一个单元]: </p>
<p>③while list()、each()组合：可以遍历索引数组也可以遍历关联数组</p>
<p><strong>不会</strong>将数组的指针 reset()</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr=<span class="keyword">array</span>(<span class="string">'one'</span>=&gt;<span class="number">1</span>,<span class="string">'two'</span>=&gt;<span class="number">2</span>,<span class="string">'three'</span>=&gt;<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">while</span>(<span class="keyword">list</span>($key,$value)=each($arr))&#123; <span class="comment">//因为list只会接受 索引数组 所以只会接受返回的 索引数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> $key.<span class="string">"=&gt;"</span>.$value.<span class="string">"&lt;br/&gt;"</span>;<span class="comment">//one=&gt;1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                                    <span class="comment">//two=&gt;2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                                    <span class="comment">//three=&gt;3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure>

<ul>
<li><p>list() :将数组中的元素转为变量使用。</p>
<p>注1：只能是连续的索引数组才可以直接的等号赋值。</p>
<p>注2：list()中不能是<strong>值</strong>，只能是<strong>变量</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr  = <span class="keyword">array</span>(<span class="string">"中国"</span>,<span class="string">"北京"</span>,<span class="string">"上海"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">list</span>($a,$b,$c)=$arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $a.<span class="string">'&lt;br/&gt;'</span>;  <span class="comment">//中国</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $b.<span class="string">'&lt;br/&gt;'</span>;  <span class="comment">//北京</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $c.<span class="string">'&lt;br/&gt;'</span>;  <span class="comment">//上海</span></span></pre></td></tr></table></figure>

<p>​      注3：可以在list()参数中通过，空项选择性的接受数组的元素</p>
<p>​    </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr  = <span class="keyword">array</span>(<span class="string">"中国"</span>,<span class="string">"北京"</span>,<span class="string">"上海"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">list</span>($a,,$c)=$arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $a.<span class="string">'&lt;br/&gt;'</span>;  <span class="comment">//中国</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">echo</span> $c.<span class="string">'&lt;br/&gt;'</span>;  <span class="comment">//上海</span></span></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li><p>each():返回数组中当前的键／值对并将数组指针向前移动一步 </p>
<p>   注：如果指针移动到了末尾，将返回false。</p>
<p>   返回实例：</p>
<p><img src="http://xy.liruoning.cn/images/22-js-6.png" alt=""></p>
</li>
</ul>
<h4 id="php分支结构"><a href="#php分支结构" class="headerlink" title="php分支结构"></a>php分支结构</h4><ul>
<li><p>if….elseif :尽量把可能性大的往前放。</p>
</li>
<li><p>switch….case..</p>
<p>1、switch($var) 中的 $var 只能是<strong>整型</strong>、<strong>浮点</strong>、<strong>字符串</strong>。</p>
<p>2、当continue 作用到 switch 相当于 break的效果</p>
<p>3、会生成一个跳转表，直接跳转的相应的case</p>
<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4></li>
<li><p>PHP中如何优化多个if….elseif的情况</p>
<p>1、把可能性较大的，放前面。</p>
<p>2、如果判断的是整型、浮点、字符串，尽量用switch</p>
</li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php常量和数据类型回顾</title>
    <url>/2020/01/31/23-php%E5%B8%B8%E9%87%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h4 id="PHP字符串的定义方式及各自的区别"><a href="#PHP字符串的定义方式及各自的区别" class="headerlink" title="PHP字符串的定义方式及各自的区别"></a>PHP字符串的定义方式及各自的区别</h4><h5 id="字符串的定义有："><a href="#字符串的定义有：" class="headerlink" title="字符串的定义有："></a>字符串的定义有：</h5><p>单引号、双引号、heredoc、newdoc。  </p>
<a id="more"></a>
<h5 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h5><ul>
<li>单引号：<br>1、单引号不能解析变量<br>2、单引号不能解析转义字符，只能解析单引号和反斜杠<br>3、单引号的效率高于双引号。</li>
<li>双引号：<br>1、单引号能解析变量，变量可以使用特殊字符或者{}包含<br>2、单引号能解析转义字符</li>
<li>Heredoc类似于双引号(用来处理大文本)<br><img src="http://xy.liruoning.cn/images/23-php-1.png" alt=""></li>
<li>Newdoc 类似于单引号(用来处理大文本)<br><img src="http://xy.liruoning.cn/images/23-php-2.png" alt=""></li>
</ul>
<h4 id="php中的数据类型"><a href="#php中的数据类型" class="headerlink" title="php中的数据类型"></a>php中的数据类型</h4><p>在PHP中共有8大数据类型分为（‘标量’、‘复合’、‘特殊’）。  </p>
<h5 id="标量：整型、浮点型、字符串、bool。"><a href="#标量：整型、浮点型、字符串、bool。" class="headerlink" title="标量：整型、浮点型、字符串、bool。"></a><strong>标量：</strong>整型、浮点型、字符串、bool。</h5><p>1、浮点类型：浮点类型不能用到比较运算符。<br>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="number">0.1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$b = <span class="number">0.2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump((($a+$b)==<span class="number">0.3</span>));  <span class="comment">// bool(false)</span></span></pre></td></tr></table></figure>

<p><strong>解析</strong>：在计算机内两个浮点数相加实现转换成二进制（会有一定的损耗）然后在计算<br>$a+$b 算出来的结果可能等于0.299999999…  所以不和0.3相等。</p>
<p>2、bool类型：<br>在bool类型中false的几种情况（七种情况）：0、0.0、’0’、’’(空字符串不能有空格)、false、array()、NUll。  </p>
<p>3、数组类型：<br>超全局数组：</p>
<ul>
<li>$GLOABLES引用全局作用域中可用的全部变量</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $foo = <span class="string">"local variable"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">'$foo in global scope: '</span> . $GLOBALS[<span class="string">"foo"</span>] . <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">'$foo in current scope: '</span> . $foo . <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$foo = <span class="string">"Example content"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(); <span class="comment">//$foo in global scope: Example content</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//$foo in current scope: local variable</span></span></pre></td></tr></table></figure>

<p><strong>引申：</strong><br>globle:  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $foo = <span class="string">"local variable"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">global</span> $foo;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">'$foo in global scope: '</span> . $GLOBALS[<span class="string">"foo"</span>] . <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">'$foo in current scope: '</span> . $foo . <span class="string">"\n"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$foo = <span class="string">"Example content"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">test(); <span class="comment">//$foo in global scope: Example content</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//$foo in current scope: Example content</span></span></pre></td></tr></table></figure>

<p>globle和$GLOBALES的区别:globle声明的是和全局变量<strong>同名的一个引用</strong>。$GLOBALES是全局变量的<strong>本身</strong>。</p>
<ul>
<li>$_GET获得get方式提交过来的变量。  </li>
<li>$_POST获得post方式提交过来的变量。  </li>
<li>$_REQUEST 默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。</li>
<li>$_SESSION 当前脚本可用 SESSION 变量的数组。  </li>
<li>$_COOKIE  通过 HTTP Cookies 方式传递给当前脚本的变量的数组。</li>
<li>$_SERVER<br>1、<strong>SERVER_ADDR</strong>当前运行脚本所在的服务器的 IP 地址。<br>2、SERVER_NAME当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。<br>3、REQUEST_TIME’请求开始时的时间戳。从 PHP 5.1.0 起可用。<br>4、QUERY_STRING query string（查询字符串），如果有的话，通过它进行页面访问（?后面的内容）。<br>5、HTTP_REFERER （如果通过网址访问就是为空）引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。<br>6、HTTP_USER_AGENT当前请求头中 User-Agent: 项的内容，如果存在的话。该字符串表明了访问该页面的用户代理的信息。一个典型的例子是：Mozilla/4.5 [en] (X11; U;Linux 2.2.9 i586)。除此之外，你可以通过 get_browser() 来使用该值，从而定制页面输出以便适应用户代理的性能。<br>7、<strong>REMOTE_ADDR</strong>浏览当前页面的用户的 IP 地址(客户端的IP地址)。<br>8、REQUEST_URI URI 用来指定要访问的页面。例如 “/index.html”。<br>9、PATH_INFO包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息，如果存在的话。例如，如果当前脚本是通过 URL <a href="http://www.example.com/php/path_info.php/some/stuff?foo=bar" target="_blank" rel="noopener">http://www.example.com/php/path_info.php/some/stuff?foo=bar</a> 被访问，那么 $_SERVER[‘PATH_INFO’] 将包含 /some/stuff。   </li>
</ul>
<p>4、NULL<br>为NULL的三种情况：①直接赋值NULL②变量未赋值③变量unset销毁</p>
<h5 id="复合：数组、对象。"><a href="#复合：数组、对象。" class="headerlink" title="复合：数组、对象。"></a><strong>复合：</strong>数组、对象。</h5><h5 id="特殊：资源、NUll。"><a href="#特殊：资源、NUll。" class="headerlink" title="特殊：资源、NUll。"></a><strong>特殊：</strong>资源、NUll。</h5><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>常量：一经定义不能修改，不能删除。</p>
<h5 id="常量的定义"><a href="#常量的定义" class="headerlink" title="常量的定义"></a>常量的定义</h5><p>const<br>define  </p>
<h5 id="const和define区别"><a href="#const和define区别" class="headerlink" title="const和define区别"></a>const和define区别</h5><ul>
<li>const更快是语言结构，define是函数</li>
<li>const可以用于定义<strong>类</strong>的常量，define不能定义类的常量</li>
<li>const 不能在<strong>条件语句</strong>中使用</li>
<li>const只能接受<strong>普通的常量</strong>作为名称，default可以采用<strong>表达式</strong>作为名称</li>
<li>const定义常量是<strong>大小写敏感</strong>的，而default可通过第三个函数true(为表示大小写不敏感)来指定大小写是否敏感。</li>
</ul>
<h5 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h5><p>这些特殊的常量是不区分大小写的。<br>__FILE__、__LINE__、__DIR__、__FUNCTION__、__CLASS__、__TRAIT__、__METHOD__、__NAMESPACE__</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php运算符回顾</title>
    <url>/2020/01/31/25-php%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h4 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a>PHP运算符</h4><h5 id="错误控制符"><a href="#错误控制符" class="headerlink" title="错误控制符@"></a>错误控制符@</h5><p>当将其放置在一个<strong>PHP表达式之前</strong>，该表达式可能产生的<strong>任何错误</strong>信息都将被<strong>忽略</strong>。</p>
<a id="more"></a>
<h5 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h5><h5 id="递增-递减运算符"><a href="#递增-递减运算符" class="headerlink" title="递增/递减运算符"></a>递增/递减运算符</h5><ul>
<li>递增/递减运算符不影响<strong>bool</strong>值</li>
<li>递增NULL为1，递减NULL没有效果。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$a++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($a);  <span class="comment">// bool(true)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$b = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$b--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($b); <span class="comment">// NULL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$b++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($b);  <span class="comment">// int(1)</span></span></pre></td></tr></table></figure>

<ul>
<li><p>递增/递减在<strong><em>前</em></strong> <strong>先运算后返回</strong>，在<strong><em>后</em></strong> <strong>先返回后运算</strong></p>
<h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5></li>
<li><p><strong>短路</strong><br><code>true || $b==5</code><br><code>false &amp;&amp; $a ==3</code><br>以上两种都会触发短路效应（后面的不会执行）。</p>
</li>
<li><p>(|| &amp;&amp;) &gt; (and or) 优先级不同 </p>
<p><strong>练习：</strong></p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$c = <span class="keyword">false</span> || <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$d = <span class="keyword">false</span> <span class="keyword">or</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($c);<span class="comment">//bool(true)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">var_dump($d);<span class="comment">//bool(false)</span></span></pre></td></tr></table></figure>

<p>分析：</p>
<ul>
<li><p><code>$c = false || true;</code><br>由于 <code>||</code>的优先级大于 <code>=</code>(赋值运算符)<br>先执行 false || true -&gt; true 然后在赋值给 $c<br>故：<code>$c</code> 的值为 <code>true</code></p>
</li>
<li><p><code>$d = false or true;</code></p>
<p>由于 <code>=</code>的优先级大于 <code>or</code> 所以先执行 $d = false;<br>故： <code>$d</code>的值为<code>false</code></p>
<p><strong>练习：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a =<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$b =<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($a=<span class="number">3</span>&gt;<span class="number">0</span>||$b=<span class="number">3</span>&gt;<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var_dump($a);  <span class="comment">// bool(true)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    var_dump($b);  <span class="comment">//int(0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $a ++;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    $b ++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> $a.<span class="string">"\n"</span>; <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> $b.<span class="string">"\n"</span>; <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ul>
<li>（&gt;）&gt;  ( || )  &gt; (=) 运算符的优先级</li>
<li>先执行 3&gt;0 –&gt; true </li>
<li>$a = true || $b=3&gt;0</li>
<li>发生短路 $b = 3 &gt; 0 不执行</li>
<li>$a = true</li>
<li>$b = 0</li>
</ul>
</li>
</ul>
<h4 id="‘-’-‘-’"><a href="#‘-’-‘-’" class="headerlink" title="‘==’ ‘===’"></a>‘==’ ‘===’</h4><p>‘==’ 值相等就可以 </p>
<ul>
<li>0 0.0 ‘’ ‘0’ array() NULL  false 利用 ‘==’ 号都是相等的</li>
</ul>
<p>‘===’ 类型也要相等</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php中的引用变量和普通变量</title>
    <url>/2020/01/27/22-php%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F%E5%92%8C%E6%99%AE%E9%80%9A%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h4 id="PHP基础考点"><a href="#PHP基础考点" class="headerlink" title="PHP基础考点"></a>PHP基础考点</h4><ul>
<li>什么时<strong>引用变量</strong>？在PHP中，用什么<strong>符号</strong>定义引用变量？</li>
</ul>
<p><strong>概念：</strong>在PHP中引用变量意味着用不同的名字访问同一个变量的内容。  </p>
<a id="more"></a>
<p><strong>定义方式：</strong><br><code>&amp;</code></p>
<ul>
<li>当我们进行的普通传值的时候。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a =range(<span class="number">0</span>,<span class="number">6</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">xdebug_debug_zval(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//当$a 再给 $b 传完之之后 $b和$a 指向的是同一个地址空间（COW 在这时候并未发现任何变量发生修改“写的操作”）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$b= $a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">xdebug_debug_zval(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//当$a 发生写的操作的时候a才会指向另一个地址空间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$a=range(<span class="number">0</span>,<span class="number">6</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">xdebug_debug_zval(<span class="string">'a'</span>);</span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/21-php-1.png" alt=""></p>
<p><strong>解释：</strong><code>refcount</code>和<code>is_ref</code>。在PHP中每个PHP变量存在一个叫“<code>zval</code>”的变量容器中。在<code>zval</code>除了包含变量的类型和值，还包括两个字节的额外信息。第一个是”<code>is_ref</code>“，是个<code>bool</code>值，用来标识这个变量是否是属于引用集合(<code>reference set</code>)。通过这个字节，<code>php</code>引擎才能把普通变量和引用变量区分开来，由于php允许用户通过使用&amp;来使用自定义引用，<code>zval</code>变量容器中还有一个内部引用计数机制，来优化内存使用。第二个额外字节是”<code>refcount</code>“，用以表示指向这个zval变量容器的变量(也称符号即<code>symbol</code>)个数。所有的符号存在一个符号表中，其中每个符号都有作用域(<code>scope</code>)，那些主脚本(比如：通过浏览器请求的的脚本)和每个函数或者方法也都有作用域。<br><strong>分析：</strong>由以上的内容中refcount的值分别为1、2、1。当第二次的时候两个变量同时指向同一个‘zval’容器。当第三次的时候$a发生了·写操作·所以$a便开辟一个新的‘zval’。</p>
<p>画图解释：<br>1、$a=range(0,6);</p>
<p><img src="http://xy.liruoning.cn/images/21-php-2.png" alt=""><br>2、$b=$a;<br><img src="http://xy.liruoning.cn/images/21-php-3.png" alt=""></p>
<p>在这个时候PHP并不会开辟一块新的空间而是和$a一样同时指向同一块空间。<br>3、$a=range(0,6);<br><img src="http://xy.liruoning.cn/images/21-php-4.png" alt=""><br>这个时候$a发生了写操作开辟了一个新空间。</p>
<ul>
<li>引用传值<br>代码：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a =range(<span class="number">0</span>,<span class="number">6</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">xdebug_debug_zval(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//当$a 再给 $b 传完之之后 $b和$a 指向的是同一个地址空见</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$b= &amp;$a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">xdebug_debug_zval(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//当$a 发生写的操作的时候a才会指向另一个地址空间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$a=range(<span class="number">0</span>,<span class="number">6</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">xdebug_debug_zval(<span class="string">'a'</span>);</span></pre></td></tr></table></figure>
<p><img src="http://xy.liruoning.cn/images/21-php-5.png" alt=""></p>
<p>1、$a=range(0,6);</p>
<p><img src="http://xy.liruoning.cn/images/21-php-2.png" alt=""></p>
<p>2、$b=&amp;$a;<br><img src="http://xy.liruoning.cn/images/21-php-3.png" alt=""></p>
<p>在这个时候PHP并不会开辟一块新的空间而是和$a一样同时指向同一块空间。</p>
<p>3、$a=range(0,6);<br><img src="http://xy.liruoning.cn/images/21-php-6.png" alt=""></p>
<p>二者同时发生变化但是都是指向同一块地址。$a发生变化的值等于$b的值。</p>
<ul>
<li>unset()只会取消引用，不会销毁内存空间</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$b = &amp;$a;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">unset</span>($b);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $a;  <span class="comment">// 1</span></span></pre></td></tr></table></figure>

<p>$a = 1;<br>$b = &amp;$a;</p>
<p><img src="http://xy.liruoning.cn/images/21-php-7.png" alt=""></p>
<p>unset($b);<br><img src="http://xy.liruoning.cn/images/21-php-8.png" alt=""></p>
<p>输出 $a<br>虽然销毁的 $b，但是 $a 的引用和内存空间依旧存在。<br><code>echo $a; // 1</code></p>
<h4 id="php中对象之间的赋值为引用赋值"><a href="#php中对象之间的赋值为引用赋值" class="headerlink" title="php中对象之间的赋值为引用赋值"></a>php中对象之间的赋值为引用赋值</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span>  $name = <span class="string">"zhangsan"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$p1 = <span class="keyword">new</span> Person();</span></pre></td></tr><tr><td class="code"><pre><span class="line">$p2 = $p1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$p1-&gt;name = <span class="string">"lisi"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $p2-&gt;name;  <span class="comment">// lisi</span></span></pre></td></tr></table></figure>

<p>对象本身的赋值就是引用赋值。当我改变$p1的name属性的时候。$p2的也会改变，因为两者是指向的同一地址空间。</p>
<h4 id="面试真题"><a href="#面试真题" class="headerlink" title="面试真题"></a>面试真题</h4><p>程序运行时，每一次循环结束后变量 $d 的值是什么？请解释。<br>程序执行完成后，变量 $d 的值是什么？请解释。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$d = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]; </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($d <span class="keyword">as</span> $k =&gt; $v)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  $v = &amp;$d[$k];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>第一次循环<br>$v = &amp;$d[$k]; // 这个时候$k=0-&gt;$d[0]=a-&gt;$v  </li>
<li>第二次循环<br>$v = &amp;$d[$k]; // $d[1]=b-&gt;$v=b-&gt;$d[0]=b</li>
<li>第三次循环  在上一次循环中$v = &amp;$d[1];改变了$v指向的内存地址<br>$v = &amp;$d[$k]; // $d[2]=c-&gt;$v=c-&gt;$d[1]=c  </li>
</ul>
<p>最后的结果b c c</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis编译安装，phpRedis扩展编译安装</title>
    <url>/2020/01/21/50-redis/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;由于自己很长时间不撸redis了，就打算最近把redis在撸一遍，像主从复制，以前搭的时候没有做笔记，自己也没有好好复习，所以知识一点一点的丢失了。借这个机会记录一下，下面是redis 以及 PHPRedis扩展 在 centos 系统的编译安装。</p>
<a id="more"></a>

<h4 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h4><ol>
<li><p>进入官方站点: redis.io 下载最新版或者最新stable版右击复制链接地址，如图所示</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-1.png" alt=""></p>
</li>
<li><p><code>cd /usr/local/src</code>  这个文件里面 执行 <code>wget http://download.redis.io/releases/redis-5.0.8.tar.gz</code></p>
</li>
<li><p>将tar 包下载下来</p>
</li>
<li><p><code>tar -zxvf redis-5.0.8.tar.gz</code> 解压 文件</p>
</li>
<li><p>cd 到解压的文件里面 执行 make 。<strong>说明</strong> 不用configure ，源码是官方configure过的,但官方configure时,生成的文件有时间戳信息, Make只能发生在configure之后。所以你的 电脑时间一定要准确，要不会出现make不停的情况</p>
</li>
<li><p>Hint: It’s a good idea to run ‘make test’ ;)  根据提示 执行 make test</p>
<p>还真出现了 error </p>
<p><code>cd src &amp;&amp; make test
make[1]: Entering directory /usr/local/src/redis-5.0.8/src
You need tcl 8.5 or newer in order to run the Redis test
make[1]:  [test] Error 1
make[1]: Leaving directory  /usr/local/src/redis-5.0.8/src
make: [test] Error 2</code></p>
<p>根据提示安装 tcl 8.5 执行<code>yum install tcl</code></p>
<p>然后在cd 到src 目录进行 make test 就顺利完成了</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-2.png" alt=""></p>
</li>
<li><p>安装到指定的目录,比如 /usr/local/redis</p>
<p><code>make PREFIX=/usr/local/redis install</code></p>
<p><strong>注:</strong> PREFIX要大写</p>
</li>
<li><p>进入安装的 redis 目录 然后查看 bin 目录</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-4.png" alt=""></p>
</li>
<li><p>redis-benchmark 性能测试工具</p>
<p>redis-check-aof 日志文件检测工(比如断电造成日志损坏,可以检测并修复)</p>
<p>redis-check-dump 快照文件检测工具,效果类上</p>
<p>redis-cli  客户端</p>
<p>redis-server 服务端</p>
</li>
<li><p><strong>copy 配置文件</strong> 执行：<code>复制配置文件cp /#path/redis.conf /usr/local/redis</code></p>
</li>
<li><p>启动server </p>
<p><img src="http://xy.liruoning.cn/images/50-redis-5.png" alt=""></p>
</li>
<li><p>大家可以看到在小黑眶下运行并不是我们想要的。修改redis 后台运行</p>
<p>编辑conf配置文件,修改内容 daemonize yes</p>
<p>修改完在启动redis 就是后台运行了</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-6.png" alt=""></p>
</li>
<li><p>连接: 用redis-cli</p>
<p>#/path/to/redis/bin/redis-cli [-h localhost -p 6379 ]</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-7.png" alt=""></p>
</li>
</ol>
<p>到此redis 安装 告一段落</p>
<h4 id="phpRedis扩展编译安装"><a href="#phpRedis扩展编译安装" class="headerlink" title="phpRedis扩展编译安装"></a>phpRedis扩展编译安装</h4><ol>
<li>首先打印下phpinfo() 确定没有 redis php的扩展</li>
</ol>
<p><img src="http://xy.liruoning.cn/images/50-redis-3.png" alt=""></p>
<ol start="2">
<li><p>到pecl.php.net 搜索redis</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-8.png" alt=""></p>
<p><img src="http://xy.liruoning.cn/images/50-redis-9.png" alt=""></p>
<p><img src="http://xy.liruoning.cn/images/50-redis-10.png" alt=""></p>
</li>
<li><p><code>cd /usr/local/src</code>  <code>wget http://pecl.php.net/get/redis-5.2.0.tgz</code>下载stable版(稳定版)扩展 </p>
<p><img src="http://xy.liruoning.cn/images/50-redis-11.png" alt=""></p>
</li>
<li><p>tar 解压安装包  <code>tar -zxvf  redis-5.2.0.tgz</code></p>
</li>
<li><p>执行/php/path/bin/phpize (作用是检测PHP的内核版本,并为<strong>扩展生成相应的编译配置</strong>)</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-12.png" alt=""></p>
</li>
<li><p>再一次 <code>ls redis-5.2.0</code> 扩展文件发现多了一个configure 目录</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-13.png" alt=""></p>
</li>
<li><p><code>./configure --with-php-config=/php/path/bin/php-config</code> 指定php 的配置路径</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-14.png" alt=""></p>
</li>
<li><p>最后 make &amp;&amp; make install 完成之后会显示 扩展 放入的目录</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-15.png" alt=""></p>
<p><img src="http://xy.liruoning.cn/images/50-redis-16.png" alt=""></p>
</li>
<li><p><strong>编辑php.ini</strong>  首先 cd 到PHP 的etc目录 下 修改php.ini 添加如下内容</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-17.png" alt=""></p>
</li>
<li><p>重启PHP 并打印 phpinfo 搜随redis 如果出现下图所示那么就完成了</p>
<p><img src="http://xy.liruoning.cn/images/50-redis-18.png" alt=""></p>
<p><img src="http://xy.liruoning.cn/images/50-redis-19.png" alt=""></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>JS内置对象（正则表达式、DOM、BOM、WINDOW）</title>
    <url>/2020/01/20/20-js%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A12/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇blog本来想再过几天在要完成的，因为自己参加的那个小项目甲方那边有些改动。想先完成那边的需求在来复习的。可是这边也是就剩一个小尾巴了所以。直接接写完得了~</p>
<a id="more"></a>
<h4 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h4><ul>
<li>new RegExp(正则表达式，模式修正符);<br>例子：<br>筛选数字部分。<br>//<code>g</code> Javascript独有的，全局匹配（preg_match_all）  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'hello15621abcd'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\d+/</span>,<span class="string">'g'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> result=str.match(reg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">//Array(1) 0: "15621"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>//模式修正符，没有引号包裹;  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'hello15621abcd'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/\d+/g</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> result=str.match(reg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">//["15621"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>在javascript中，表示中文的范围：[\u4e00-\u9fa5];</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'你好(hello)'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/[\u4e00-\u9fa5]+/g</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> result=str.match(reg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">//["你好"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>在javascript中，不支持逆向预查，支持正向预查</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'good good study,up up day'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/\w+(?=od)/g</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> result = str.match(reg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(result);          <span class="comment">//(2) ["go", "go"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>Javascript的正则表达式对象，提供了2个方法，用来检测<br>test()，检测是否符合规则；是就返回true，否就返回false<br>exec()，检测是否符合规则，符合就返回匹配的内容，不匹配返回null</li>
</ul>
<h4 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h4><p>DOM：doucument(文档)、Objecj(对象)、Model(模型)。Javascript是将Html中的标签转换成Javascript对象。<br><img src="http://xy.liruoning.cn/images/20-js-1.png" alt=""></p>
<ul>
<li>DOM将HTML标签转换成Javascript对象之后,标签里面的属性也会被转换Javascript对象的属性。</li>
<li>HTML中的标签不是孤立的，也是有层级关系的。当转换成Javascript中的对象之后，这些层级关系依旧是存在的。<h5 id="DOM节点的查找"><a href="#DOM节点的查找" class="headerlink" title="DOM节点的查找"></a>DOM节点的查找</h5></li>
<li>通过id查找DOM结点。getElementById();</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">"img/1.jpeg"</span> width=<span class="string">"100"</span> height=<span class="string">"150"</span> id=<span class="string">"imgid"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">'imgid'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(dom.src);      <span class="comment">// http://localhost/JS/img/1.jpeg</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(dom.width);   <span class="comment">// 100</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(dom.height); <span class="comment">// 150</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>body&gt;</span></pre></td></tr></table></figure>

<ul>
<li>通过标签的名字查找：document.getElementsByTagName  </li>
</ul>
<p><strong>说明：</strong>通过标签名查找，会找到很多对象，返回的是数组格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span>two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span>three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span>four<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/ul&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    var  domArr=document.getElementsByTagName("li");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    console.log(domArr);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/body&gt;</span></span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/20-js-2.png" alt=""></p>
<p>利用标签名的查找写了一个。全选、返选、全不选。的小功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span>two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span>three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span>four<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/ul&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;a href="javascript:Qx()"&gt;全选&lt;/</span>a&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:Qbx()"</span>&gt;全不选&lt;<span class="regexp">/a&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;a href="javascript:fx()"&gt;反选&lt;/</span>a&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span>  domArr=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(domArr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Qx</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;domArr.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            domArr[i].checked = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Qbx</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;domArr.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            domArr[i].checked = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fx</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;domArr.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            alert(domArr[i].checked)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(domArr[i].checked) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                domArr[i].checked = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                domArr[i].checked = <span class="literal">true</span> ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p>选项卡效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:tab(0)"</span>&gt;朱熹&lt;<span class="regexp">/a&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;a href="javascript:tab(1)"&gt;朱元璋&lt;/</span>a&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:tab(2)"</span>&gt;朱棣&lt;<span class="regexp">/a&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;a href="javascript:tab(3)"&gt;王守仁&lt;/</span>a&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">"display: block"</span>&gt;朱熹哲学&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;div style="display: none"&gt;朱元璋帝学&lt;/</span>div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">"display: none"</span>&gt;朱棣反学&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;div style="display: none"&gt;王守仁伟大哲学&lt;/</span>div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span>  domArr=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span>  <span class="title">tab</span>(<span class="params">index</span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;domArr.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            alert(domArr[i].style.display);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            domArr[i].style.display=<span class="string">"none"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        domArr[index].style.display=<span class="string">'block'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>body&gt;</span></pre></td></tr></table></figure>

<ul>
<li>通过name属性查找：document.getElementsByName()  </li>
</ul>
<p><strong>说明：</strong>都哪些标签有name属性？form标签有name属性，所以该方法主要针对的就是表单选项。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">from</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"man"</span>&gt;男</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"woman"</span>&gt;女</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/from&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    var res = document.getElementsByName("sex");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    console.log(res); /</span><span class="regexp">/NodeList(2) [input, input]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    res[1].checked = true; /</span><span class="regexp">/开始女生性别被选中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<ul>
<li>通过class属性查找：document.getElementsByClassName  </li>
</ul>
<p><strong>说明：</strong>该方法是html5新增方法，在主流浏览器都支持，IE678都不支持，做得手机网页（web app），都支持该方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"rose"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    玫瑰one</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;li class="rose"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    玫瑰two</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"rose"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    红玫瑰</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> rose = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"rose"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(rose);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    rose[<span class="number">2</span>].style.color=<span class="string">"red"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>title、body，由于html文档中只有一个，查找的时候，可以直接这样：<br>document.title ：title标签节点对象;<br>document.body：body节点对象;<br>document.body.style.background = ‘green’;  </li>
</ul>
<h5 id="DOM节点的操作"><a href="#DOM节点的操作" class="headerlink" title="DOM节点的操作"></a>DOM节点的操作</h5><p><strong>说明：</strong>查找到DOM对象之后，我们做什么呢？<br>一个标签，无非就是由属性、内容、css样式组成，所以我们对DOM节点的操作也就是：<br>操作属性：</p>
<ul>
<li>DOM对象.属性名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> dom test&lt;<span class="regexp">/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">var  op = document.getElementsByTagName('p')[0];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">op.id = 'pp'; /</span><span class="regexp">/增加了id属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<ul>
<li>通过对象方法setAttribute、getAttribute、removeAttribute</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> dom test&lt;<span class="regexp">/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;p&gt;this dom test&lt;/</span>p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  op = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  op2 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">op.setAttribute(<span class="string">'id'</span>,<span class="string">'pp'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">op2.setAttribute(<span class="string">'id'</span>,<span class="string">'pp'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">alert(op.getAttribute(<span class="string">'id'</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">op2.removeAttribute(<span class="string">'id'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>操作内容：innerText、innerHTML<br>innerText，仅操作文字内容部分<br>innerHTML，可以操作标签中的html子标签  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> dom test&lt;<span class="regexp">/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;p&gt;this dom test&lt;/</span>p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">res[<span class="number">0</span>].innerText=<span class="string">"&lt;em&gt;this is test&lt;/em&gt;"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">res[<span class="number">1</span>].innerHTML=<span class="string">"&lt;em&gt;this is test&lt;/em&gt;"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>
<p><img src="http://xy.liruoning.cn/images/20-js-3.png" alt=""></p>
<ul>
<li>操作样式<br>方法1：DOM节点对象.style.css样式名，如果css样式是合成词，例如：font-size，background-color，设置css样式时，需要采用小驼峰的规则。<br>方法2：通过className来设置、读取class属性的值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> dom test&lt;<span class="regexp">/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;p&gt;&lt;/</span>p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">res[<span class="number">0</span>].style.fontSize = <span class="string">'30px'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">res[<span class="number">0</span>].style.backgroundColor=<span class="string">'red'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">res[<span class="number">0</span>].className = <span class="string">'p1'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">alert(res[<span class="number">0</span>].className);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<h5 id="DOM节点类型"><a href="#DOM节点类型" class="headerlink" title="DOM节点类型"></a>DOM节点类型</h5><p>通过下面的例子，我们发现ul下面有7个子节点，空白部分也被当做是节点对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;apple&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li&gt;orange&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;peach&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> childs = res.childNodes;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(childs);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/20-js-4.png" alt=""></p>
<p>DOM将html文档转换成JavaScript对象之后<br>标签被当做标签节点，类型是1<br>属性部分被当做属性节点，类型是2<br>空白部分会被当做是空白节点，类型为3  </p>
<h5 id="DOM节点之间的关系"><a href="#DOM节点之间的关系" class="headerlink" title="DOM节点之间的关系"></a>DOM节点之间的关系</h5><p><strong>说明：</strong><br>由于节点之间如果有空白节点的话，不方便获得具体的节点，所以我们通常会先将空白节点删除，再查找<br>删除节点的语法：父节点.removeChild(子节点)   </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;apple&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li&gt;orange&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;peach&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> childs = res.childNodes;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;childs.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (childs[i].nodeType==<span class="number">3</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.removeChild(childs[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>父子关系<br>childNodes：属性，获得节点下面的所有子节点<br>firstChild：属性，第一个子节点<br>lastChild：属性，最后一个子节点<br>parentNode：属性，获得当前节点的父节点  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;apple&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li&gt;orange&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;peach&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> childs=res.childNodes;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;childs.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (childs[i].nodeType==<span class="number">3</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.removeChild(childs[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> first = res.firstChild;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> last = res.lastChild;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = first.parentNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(childs);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(first);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(last);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(parent);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/20-js-5.png" alt=""></p>
<ul>
<li>兄弟姐妹<br>previousSibling：当前节点的前一个同辈节点，哥哥、姐姐<br>nextSibling：当前节点的下一个同辈节点，弟弟、妹妹  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;apple&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;li&gt;orange&lt;/</span>li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li&gt;peach&lt;<span class="regexp">/li&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> childs=res.childNodes;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;childs.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (childs[i].nodeType==<span class="number">3</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        res.removeChild(childs[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> orange = childs[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> prev   = orange.previousSibling;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> next   = orange.nextSibling;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(prev);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(next);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><img src="http://xy.liruoning.cn/images/20-js-6.png" alt=""></p>
<h4 id="DOM节点添加、删除"><a href="#DOM节点添加、删除" class="headerlink" title="DOM节点添加、删除"></a>DOM节点添加、删除</h4><p>添加节点分为2个步骤：<br>创建标签节点：document.createElement()<br>确定其位置：appendChild、insertBefore  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    发布留言：</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    var text = document.createElement('textarea');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    document.body.appendChild(text); /</span><span class="regexp">/在body体的后面创建标签</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    发布留言：</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    var button= document.getElementsByTagName('button')[0];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    var text = document.createElement('textarea');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    document.body.insertBefore(text,button);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>script&gt;</span></pre></td></tr></table></figure>

<ul>
<li>删除节点：父节点.removeChild(子节点)  </li>
</ul>
<h4 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h4><p>BOM(Browser Object Model),该模型给我们提供了通过Js操作浏览器的接口。  </p>
<ul>
<li>操作地址栏：使用location子对象<br>操作url地址栏</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   location.href=<span class="string">"http://www.baidu.com"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li><p>操作历史记录： 使用<code>history</code>子对象<br>操作历史记录（前提是：网页需要先有历史记录，才能通过<code>JavaScript</code>操作前进、后退）<br>通过<code>JavaScript</code>操作前进、后退，通过：<br><code>history</code>对象的方法：<br><code>go(-1)</code>，后退1步<br><code>go(2)</code>，前进2步<br><code>go(0)</code>，刷新页面<br><code>back()</code>:后退1步<br><code>forward()</code>：前进1步  </p>
</li>
<li><p>屏幕： screen<br>获得屏幕分辨率的信息<br>width<br>height<br>availdWidth：可用宽度（去掉任务栏宽度）<br>availHeight：可用高度（去掉任务栏的高度）</p>
</li>
<li><p>navigator子对象：<br>获得浏览器的信息<br>appName：    返回浏览器内核名称<br>appVersion：    返回浏览器和平台的版本信息<br>platform：    返回运行浏览器的操作系统平台<br>userAgent：    返回由客户机发送服务器的 user-agent 头部的值  </p>
</li>
</ul>
<h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><p>Window对象是前面我们总结的6个内置对象的父对象，也就是说前面6个内置的对象都是属于window的子对象。  </p>
<p>除了上述的对象、方法之外，window对象还给我们提供了如下方法：<br><code>confirm</code>：弹出确认框，返回值：如果点击确认返回true，点击取消返回false</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> result = <span class="built_in">window</span>.confirm(<span class="string">"你确定要删除吗？"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  alert(result);  <span class="comment">//true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>prompt()</code>：弹出输入框，点击确认返回输入的内容，点击取消返回null</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> result = <span class="built_in">window</span>.prompt(<span class="string">"你确定要删除吗？"</span>,<span class="number">55</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  alert(result);  <span class="comment">//55</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>setInterval()</code>、<code>clearInterval()</code><br>设置间隔执行（每隔多少时间执行），类似于定时器、定时炸弹。一旦开启之后，每隔一定的时间执行一次</p>
<p><strong>练习</strong>：实时获得当前的时间：年-月-日  时:分:秒，并显示到p段落里面  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p id=<span class="string">"num"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;a href="javascript:stop()"&gt;让时间停止&lt;/</span>a&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:carryOn()"</span>&gt;让时间继续&lt;<span class="regexp">/a&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var idFlag = document.getElementById('num');</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    function TimeStart() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        var date = new Date();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        var year=date.getFullYear();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        var mouth = date.getMonth()+1;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        mouth=mouth&lt;10?'0'+mouth:mouth;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        var day = date.getDate();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        day=day&lt;10?'0'+day:day;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        var  hour = date.getHours();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        var minute = date.getMinutes();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        var second = date.getSeconds();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        idFlag.innerText=year+"</span>年<span class="string">"+mouth+"</span>月<span class="string">"+day+"</span>日<span class="string">"+hour+"</span>时<span class="string">"+minute+"</span>分<span class="string">"+second+"</span>秒<span class="string">";</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var timer= window.setInterval(TimeStart,1000);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    function stop() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        clearInterval(timer);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    function carryOn() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        clearInterval(timer);  //先清楚上一个setInterval</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        timer=window.setInterval(TimeStart,1000);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>setTimeout()</code>、<code>clearTimeout()</code><br>设置延迟执行（延迟多少时间之后执行一次）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> re1 = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">window</span>.document.body.style.backgroundColor=<span class="string">"red"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,<span class="number">3000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4><p>JS不像PHP是面向对象的编程语言，由类实例化对象而来，JavaScript是<strong>基于对象</strong>的编程语言，就是由一个一个的对象组成的编程语言。<br>由于：JS是基于对象的语言，由不同的对象，组成的编程语言，我们学习这些对象就是对对象的属性和方法。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS数值类型的转换和流程控制</title>
    <url>/2020/01/16/19-js%E6%95%B0%E5%80%BC%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>今天还是继续js的简单复习吧(数值类型的转换和流程控制)。</p>
<a id="more"></a>
<h4 id="数值类型的转换"><a href="#数值类型的转换" class="headerlink" title="数值类型的转换"></a>数值类型的转换</h4><ul>
<li><p>自动类型转换：<br>当字符串、数值类型的数据，进行加法运算时，数值类型会自动转换成字符串，当在if中会自动转化成bool类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> b = <span class="string">'1'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(a+b);          <span class="comment">// 11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a+b));  <span class="comment">//string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>强制类型转换：<br>通过JavaScript函数，强制将某种类型转换，类型转换的函数有如下：<br>Number()      强制将其他类型的数据转换成数值<br>parseInt()    强制将其他类型的数据转换成整数<br>parseFloat()  强制将其他类型的数据转换成小数<br>String()      将其他类型的数据转换成字符串<br>Boolean()     将其他类型的数据转换成布尔类型    </p>
</li>
</ul>
<h4 id="JavaScript运算符"><a href="#JavaScript运算符" class="headerlink" title="JavaScript运算符"></a>JavaScript运算符</h4><ul>
<li><p>1）算数运算符<br><code>\+</code>   <code>\-</code>   <code>\*</code>   <code>/</code>    <code>%</code>    <code>++</code>   <code>--</code><br>说明：JavaScript里面的 +，除了四则运算的功能之外，还用来连接字符串<br>例如： ‘1’ + 1   ==   ‘11’<br>前++，前—：先值增（值减），再运算<br>后++，后–：先运算，后值增（值减），也就是说，先运算，第二次在使用的时候，值才发生变化</p>
</li>
<li><p>2）赋值运算符<br><code>=</code>  <code>+=</code>  <code>-=</code>  <code>*=</code>  <code>/=</code>  <code>%=</code><br>将符号右边的值，赋值给左边 </p>
</li>
<li><p>3）比较运算符<br>用来比较值，<code>&gt;</code>   <code>&lt;</code>   <code>==</code>   <code>===</code>   <code>!=</code>  <code>!==</code>   <code>&gt;=</code>  <code>&lt;=</code><br><code>==</code>，两个等号，用来比较值是否相等<br><code>===</code>，三个等号，用来比较值、数据类型是否全等  </p>
</li>
<li><p>4）逻辑运算符<br>  <code>&amp;&amp;</code>   <code>||</code>   <code>！</code></p>
</li>
<li><p>5）三元运算符<br>  条件 <code>==</code> true ？执行这里：条件不成立时执行这里  </p>
</li>
</ul>
<h4 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h4><p>在这里我就不多加赘述了 if switch for for…in while do…while</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS内置对象（Array、String、Math、Date）</title>
    <url>/2020/01/16/20-js%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A11/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>JS不像PHP是面向对象的编程语言，由类实例化对象而来，JavaScript是<strong>基于对象</strong>的编程语言，就是由一个一个的对象组成的编程语言。<br>由于：JS是基于对象的语言，由不同的对象，组成的编程语言，我们学习这些对象就是对对象的属性和方法。</p>
<a id="more"></a>
<h4 id="数组对象的常用方法"><a href="#数组对象的常用方法" class="headerlink" title="数组对象的常用方法"></a>数组对象的常用方法</h4><p><code>length</code>，获得数组的元素个数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(arr.length); <span class="comment">//3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>concat</code>,合并数组生成一个新数组  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr2 = [<span class="string">'four'</span>,<span class="string">'five'</span>,<span class="string">'six'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span>  new_arr = arr.concat(arr2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(new_arr); <span class="comment">//one,two,three,four,five,six</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>join（）</code>,将数组的元素连接成字符串  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res = arr.join(<span class="string">'='</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(res);  <span class="comment">//one=two=three</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>push()</code>，向数组的末尾添加元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    arr.push(<span class="string">'four'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(arr);  <span class="comment">//one,two,three,four</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>pop()</code>，把数组的最后一个元素删除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    arr.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(arr);  <span class="comment">//one,two</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>shift()</code>，删除第一个元素<br><code>unshift()</code>，向数组的开头添加元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    arr.shift();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    arr.unshift(<span class="string">'zero'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(arr);  <span class="comment">//zero,two,three</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>reverse（）</code>,颠倒数组的顺序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    arr.reverse();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(arr); <span class="comment">//three,two,one</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>slice(start，end)</code>，截取数组的元素  参数1：开始的索引位置 参数2：结束的索引位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    arr.slice(<span class="number">0</span>,<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(arr.slice(<span class="number">0</span>,<span class="number">1</span>)); <span class="comment">//one</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>splice(startIndex，deleteCount，values)</code><br>删除数组的元素<br>参数1：开始的索引位置<br>参数2：删除的元素个数<br>参数3：可选，如果有参数3，表示使用参数3的值代替删除的内容<br><strong>返回值：</strong>删除的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res=arr.splice(<span class="number">0</span>,<span class="number">2</span>,<span class="string">'zero'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(res+<span class="string">'&lt;br /&gt;'</span>);  <span class="comment">//one,two</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(arr);      <span class="comment">//zero,three</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>toString()</code>, 将数组转换成字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res= arr.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(res);   <span class="comment">//one,two,three</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<h4 id="字符串对象常用方法"><a href="#字符串对象常用方法" class="headerlink" title="字符串对象常用方法"></a>字符串对象常用方法</h4><p><code>split（）</code>，按照分隔符将字符串拆分成数组  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'www.lrnjy.club'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res=str.split(<span class="string">'.'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">//["www", "lrnjy", "club"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>indexOf()</code>，获得字符在字符串中第一次出现的位置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'www.lrnjy.club'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res=str.indexOf(<span class="string">'l'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">//4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>lastIndexOf()</code>，获得字符在字符串中最后一次出现的位置  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'www.lrnjy.club'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res=str.lastIndexOf(<span class="string">'l'</span>); </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">// 11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>split（）</code>，按照分隔符将字符串拆分成数组<br>参数1：分隔符，按照什么分隔符进行拆分<br>参数2：可选，限制要几个元素  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'www.lrnjy.club'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res=str.split(<span class="string">'.'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">//  ["www", "lrnjy", "club"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>replace（a,b）</code>,将a替换成b</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'www.lrnjy.club232'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> reg= <span class="regexp">/\d+/</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span>  res = str.replace(reg,<span class="string">'=='</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(res);     <span class="comment">//www.lrnjy.club==</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>charAt（index）</code>，查找在index这个索引处的字符。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str = <span class="string">'www.lrnjy.club232'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> character = str.charAt(<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(character); <span class="comment">// .</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><code>slice(start，end)</code>，从start开始截取，截取到end这个位置<br><code>substr(start,length)</code>，从start位置开始截取，截取length个长度<br><code>toLowerCase()</code>，将字符串转换成小写<br><code>toUpperCase()</code>，将字符串转换成大写  </p>
<h4 id="数学对象常用方法"><a href="#数学对象常用方法" class="headerlink" title="数学对象常用方法"></a>数学对象常用方法</h4><ul>
<li>Math.abs()    计算绝对值  </li>
<li>Math.ceil()，向上取整数，不管小数点后面小数是多少，都会进一取整  </li>
<li>Math.floor()，向下取整数<br>不管小数点后面是多少，忽略小数点后面的  </li>
<li>Math.round()，四舍五入取整 </li>
<li>Math.max()，计算最大值  </li>
<li>Math.min()，计算最小值</li>
<li>Math.pow(x,y) 获得x的y次方【幂】<br>例如：2的3次方：2<em>2</em>2，Math.pow(2,3)  </li>
<li>Math.sqrt(num) 获得num的平方根<br>例如：12*12，也就是说12的平方是144，反过来说：144的平方根就是：12  </li>
<li>Math.random()    取得0-1之间的随机数  </li>
</ul>
<h4 id="日期对象常用方法"><a href="#日期对象常用方法" class="headerlink" title="日期对象常用方法"></a>日期对象常用方法</h4><p>通过new Date()获得日期对象<br>日期对象提供了如下方法，获得年月日、时分秒：</p>
<ul>
<li>getFullYear</li>
<li>getMonth()</li>
<li>getDate()</li>
<li>getHours()`</li>
<li>getMinutes()`</li>
<li>getSeconds()`  </li>
<li>getDay()获得星期几</li>
<li>getMilliSeconds() 获得时间后面的毫秒数：1000毫秒==1秒   </li>
<li>getTime() 获得当前的时间戳（单位是毫秒的时间戳）</li>
<li>toLocaleString() 将日期对象转换成本地的时间格式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.write(date.toLocaleString()) <span class="comment">//2020/1/16 下午9:54:58</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong>设置时间：</strong>  </p>
<ul>
<li>setFullYear()  </li>
<li>setMonth()  </li>
<li>setDate()<br>需求：获得上一月24号是星期几？<br>思路：先将月份设置为上一月，再将日期设置为24号，再获得是星期几？  </li>
</ul>
<h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4><p>以上是内置对象的四个部分，剩下的下篇博文总结。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基本类型</title>
    <url>/2020/01/15/18-js%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>从一月八号放假回家到现在一直没有更新blog实在是惭愧~（中间有事情耽搁了’刚回家事多‘，以后会持续更新丰富自己的bolg），今天把JS简单过了一下我在这里做一下总结（实在是难受自从19年过完春节，学完JS到现在一直都是只做服务端的开发，很少接触JS手都生了打算最近把基础知识点拾起来flag~）。</p>
<a id="more"></a>
<h4 id="JS脚本的位置"><a href="#JS脚本的位置" class="headerlink" title="JS脚本的位置"></a>JS脚本的位置</h4><ul>
<li>可以嵌套在 <head> 标签里面也可以嵌套在body题里面，<strong>但是js的代码必须放放到&lt;script&gt;标签里面</strong> </li>
<li>一般代码比较多我们都会使用<script>中的 src 属性将文件加载进来列如    <script type="text/javascript" src="js/index.js"></script>  
JS也可以嵌套在<a>标签中<br>&lt;a href="javascript:alert(' target="_blank" rel="noopener"点击购买吗？')"&gt;点击购买&lt;/a&gt;</li>
</ul>
<h5 id="关于JS单双引号嵌套问题"><a href="#关于JS单双引号嵌套问题" class="headerlink" title="关于JS单双引号嵌套问题"></a>关于JS单双引号嵌套问题</h5><p>单引号和双引号之间可以相互嵌套。<br>1、单引号内只能嵌套双引号。<br>2、双引号内只能嵌套单引号。<br>3、如果想在双引号内，再嵌套双引号，里面的双引号，一定要进行转义（\”）。<br>4、JS中的转义字符是反斜杠().常用的转义字符有：\’、\”、\、\r、\n等。<br>转义字符也就是，当浏览器遇到反斜杠()时，将会对其后的一个字符进行特殊对待，当成一个一个普通字符来对待。所谓“普通”字符就是a、b、c、&等。</p>
<h4 id="变量的声明以及命名的规范"><a href="#变量的声明以及命名的规范" class="headerlink" title="变量的声明以及命名的规范"></a>变量的声明以及命名的规范</h4><p>变量名最好：字母、字母数字组合、下划线的组合，不能纯数字作为变量名<br>变量名严格<strong>区分大小写</strong><br>变量名不要和JavaScript关键字重复：例如：不要写this、name、string、number  </p>
<h4 id="变量的输出"><a href="#变量的输出" class="headerlink" title="变量的输出"></a>变量的输出</h4><p>alter() //在浏览器弹出窗口输出内容 ,console.log在控制台输出内容<br>document.write() 向body里面写入内容<br>document.title（）向html文档的title部分写入内容</p>
<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a><strong>字符串类型</strong></h4><p>单双引号没有区别  </p>
<h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a><strong>数值类型</strong></h4><p>在JS中小数和整数都是数值类型  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> v1 = <span class="number">100</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> v2 = <span class="number">3.14514</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//typeof()输出变量的类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(v1)); <span class="comment">//number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(v2)); <span class="comment">//number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str=<span class="string">"hello"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//parseInt将字符串强制转换为数值类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span>  result=<span class="built_in">parseInt</span>(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">//NaN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//isNaN判断是否为一个数值类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(result)); <span class="comment">//true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a><strong>布尔类型</strong></h4><p>在PHP中 ’0’ 、[] 被转换成false<br>在JavaScript中，’0’、[] 会被转换成true<br>如何将数据类型进行强制转换呢？Boolean()函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str=<span class="string">"0"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> str1=[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(str)); <span class="comment">//true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(str1)); <span class="comment">//true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>


<h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><p>说明：为什么说函数也是一个数据类型，因为我们可以定义变量保存函数。<br><strong>函数的定义:</strong>  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span>  f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(f1)) <span class="comment">//function</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(f2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong><em>变量的作用域：</em></strong><br>在JavaScript中，<strong>函数外部定义的变量就是全局变量</strong>，可以在脚本的任何地方使用，<strong>如果在函数内部定义的变量，就是局部变量，只能在函数内使用</strong>。<br><strong>盲点：</strong>  如果在函数内部声明变量时，没有使用var关键字，表示该变量就是全局的变量  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> v1=<span class="string">'global'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(v1);  <span class="comment">//undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> v1=<span class="string">'function'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(v1);  <span class="comment">//function</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        v3=<span class="string">'this is v3'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    f1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(v3);   <span class="comment">//this is v3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong><em>变量的作用域链：</em></strong><br>说明：当我们在函数内部访问一个变量时，会先在函数内部查找，如果没有找到，则去上一级作用域查找，这个查找的过程就称之为作用域链。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> v1=<span class="string">'global'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(v1);  <span class="comment">//undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> v1=<span class="string">'function'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(v1);  <span class="comment">//function</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    f1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong><em>函数的传参：</em></strong><br>普通的传参方式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a,b</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a+b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res=f1(<span class="number">1</span>,<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">//3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p>JavaScript中除了形参、实际参数之外，还可以通过<code>arguments</code>对象进行管理第一个参数保存到<code>arguments</code>数组的第一个元素，第二个参数会保存到<code>arguments</code>数组的第二个参数上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">argument</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]); <span class="comment">// 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">2</span>]); <span class="comment">// 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    argument(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">12</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong><em>函数的返回值：</em></strong><br>函数不一定必须要返回结果，取决于需求，如果没有返回结果，则接收到的就是undefined，相当于什么也没有接收到。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getRe</span>(<span class="params">a,b</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">var</span> re= a+b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> result = getRe(<span class="number">2</span>,<span class="number">4</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(result);       <span class="comment">//undefined</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong><em>JavaScript中的闭包特性：</em></strong><br>什么是闭包？<br>当我们在函数内部，嵌套定义函数的时候，内部函数就会将外部函数的变量的最终值包含起来，保存到内存中，有点类似于PHP的静态变量<br>闭包会导致怎样的结果？<br>内部函数，会将外部函数中的变量的最终值保存到内存中<br>这样，提供了机会：在函数外部，可以读取到函数内部的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span>  <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">var</span> v1 = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="built_in">console</span>.log(v1);     <span class="comment">// 20</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      v1 = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> f2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span>  res = f1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  res();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr=[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">console</span>.log(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = f3();</span></pre></td></tr><tr><td class="code"><pre><span class="line">res[<span class="number">0</span>]();  <span class="comment">// 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">res[<span class="number">1</span>]();  <span class="comment">// 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">res[<span class="number">2</span>]();  <span class="comment">// 3</span></span></pre></td></tr></table></figure>

<p>由于闭包对内存有一定的影响，所以简单提一下如何避免闭包，就是在函数内部调用另一个函数，不是嵌套定义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">v</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//将传递过来的值直接返回</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr=[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        arr[i] = f2(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = f3();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(res[<span class="number">0</span>]);  <span class="comment">// 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(res[<span class="number">1</span>]);  <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(res[<span class="number">2</span>]);  <span class="comment">// 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>定义数组：<br>1、 new Array()<br>2、 快捷语法：[]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"I"</span>,<span class="string">"am"</span>,<span class="string">"ruoning"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(arr);   <span class="comment">//["I", "am", "ruoning"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(arr1);  <span class="comment">//[1, 3, 5, 6]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p>数组的遍历：<br>for 和 for...in 相当于foreach</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"I"</span>,<span class="string">"am"</span>,<span class="string">"ruoning"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(arr[i]); <span class="comment">// I am ruoning</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a <span class="keyword">in</span> arr)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(arr[a]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong>简单提一下：</strong>在js的数组中不可以使用关联数组只能使用索引数组，关联数组通过对象类型实现。  </p>
<h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><p>数组只能定义索引数组，如果保存一些关联类型的数据，请使用对象<br>对象就是一些属性、值得集合<br><strong>方法1：通过构造器创建对象</strong><br>构造器，其实就是一个普通的函数，只是当我们以new的形式调用该函数时，就会生成一个对象，这个时候，我们称之为构造函数、或者构造器<br>在构造器（构造函数内部），通常使用this指向当前对象  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//1.构造函数（构造器）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//访问对象成员</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = <span class="string">"lrn"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//功能封装方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="string">"蔬菜"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res = <span class="keyword">new</span> person();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(res));  <span class="comment">//object</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(res.eat()); <span class="comment">//蔬菜</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong>方法2：快捷语法：{}字面量</strong><br>JavaScript object notation，JavaScript对象表达法<br>字面量语法格式：<br>{<br>属性名:属性值,<br>属性名:属性值,<br>方法名：function(){}<br>}  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> Person = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        name:<span class="string">"lrn"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        weight:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="string">"120"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span>(Person));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(Person.name);          <span class="comment">//lrn</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(Person.weight());      <span class="comment">//120</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p>这里简单提一下：当我们用 for....in循环遍历，对象成员的时候。可能会出现以下情况。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//1.构造函数（构造器）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//访问对象成员</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = <span class="string">"lrn"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//功能封装方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.weight=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="string">"120"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> res = <span class="keyword">new</span> Person();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> res)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//  console.log(res.attr) //undefine 这个时候就是访问的snake.attr</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(res[attr]); <span class="comment">// 输出想要的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<p><strong>方法3：new Object()</strong>   </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    obj.name = <span class="string">'大象'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    obj.skill = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        alert(<span class="string">'搬木头.......'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(obj.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    obj.skill();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<h4 id="NULL-类型"><a href="#NULL-类型" class="headerlink" title="NULL 类型"></a>NULL 类型</h4><p>null，指的是一个空对象的指针，可以理解为空对象的占位符<br>这里是一个对象，但是里面什么也没有，还是空的  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> obj = <span class="literal">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(<span class="keyword">typeof</span> (obj)); <span class="comment">//object</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<h4 id="undefine类型"><a href="#undefine类型" class="headerlink" title="undefine类型"></a>undefine类型</h4><p>一个函数没有返回值，或者声明了变量，但是未初始化值，他就是undefined </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span>  <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(f3()); <span class="comment">//undefine</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alert(a);      <span class="comment">//undefine</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4><p>以上是JS中类型的最基本的用法。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp5写api对Exception层的理解</title>
    <url>/2020/01/02/12-tp5-Exception/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>异常处理在我们开发过程中扮演了一个不可代替的角色。下面我将由浅入深的记录下一自己写项目时对异常的应用。<br>以下所有的异常均是以tp5为例子，也算是自己写项目时的一个总结。 </p>
<a id="more"></a>
<h4 id="初步理解"><a href="#初步理解" class="headerlink" title="初步理解"></a>初步理解</h4><p>下面我将演示一个简单的异常，来理解异常处理的意义。<br>首先在model层抛出(throw)一个异常。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="function"><span class="keyword">function</span> <span class="title">getTestByID</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="number">1</span>/<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">catch</span> (<span class="keyword">Exception</span> $ex)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> $ex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"this is test"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<p>在controller层接受异常并返回。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testEx</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $re=testModel::getTestByID();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> $re;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<p>如果我们只是返回单纯的异常信息的话，结果如下图。<br><img src="http://xy.liruoning.cn/images/12-tp5-Exception-1.png" alt=""><br>由上图的结果可知返回的是一个HTML页面在接口编写中客户端是不可以进行处理的。</p>
<p>改写controller 返回一个json数组这样客户端便很容易处理。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testEx</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $re=testModel::getTestByID();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">catch</span> (<span class="keyword">Exception</span> $ex)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $err=[</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'error_code'</span>=&gt;<span class="number">10001</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'msg'</span>=&gt;$ex-&gt;getMessage()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> json($err,<span class="number">400</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $re;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h4><p>前言：在上边演示的代码中<code>1/0</code>的异常其实我们是不应该返回到客户端的，因为这个异常就算是返回到客户端，客户端也是不可以处理的。所以记录到服务器端的日志是比较好。  </p>
<ul>
<li>由于客户的行为导致的异常。例:没有通过验证器，没有查询到结果。  </li>
</ul>
<p>1.通常不记录日志<br>2.需要向用户返回具体的信息</p>
<ul>
<li>服务器自身的异常。例:代码错误，调用外部接口错误。</li>
</ul>
<p>1.通常记录日志<br>2.不向客户端返回具体信息</p>
<h4 id="全局异常处理中加入日志"><a href="#全局异常处理中加入日志" class="headerlink" title="全局异常处理中加入日志"></a>全局异常处理中加入日志</h4><p>在tp5中可以自动记录日志，并且记录的内容也是相当丰富的。这样我们在调试的时候不利于我们找错误。所以我们要取消tp5的默认记录日志的方式。</p>
<h4 id="全局异常类"><a href="#全局异常类" class="headerlink" title="全局异常类"></a>全局异常类</h4><p>首先单独建立一个exception文件作为单独的“异常类库”。<br>先写一个BaseException,对基本的属性赋值,表示是客户端的异常。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//由客户端导致的异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> $code = <span class="number">400</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> $msg = <span class="string">'invalid parameters'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> $errorCode = <span class="number">999</span>;            <span class="comment">//表示未知错误</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> $shouldToClient = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 构造函数，接收一个关联数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $params 关联数组只应包含code、msg和errorCode，且不应该是空值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($params=[])</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(!is_array($params))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(array_key_exists(<span class="string">'code'</span>,$params))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;code = $params[<span class="string">'code'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(array_key_exists(<span class="string">'msg'</span>,$params))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;msg = $params[<span class="string">'msg'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(array_key_exists(<span class="string">'errorCode'</span>,$params))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;errorCode = $params[<span class="string">'errorCode'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>对Handle类进行继承重写。<br>在这里有必要提一下，当重写了Handle之后记得改config.php下的配置。不改的话默认时使用Handle这个父类。<br><img src="http://xy.liruoning.cn/images/12-tp5-Exception-2.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> <span class="keyword">extends</span> <span class="title">Handle</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> $code;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> $msg;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> $errorCode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//所有抛出的全局异常都会通过render来渲染</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(\Exception $e)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> ($e <span class="keyword">instanceof</span> BaseException)  <span class="comment">//如果这个异常是继承的BaseException则是客户端发生的异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//如果是自定义异常，则控制http状态码，不需要记录日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//因为这些通常是因为客户端传递参数错误或者是用户请求造成的异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//不应当记录日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;code = $e-&gt;code;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;msg = $e-&gt;msg;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;errorCode = $e-&gt;errorCode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 如果是服务器未处理的异常，将http状态码设置为500，并记录日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(config(<span class="string">'app_debug'</span>))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 调试状态下需要显示TP默认的异常页面，因为TP的默认页面</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 很容易看出问题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">parent</span>::render($e);<span class="comment">//调用父类的render方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;code = <span class="number">500</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;msg = <span class="string">'sorry，we make a mistake. (^o^)Y'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;errorCode = <span class="number">999</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//记录日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;recordErrorLog($e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $request = Request::instance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $result = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'msg'</span>  =&gt; <span class="keyword">$this</span>-&gt;msg,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'error_code'</span> =&gt; <span class="keyword">$this</span>-&gt;errorCode,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'request_url'</span> =&gt; $request-&gt;url()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> json($result, <span class="keyword">$this</span>-&gt;code);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       * 将异常写入日志</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">recordErrorLog</span><span class="params">(Exception $e)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//日志的初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Log::init([</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'type'</span>  =&gt;  <span class="string">'File'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'path'</span>  =&gt;  LOG_PATH,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'level'</span> =&gt; [<span class="string">'error'</span>]    <span class="comment">//错误级别   </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Log::record($e-&gt;getMessage(),<span class="string">'error'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上面提到的<strong>错误码</strong>，均为自己定义，当写接口的时候还是建议写一个错误码大纲，先不说客户端，你服务端看着也清晰。  </p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上就是抽象出来的Exception层。希望可以提出你的想法让我们共同进步。</p>
]]></content>
      <categories>
        <category>Thinkphp5</category>
      </categories>
      <tags>
        <tag>thinkphp5</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp5写api对Token令牌在项目中的应用</title>
    <url>/2020/01/02/13-tp5-token/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>当我们写接口的时候，如果没有一个权限的控制，当我们部署到服务器，有人知道了我们的路由地址这样每个人都会调用我们的接口（有些接口是可以公开访问的有些接口是不可以公开访问的）。下面将以一个逐步演化的方式进行。</p>
<a id="more"></a>
<h4 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h4><ul>
<li>客户端获取token基本流程图，客户端携带账号密码去访问getToken api接口<br><img src="http://xy.lrnjy.club/images/13-tp-token-1.png" alt=""></li>
<li>放到微信小程序项目中token令牌的获取<br>①小程序端携带code码访问getToken接口<br>②getToken携带code请求微信服务器获得openid(用户的唯一标识类似uid)<br>③通多openid生成token令牌，并且存储相应的openid到数据库<br><img src="http://xy.lrnjy.club/images/13-tp-token-3.png" alt=""><br>在这里我们可以将Token和用户的信息存储在缓存中，加快访问速度。<h4 id="携带Token访问接口"><a href="#携带Token访问接口" class="headerlink" title="携带Token访问接口"></a>携带Token访问接口</h4></li>
<li>客户端携带token访问接口基本流程图。<br>①客户端首先携带Token来访问下单接口。<br>②下单接口在比对库中是否有相应的token。<br>③若有再比对相关接口是否失效（token要有一个有效期）。<br>④查看是否有权限访问这个接口。<br><img src="http://xy.lrnjy.club/images/13-tp-token-2.png" alt=""></li>
<li>放到微信小程序项目中携带token令牌访问接口<br>①小程序请求接口携带Token令牌<br>②服务器端对token令牌进行效验，读取缓存是否有相应的数据。<br>③效验未通过给客户端返回一个异常，效验通过访问接口。<br><img src="http://xy.lrnjy.club/images/13-tp-token-4.png" alt=""><h4 id="获取Token令牌的具体实现"><a href="#获取Token令牌的具体实现" class="headerlink" title="获取Token令牌的具体实现"></a>获取Token令牌的具体实现</h4>首先在model文件夹下建立User.php用户查询用户数据库的信息。<br>建立service文件夹（用于写比较复杂的逻辑），在service文件夹下建立UserToken.php文件用于用于处理复杂的业务逻辑，而且这个文件和model层是有一定的差别的是不需要为数据表有一一对应关系的。  </li>
<li>调用接口地址获取openid<br>通过看微信小程序的文档传入相应的参数便可以得到相应的openid<br>这是我是单独写了一个配置文件：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//  +---------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//  微信相关配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//  +---------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 小程序app_id</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'app_id'</span> =&gt; <span class="string">'你的app_id'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 小程序app_secret</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'app_secret'</span> =&gt; <span class="string">'你的app_secret'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 微信使用code换取用户openid及session_key的url地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'login_url'</span> =&gt; <span class="string">"https://api.weixin.qq.com/sns/jscode2session?"</span> .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"appid=%s&amp;secret=%s&amp;js_code=%s&amp;grant_type=authorization_code"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">];</span></pre></td></tr></table></figure>

<p>在UserToken.php写入必要的成员属性并通过construct赋值。 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> $code;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> $wxLoginUrl;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> $wxAppID;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> $wxAppSecret;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($code)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">$this</span>-&gt;code = $code;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">$this</span>-&gt;wxAppID = config(<span class="string">'wx.app_id'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">$this</span>-&gt;wxAppSecret = config(<span class="string">'wx.app_secret'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//$this-&gt;wxLoginUrl是要请求的Url</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">$this</span>-&gt;wxLoginUrl = sprintf(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        config(<span class="string">'wx.login_url'</span>), <span class="keyword">$this</span>-&gt;wxAppID, <span class="keyword">$this</span>-&gt;wxAppSecret, <span class="keyword">$this</span>-&gt;code);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>通过调用UserToken的get方法来获取Token<br><code>小插曲下边get函数涉及到了json_decode。我在这里大概讲一下json_encode和json_decode的区别。</code>  </li>
<li>json_encode — 对变量进行 JSON 编码<br>说明：string json_encode( mixed $value[, int $options = 0[, int $depth = 512]] )<br>参数：<code>value</code><br>待编码的 value ，除了resource 类型之外，可以为任何数据类型<br>该函数只能接受 UTF-8 编码的数据<br>返回值：<br>成功则返回 JSON 编码的 string 或者在失败时返回 FALSE 。  </li>
<li>json_decode — 对 JSON 格式的字符串进行编码<br>说明：<br>mixed json_decode( string $json[, bool $assoc = false[, int $depth = 512[, int $options = 0]]] )<br>接受一个 JSON 格式的字符串并且把它转换为 PHP 变量。<br>参数：<br><code>json</code><br>待解码的 json string 格式的字符串。<br><code>assoc</code><br>当该参数为 TRUE 时，将返回 array 而非 object 。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">  </span>&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">      $result = curl_get(<span class="keyword">$this</span>-&gt;wxLoginUrl);  <span class="comment">//curl_get是封装好的curl的get请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 注意json_decode的第一个参数true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// 这将使字符串被转化为数组而非对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      $wxResult = json_decode($result, <span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (<span class="keyword">empty</span>($wxResult)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'获取session_key及openID时异常，微信内部错误'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">// 如果errcode存在则表示这次调用是失败的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          $loginFail = array_key_exists(<span class="string">'errcode'</span>, $wxResult);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">if</span> ($loginFail) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="keyword">$this</span>-&gt;processLoginError($wxResult);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;grantToken($wxResult);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure>

<p>上面的get函数中如果请求失败调用异常处理函数processLoginError：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">processLoginError</span><span class="params">($wxResult)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">  </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> WeChatException(</span></pre></td></tr><tr><td class="code"><pre><span class="line">          [</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="string">'msg'</span> =&gt; $wxResult[<span class="string">'errmsg'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="string">'errorCode'</span> =&gt; $wxResult[<span class="string">'errcode'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">          ]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure>

<p>授权颁发令牌函数grantToken：<br>①拿到openid。<br>②在数据库中查找这个openid是否存在（如果不存则为用户新增一条记录）。<br>③生成令牌，准备缓存数据，写入缓存。<br>④将令牌返回客户端。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">grantToken</span><span class="params">($wxResult)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">   </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//拿到openid</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       $openid = $wxResult[<span class="string">'openid'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//在数据库中查找这个openid是否存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//如果不存则为用户新增一条记录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       $user = User::getByOpenID($openid); <span class="comment">//通过Usermodel查询数据库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">// 借助微信的openid作为用户标识</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">// 但在系统中的相关查询还是使用自己的uid</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (!$user)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           $uid = <span class="keyword">$this</span>-&gt;newUser($openid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           $uid = $user-&gt;id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//准备要缓存的Value的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       $cachedValue = <span class="keyword">$this</span>-&gt;prepareCachedValue($wxResult, $uid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//生成令牌，准备缓存数据，写入缓存  key:令牌 value:wxResult,uid,scope（权限等级）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       $token = <span class="keyword">$this</span>-&gt;saveToCache($cachedValue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">//将令牌返回客户端</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> $token;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<p>创建一个新用户newUser:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">newUser</span><span class="params">($openid)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">   </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $create = date(<span class="string">'Y-m-d H:i:s'</span>, time());</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $user = User::create(</span></pre></td></tr><tr><td class="code"><pre><span class="line">           [</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="string">'openid'</span> =&gt; $openid,</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="string">'create_time'</span>=&gt;$create</span></pre></td></tr><tr><td class="code"><pre><span class="line">           ]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> $user-&gt;id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<p>准备要缓存的value的值prepareCachedValue:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">prepareCachedValue</span><span class="params">($wxResult, $uid)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     $cachedValue = $wxResult;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     $cachedValue[<span class="string">'uid'</span>] = $uid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     $cachedValue[<span class="string">'scope'</span>] =ScopeEnum::User;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">return</span> $cachedValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr></table></figure>

<p>写入缓存saveToCache:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToCache</span><span class="params">($wxResult)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $key = <span class="keyword">self</span>::generateToken();  <span class="comment">//生成令牌，令牌就是一组随机的字符串，自己加密得到的。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    $value = json_encode($wxResult);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $expire_in = config(<span class="string">'queue.token_expire_in'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $result = cache($key, $value, $expire_in);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!$result)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TokenException([</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'服务器缓存异常'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'errorCode'</span> =&gt; <span class="number">10005</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="客户端携带Token到服务器端"><a href="#客户端携带Token到服务器端" class="headerlink" title="客户端携带Token到服务器端"></a>客户端携带Token到服务器端</h4><p>首先客户端携带的Token应通过请求头传到服务器。<br>①读取缓存如果Token不存在抛出异常。<br>②如果存在在缓存中读取相应的value转换成数组<br>③if key存在返回相应的key的值否则抛出异常</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getCurrentTokenVar</span><span class="params">($key)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">   </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $token =Request::instance()</span></pre></td></tr><tr><td class="code"><pre><span class="line">           -&gt;header(<span class="string">'token'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $vars = Cache::get($token);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (!$vars)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> TokenException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>(!is_array($vars))</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               $vars = json_decode($vars, <span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span> (array_key_exists($key, $vars)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">return</span> $vars[$key];</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'尝试获取的Token变量并不存在'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<h4 id="权限的控制"><a href="#权限的控制" class="headerlink" title="权限的控制"></a>权限的控制</h4><p>利用scope作用域来对用户权限做一个分组。<br>首先模拟枚举类型来定义作用域的大小。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScopeEnum</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//普通app成员</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> User = <span class="number">16</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 管理员是给CMS准备的权限</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> Super = <span class="number">32</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>权限验证函数的优化，这里是将权限验证的方法封装到了<code>BaseController</code>里面这样,更体现面向对象封装的思想。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span>  <span class="title">Controller</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkExclusiveScope</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Token::needExclusiveScope();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPrimaryScope</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Token::needPrimaryScope();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkSuperScope</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Token::needSuperScope();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>定义权限认证函数可以自己定义多个我这里简单举个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">needPrimaryScope</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">   </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $scope = <span class="keyword">self</span>::getCurrentTokenVar(<span class="string">'scope'</span>);<span class="comment">//获得scope变量的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> ($scope) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span> ($scope &gt;= ScopeEnum::User) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException();  <span class="comment">//没有相应的权限抛出异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> TokenException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<p>那么问题来了如何在请求api之前对权限进行检测呢，这个就涉及到了Tp5的<strong>前置方法</strong>。在执行相应api之前执行权限认证函数若通过则继续执行否则抛出异常。</p>
<h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4><p>以上内容是参考的慕课网的小程序开发的视频受益匪浅，感谢~🤗。</p>
]]></content>
      <categories>
        <category>Thinkphp5</category>
      </categories>
      <tags>
        <tag>thinkphp5</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp5写api对Validate层的理解</title>
    <url>/2019/12/31/11-tp5-validate/</url>
    <content><![CDATA[<h4 id="引入Validate"><a href="#引入Validate" class="headerlink" title="引入Validate"></a>引入Validate</h4><p>tp5中如果想要使用validate,首先要引入Validate<code>use think\Validate</code></p>
<a id="more"></a>
<h4 id="thinkphp5验证器的使用"><a href="#thinkphp5验证器的使用" class="headerlink" title="thinkphp5验证器的使用"></a>thinkphp5验证器的使用</h4><ul>
<li><strong>独立验证</strong><br>首先定义<code>$data</code>来存储要验证的数据然后定义<code>$validate</code>定义变量来存储<code>Validate</code>对象,调用check方法对数据进行效验（返回true/false）,当返回false的时候打印出错误信息</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testValidate</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $data=[</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="string">'name'</span>=&gt;<span class="string">'admin111'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="string">'email'</span>=&gt;<span class="string">'lrnjy@qq.com'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $validate= <span class="keyword">new</span> Validate([</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="string">'name'</span>=&gt;<span class="string">'require|max:6'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="string">'email'</span>=&gt;<span class="string">'email'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(!$validate-&gt;check($data))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="comment">//打印出错误信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">echo</span> $validate-&gt;getError();  <span class="comment">//name长度不能超过 6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<p>如果需要批量验证可以使用<code>$validate-&gt;batch()-&gt;check($data);</code>来效验。<br>写到这里可能有些同学会有这样的疑问为什么我上边写<code>require</code>或者<code>email</code>就会进行相应的验证呢？<br>答：去看tp5的内置规则就可以了，这个是tp5自带的规则，你也可以自己定义规则。</p>
<ul>
<li><strong>验证器</strong><br>首先我们在api目录下创建Validate目录，在Validate目录下定义TestValidate.php函数：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">api</span>\<span class="title">validate</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Validate</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestValidate</span> <span class="keyword">extends</span> <span class="title">Validate</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> $rule = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'name'</span> =&gt;<span class="string">'require|max:6'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'email'</span>=&gt;<span class="string">'email'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>使用验证器（封装性更好）：  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testValidate</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $data=[</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="string">'name'</span>=&gt;<span class="string">'admin111'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="string">'email'</span>=&gt;<span class="string">'lrnjy@qq.com'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        $validate= new Validate([</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//           'name'=&gt;'require|max:6',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            'email'=&gt;'email'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        ]);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        $validate=<span class="keyword">new</span> TestValidate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $validate-&gt;check($data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">echo</span> $validate-&gt;getError();  <span class="comment">//打印出错误信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>直接new testValidate()就可以。  </p>
<h4 id="自定义验证封装"><a href="#自定义验证封装" class="headerlink" title="自定义验证封装"></a>自定义验证封装</h4><p>首先先做一个简单的铺垫:在validate文件下建立一个IDMustBeInt类自己定义效验规则。<br>调用下面的自定义验证规则的函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testValidate</span><span class="params">($id)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $data=[</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="string">'id'</span>=&gt;$id</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        $validate= new Validate([</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//           'name'=&gt;'require|max:6',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//            'email'=&gt;'email'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        ]);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        $validate=<span class="keyword">new</span> IDMustBeInt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $validate-&gt;check($data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">echo</span> $validate-&gt;getError();  <span class="comment">//打印出错误信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>自定义验证规则</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">IDMustBeInt</span> <span class="keyword">extends</span> <span class="title">Validate</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> $rule=[</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'id'</span>=&gt;<span class="string">'require|isPositiveInteger'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//value要验证的值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//data要验证的data数据和我上边定义的$data自己传过来的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//field要验证的字段</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isPositiveInteger</span><span class="params">($value, $rule=<span class="string">''</span>, $data=<span class="string">''</span>, $field=<span class="string">''</span>)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">    </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (is_numeric($value) &amp;&amp; is_int($value + <span class="number">0</span>) &amp;&amp; ($value + <span class="number">0</span>) &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>写到这里可以发现整个验证的方式并没有太大改变，当传过来的参数比较多时，代码还是比较繁琐。<br>看上边的代码都有一个<code>check</code>方法，还有对错误信息返回的方法。下面我们将进行一波封装。<br>首先建立<code>BaseValidate</code>类来继承<code>Validate</code>定义一个goCheck方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">goCheck</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $request=Request::instance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $params=$request-&gt;param();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $request=<span class="keyword">$this</span>-&gt;batch()-&gt;check($params); <span class="comment">//在这里为什么使用$this? 因为：在本类中实现的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(!$request)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           $e=<span class="keyword">new</span> ParameterException([</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="string">'msg'</span>=&gt;<span class="keyword">$this</span>-&gt;error</span></pre></td></tr><tr><td class="code"><pre><span class="line">           ]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">throw</span> $e;                           <span class="comment">//在这里我抛出的是自定义的异常，具体解说在我写的Exception那个blog</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<p>使用验证  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testValidate</span><span class="params">($id)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  (<span class="keyword">new</span> IDMustBeInt())-&gt;goCheck();      <span class="comment">//效验id</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>由以上代码的逐渐深入我们也会不断体会到验证器模式封装的优势</p>
]]></content>
      <categories>
        <category>Thinkphp5</category>
      </categories>
      <tags>
        <tag>thinkphp5</tag>
      </tags>
  </entry>
  <entry>
    <title>Memcache介绍以及经典问题介绍</title>
    <url>/2019/12/29/10-memcache/</url>
    <content><![CDATA[<h4 id="Memcache介绍"><a href="#Memcache介绍" class="headerlink" title="Memcache介绍"></a>Memcache介绍</h4><p>memcache是高性能，分布式的内存对象缓存系统，用于在动态应用中减少数据库负载，提升访问速度。目前用memcache解决互联网上的大用户读取是非常流行的一种用法，在互联网企业中有着广泛的应用。  </p>
<a id="more"></a>
<h4 id="Memcache的安装"><a href="#Memcache的安装" class="headerlink" title="Memcache的安装"></a>Memcache的安装</h4><p><a href="https://www.runoob.com/memcached/memcached-install.html（安装memcache的菜鸟教程" target="_blank" rel="noopener">https://www.runoob.com/memcached/memcached-install.html（安装memcache的菜鸟教程</a> 值得参考）强烈推荐官方下载（<a href="http://memcached.org/），目前为止，最新的下载版本是V1.5.16" target="_blank" rel="noopener">http://memcached.org/），目前为止，最新的下载版本是V1.5.16</a>  </p>
<h4 id="Memcache的基本用法"><a href="#Memcache的基本用法" class="headerlink" title="Memcache的基本用法"></a>Memcache的基本用法</h4><p>Apache 是对进程的管理（消耗的是CPU）对内存的消耗很少<br>Memcache 是对内存的操作对 对内存的消耗大 对CPU的消耗小<br>Memcache主要用的是key=&gt;value 的格式优点：1.某范围内随机2.碰撞要低<br>Memcache 基本命令格式：&lt;命令&gt;  &lt;键&gt;  &lt;标记&gt;  &lt;有效期&gt;  &lt;数据长度&gt;<br>例如：<br>增: <code>add</code> 往内存增加一行新记录<br>语法: <code>add key flag expire length</code> 回车<br><code>Key</code>    给值起一个独特的名字<br><code>flag</code>   标志,要求为一个正整数<br><code>expire</code> 有效期<br><code>length</code> 缓存的长度(字节为单位)  </p>
<p>介绍<code>flag</code>的意义：<br><code>memcached</code> 基本文本协议,传输的东西,理解成字符串来存储.<br><strong>想</strong>:让你存一个 <code>php</code> 对象,和一个 <code>php</code> 数组,怎么办?<br><strong>答</strong>:序列化成字符串,往出取的时候,自然还要反序列化成 对象/数组/json 格式等等.<br>这时候, <code>flag</code> 的意义就体现出来了.<br>比如,1就是字符串,2反转成数组3,反序列化对象…..<br>介绍<code>expire</code>的意义:<br>设置缓存的有效期,有 3 种格式  </p>
<ul>
<li>设置秒数, 从设定开始数,第 n 秒后失效.  </li>
<li>时间戳, 到指定的时间戳后失效.<br>比如在团购网站,缓存的某团到中午 12:00 失效. add key 0 1379209999 6  </li>
<li>设0.不自动失效.<strong>（这里有一个误区：设为 0,永久有效.错误的.在空间不够用的时候永久数据也可能被剔除“后面我会讲到”）</strong><h4 id="使用Slab分配算法保存数据减少内存的碎片化"><a href="#使用Slab分配算法保存数据减少内存的碎片化" class="headerlink" title="使用Slab分配算法保存数据减少内存的碎片化"></a>使用Slab分配算法保存数据减少内存的碎片化</h4></li>
<li>首先为什么内存碎片化？<br>如果用 c 语言直接 <code>malloc</code>,<code>free</code> 来向操作系统申请和释放内存时,<br>在不断的申请和释放过程中,形成了一些很小的内存片断,无法再利用.<br>这种空闲,但无法利用内存的现象,—称为内存的碎片化.</li>
<li>下面简单介绍<code>Slab</code>分配算法的原理：<br><code>slab allocator</code> 原理: 预告把内存划分成数个 <code>slab class</code> 仓库.(每个 <code>slab class</code> 大小 1M) 各仓库,切分成不同尺寸的小块(<code>chunk</code>).然后把这些<code>chunk</code>分配给用户使用</li>
<li>系统如何选择合适的 <code>chunk</code>？<br><code>memcached</code> 根据收到的数据的大小, 选择最适合数据大小的 <code>chunk</code> 组。<code>memcached</code> 中保存着 <code>slab class</code> 内空闲 <code>chunk</code> 的列表, 根据该列表选择空的 <code>chunk</code>, 然后将数据缓存于其中。  </li>
</ul>
<p><strong>提醒：</strong>如果有 100byte 的内容要存,但 122 大小的仓库中的 <code>chunk</code> 满了并不会寻找更大的,如 144 的仓库来存储, 而是把 122 仓库的旧数据踢掉!</p>
<h4 id="memcached-的过期数据惰性删除"><a href="#memcached-的过期数据惰性删除" class="headerlink" title="memcached 的过期数据惰性删除"></a>memcached 的过期数据惰性删除</h4><ul>
<li>当某个值过期后,并没有从内存删除, 因此,<code>stats</code> 统计时, <code>curr_item</code> 有其信息。  </li>
<li>当某个新值去占用他的位置时,当成空 <code>chunk</code> 来占用。  </li>
<li>当 <code>get</code> 值时,判断是否过期,如果过期,返回空,并且清空, <code>curr_item</code> 就减少了。<br>即–这个过期,只是让用户看不到这个数据而已,并没有在过期的瞬间立即从内存删除. 这个称为 <em>lazy expiration</em>惰性失效.<br>好处–节省了<code>CPU</code> 时间和检测的成本。<h4 id="memcached-此处用的-lru-删除机制"><a href="#memcached-此处用的-lru-删除机制" class="headerlink" title="memcached 此处用的 lru 删除机制."></a>memcached 此处用的 lru 删除机制.</h4>如果以 122byte 大小的 <code>chunk</code> 举例, 122 的 <code>chunk</code> 都满了, 又有新的值(长度为 120)要加入, 要挤掉谁? memcached 此处用的 lru 删除机制. (操作系统的内存管理,常用 fifo,lru 删除) 。<br><code>lru: least recently used</code> 最近最少使用<br><code>fifo: first in ,first out</code>先来先服务  </li>
</ul>
<p><strong>原理</strong>: 当某个单元被请求时,维护一个计数器,通过计数器来判断最近谁最少被使用. 就把谁剔除。  </p>
<h4 id="memcache的经典问题"><a href="#memcache的经典问题" class="headerlink" title="memcache的经典问题"></a>memcache的经典问题</h4><h5 id="Memcache缓存雪崩的现象"><a href="#Memcache缓存雪崩的现象" class="headerlink" title="Memcache缓存雪崩的现象"></a>Memcache缓存雪崩的现象</h5><p><strong>问题：</strong><br>缓存雪崩一般是由某个缓存节点失效,导致其他节点的缓存命中率下降, 缓存中缺失的数据 去数据库查询.短时间内,造成数据库服务器崩溃. 重启 DB,短期又被压跨,但缓存数据也多一些. DB 反复多次启动多次,缓存重建完毕,DB 才稳定运行.<br>或者,是由于缓存周期性的失效,比如每 6 小时失效一次,那么每 6 小时,将有一个请求”峰值”, 严重者甚至会令 DB 崩溃.<br><strong>解决：</strong><br>①把每次失效的时间设置随机在几个小时的范围内不一起失效。<br>②或者把失效的时间改为在晚上访问量小的时候  </p>
<h5 id="缓存的无底洞现象"><a href="#缓存的无底洞现象" class="headerlink" title="缓存的无底洞现象"></a>缓存的无底洞现象</h5><p><strong>现象：</strong><br>该问题由 <code>facebook</code> 的工作人员提出的, <code>facebook</code> 在 2010 年左右,<code>memcached</code> 节点就已经达 3000 个.缓存数千 G 内容。<br>他们发现了一个问题—<code>memcached</code> 连接频率,效率下降了,于是加 <code>memcached</code> 节点, 添加了后,发现因为连接频率导致的问题,仍然存在,并没有好转,称之为”无底洞现象”。<br><strong>问题分析：</strong><br>以用户为例: <code>user-133-age,user-133-name,user-133-height .....N</code> 个 key, 当服务器增多,133 号用户的信息,也被散落在更多的节点,所以,同样是访问个人主页,得到相同的个人信息, 节点越多,要连接的节点也越多. 对于 <code>memcached</code> 的连接数,并没有随着节点的增多,而降低. 于是问题现。<br><strong>解决方案：</strong><br>把某一组 key,按其共同前缀,来分布。<br>比如 <code>user-133-age, user-133-name,user-133-height</code> 这 3 个 key,在用分布式算法求其节点时,应该以 ‘user-133’来计算,而不是以 <code>user-133-age/name/height</code> 来 计算. 这样,3 个关于个人信息的 key,都落在同 1 个节点上,访问个人主页时,只需要连接 1 个节点。<br><em>官方回应:</em>事实上NoSQL 和传统的 RDBMS,并不是水火不容,两者在某些设计上,是可以相互参考的。<br>对于 <code>memcached</code>, redis<code>这种 kv 存储, key 的设计,可以参考 MySQL 中表/列的设计。  
比如: user 表下,有 age 列,name 列,身高列, 对应的 key,可以用</code>user:133:age = 23, user:133:name = ‘lisi’<code>,</code>user:133:height = 168`; </p>
<h5 id="永久数据被剔除现象"><a href="#永久数据被剔除现象" class="headerlink" title="永久数据被剔除现象"></a>永久数据被剔除现象</h5><ul>
<li>如果 <code>slab</code> 里的很多 <code>chunk</code>,已经过期,但过期后没有被 <code>get</code> 过, 系统不知他们已经过期。  </li>
<li>永久数据很久没 <code>get</code> 了,不活跃,如果新增 <code>item</code>,则永久数据被踢了。  </li>
<li>当然,如果那些非永久数据被 <code>get</code>,也会被标识为 <code>expire</code>,从而不会再踢掉永久数据。  </li>
<li>简单的实验过程截图证明数据剔除现象<br>选择8880代码块 可以存取的数据为118<br><img src="http://xy.liruoning.cn/images/10-memcache-2.png" alt=""><br><img src="http://xy.liruoning.cn/images/10-memcache-1.png" alt=""></li>
</ul>
<p><strong>解决方案：</strong>永久数据和非永久数据分开存储</p>
]]></content>
      <categories>
        <category>Memcached</category>
      </categories>
      <tags>
        <tag>memcached</tag>
      </tags>
  </entry>
  <entry>
    <title>在thinkphp5中实现的无限级分类</title>
    <url>/2019/12/28/UnlimitedClassification/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于自己用Thinkphp5些项目，有分类功能所以想要总结一下。其中用到了thinkphp5提供的功能所以不懂的可以去查手册  </p>
<h4 id="无限级的显示以及实现的代码"><a href="#无限级的显示以及实现的代码" class="headerlink" title="无限级的显示以及实现的代码"></a>无限级的显示以及实现的代码</h4><p>主要的实现是下面两个函数：</p>
<a id="more"></a>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cateTree</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $cateres=<span class="keyword">$this</span>-&gt;select();   <span class="comment">//取出数据库中所有的分类数据     </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;sort($cateres); </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//将数据进行排序 最后的排序结果实现如下效果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 中国</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// |---湖南</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// |------常德</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// |---河北</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// |------定州</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//每一个子分类在相应的父级的下面</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span><span class="params">($data,$pid=<span class="number">0</span>,$level=<span class="number">0</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> $arr=<span class="keyword">array</span>(); <span class="comment">//定义一个静态数组来存储排序后的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $k =&gt; $v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>($v[<span class="string">'pid'</span>]==$pid)&#123;     <span class="comment">//找出第一个顶级栏目</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $v[<span class="string">'level'</span>]=$level;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $arr[]=$v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">$this</span>-&gt;sort($data,$v[<span class="string">'id'</span>],$level+<span class="number">1</span>); <span class="comment">//利用递归找到下面的子栏目</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="无限级的删除以及实现的代码"><a href="#无限级的删除以及实现的代码" class="headerlink" title="无限级的删除以及实现的代码"></a>无限级的删除以及实现的代码</h4><p>首先写delete的时候不只是把前端传来的id对应项进行删除就好了。<br>例如：<br>// 中国<br>// |—湖南<br>// |——常德<br>// |—河北<br>// |——定州<br>当我们删除<em>湖南</em>的时候应该将对应的子栏目一并删除（常德），同理当我们删除<em>中国</em>的时候下面的子栏目也要得到一并的删除。<br>具体实现的思路体现在代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过我上边提出的问题想必大家已经想到找到相应的子栏目的id进行批量删除具体看下面的代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getchilrenid</span><span class="params">($cateId)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $cateRes=<span class="keyword">$this</span>-&gt;select();                 <span class="comment">//查找出所有的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_getchilrenid($cateRes,$cateId);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_getchilrenid</span><span class="params">($cateRes,$cateId)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">static</span> $arr=<span class="keyword">array</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">foreach</span> ($cateRes <span class="keyword">as</span> $k =&gt; $v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>($v[<span class="string">'pid'</span>] == $cateId)&#123;         <span class="comment">//找到pid == 要删除栏目的id的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                $arr[]=$v[<span class="string">'id'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;_getchilrenid($cateRes,$v[<span class="string">'id'</span>]); <span class="comment">//利用递归再次找到相应下面的子栏目</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>好了以上大概就是利用无限级分类，来进行分类数据的显示以及分类数据的的删除。以上是比较核心的代码，具体完成操作还需要自己添加一些代码。最后感谢你的阅读，也希望大家可以分享自己的想法共同学习。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>thinkphp5</tag>
      </tags>
  </entry>
  <entry>
    <title>memcached在Linux、windows安装</title>
    <url>/2019/12/27/17-memcached%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="memcached安装环境说明"><a href="#memcached安装环境说明" class="headerlink" title="memcached安装环境说明"></a>memcached安装环境说明</h4><p>&emsp;&emsp;在这里我下在的memcached,memcached 依赖于 libevent 库因此先安装libevent 。在编译memcache时需要指定libevent的路径。在这次安装过程中 我使用的 环境 Centos7.3、libevent-2.1.11、memcached-1.6.1。</p>
<a id="more"></a>
<h4 id="libevent编译安装"><a href="#libevent编译安装" class="headerlink" title="libevent编译安装"></a>libevent编译安装</h4><ol>
<li><p>进入 libevent 官网 下载 源码包 <a href="https://libevent.org/" target="_blank" rel="noopener">https://libevent.org/</a></p>
</li>
<li><p>选择最新的Stable 稳定版 如图：</p>
<p><img src="http://xy.liruoning.cn/images/17-memcached-1.png" alt=""></p>
</li>
<li><p>进入 /usr/local/src 执行 <code>wget https://github.com/libevent/libevent/releases/download/release-2.1.11-stable/libevent-2.1.11-stable.tar.gz</code> 下载所需要包。</p>
</li>
<li><p>解压下载的包  <code>tar -zxvf libevent-2.1.11-stable.tar.gz</code></p>
</li>
<li><p>cd 到 lib 目录 </p>
</li>
<li><p>configure 检查编译环境  并指定要安装的目录 <code>./configure --prefix=/usr/local/libevent</code></p>
</li>
<li><p>make &amp;&amp; make install 安装 下图所示表示安装成功</p>
<p><img src="http://xy.liruoning.cn/images/17-memcached-3.png" alt=""></p>
</li>
</ol>
<h4 id="下载Memcache"><a href="#下载Memcache" class="headerlink" title="下载Memcache"></a>下载Memcache</h4><ol>
<li><p>进入memcached官网 下载 源码包 <a href="http://www.memcached.org/" target="_blank" rel="noopener">http://www.memcached.org/</a></p>
</li>
<li><p>选择最新的Stable 稳定版 如图：</p>
<p><img src="http://xy.liruoning.cn/images/17-memcached-2.png" alt=""></p>
</li>
<li><p>进入 /usr/local/src 执行 <code>wget http://www.memcached.org/files/memcached-1.6.1.tar.gz</code> 下载所需要包。</p>
</li>
<li><p>解压<code>tar -zxvf memcached-1.6.1.tar.gz</code></p>
</li>
<li><p>cd mem…解压目录中</p>
</li>
<li><p><code>./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent/</code> 指定安装路径以及 依赖的libevent 库的安装路径。</p>
</li>
<li><p>如果 检查没问题 那么我们 就 make &amp;&amp; make install </p>
</li>
<li><p>cd 到安装的 memcached 目录下 ls 看到如下三个目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@888 memcached-1.6.1]# cd &#x2F;usr&#x2F;local&#x2F;memcached&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@888 memcached]# ls</span></pre></td></tr><tr><td class="code"><pre><span class="line">bin  include  share</span></pre></td></tr></table></figure>
</li>
<li><p>启动 memcached</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z memcached]# .&#x2F;bin&#x2F;memcached -u nobody -p 11211 -m 64m -d #最好不要使用root运行</span></pre></td></tr><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z memcached]# ps -ef|grep mem</span></pre></td></tr><tr><td class="code"><pre><span class="line">nobody   18045     1  0 22:43 ?        00:00:00 .&#x2F;bin&#x2F;memcached -u nobody -p 11211 -m 64m -d</span></pre></td></tr><tr><td class="code"><pre><span class="line">root     18056  7802  0 22:43 pts&#x2F;1    00:00:00 grep --color&#x3D;auto mem</span></pre></td></tr></table></figure>
</li>
<li><p>参数说明：</p>
<ul>
<li>-d是启动一个守护进程；</li>
<li>-m是分配给Memcache使用的内存数量，单位是MB；</li>
<li>-u是运行Memcache的用户；</li>
<li>-l是监听的服务器IP地址，可以有多个地址；</li>
<li>-p是设置Memcache监听的端口，，最好是1024以上的端口；</li>
<li>-c是最大运行的并发连接数，默认是1024；</li>
<li>-P是设置保存Memcache的pid文件。</li>
</ul>
</li>
</ol>
<p>到此memcached 安装告一段落</p>
<h4 id="php-memcached-扩展编译"><a href="#php-memcached-扩展编译" class="headerlink" title="php-memcached 扩展编译"></a>php-memcached 扩展编译</h4><ol>
<li><p>因为 安装 PHP PECL 的 Memcached 插件依赖的 <a href="https://launchpad.net/libmemcached/+download" target="_blank" rel="noopener">libmemcached</a> 库;</p>
</li>
<li><p>进入官网下载 、解压、configure检查环境 make &amp;&amp; make install 编译安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;launchpad.net&#x2F;libmemcached&#x2F;1.0&#x2F;1.0.18&#x2F;+download&#x2F;libmemcached-1.0.18.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line">tar -zxvf libmemcached-1.0.18.tar.gz </span></pre></td></tr><tr><td class="code"><pre><span class="line">cd libmemcached-1.0.18</span></pre></td></tr><tr><td class="code"><pre><span class="line">ls</span></pre></td></tr><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;libmemcached --with-memcached&#x3D;&#x2F;usr&#x2F;local&#x2F;memcached&#x2F;bin&#x2F;memcached</span></pre></td></tr></table></figure>
</li>
<li><p>首先进行PHP扩展的官方站  <a href="https://pecl.php.net/" target="_blank" rel="noopener">https://pecl.php.net/</a></p>
</li>
<li><p>下载最新的稳定版如图：</p>
<img src="http://xy.liruoning.cn/images/17-memcached-4.png" style="zoom:67%;" />
</li>
<li><p>cd 到 /usr/local/src 执行 <code>wget https://pecl.php.net/get/memcached-3.1.5.tgz</code> 下载扩展包</p>
</li>
<li><p>tar -zxvf mem…. 解压并 cd 进入mem….的扩展包文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf memcached-3.1.5.tgz </span></pre></td></tr><tr><td class="code"><pre><span class="line">cd memcached-3.1.5</span></pre></td></tr></table></figure>
</li>
<li><p>当我们进入 memcached-3.1.5 执行 ls 发现并没有configure 文件 和以前的不同安装软件不同？？ 这时候我们就需要配置（根据当前的PHP版本动态的创建configure文件）</p>
</li>
<li><p>在配置文件目录下执行 <code>/usr/local/php/bin/phpize --with-php-config=/usr/local/php/bin/php-config</code> 判断当前的PHP版本生成相应的configure文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z memcached-3.1.5]# &#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;phpize --with-php-config&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php-config </span></pre></td></tr><tr><td class="code"><pre><span class="line">Configuring for:</span></pre></td></tr><tr><td class="code"><pre><span class="line">PHP Api Version:         20170718</span></pre></td></tr><tr><td class="code"><pre><span class="line">Zend Module Api No:      20170718</span></pre></td></tr><tr><td class="code"><pre><span class="line">Zend Extension Api No:   320170718</span></pre></td></tr></table></figure>
</li>
<li><p><code>./configure --with-php-config=/usr/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached</code> 编译检查环境 make &amp;&amp; make install  编译 安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --with-php-config&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;php-config --with-libmemcached-dir&#x3D;&#x2F;usr&#x2F;local&#x2F;libmemcached</span></pre></td></tr><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span></pre></td></tr></table></figure>
</li>
<li><p>根据提示查看是否有相关的扩展</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@izwz90j01t7qvhsd1qwdx8z memcached-3.1.5]# ls &#x2F;usr&#x2F;local&#x2F;php&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20170718&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">memcached.so  opcache.a  opcache.so  redis.so</span></pre></td></tr></table></figure>
</li>
<li><p>修改php.ini 添加 memcached.so 的路径 重启 php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extension&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20170718&#x2F;memcached.so</span></pre></td></tr></table></figure>
</li>
<li><p>出现如下图所示则表示安装成功：</p>
<p><img src="http://xy.liruoning.cn/images/17-memcached-5.png" alt=""></p>
</li>
</ol>
<p>到此 Linux php-memcached 扩展安装完毕</p>
<h4 id="php-memcached编译Windows版"><a href="#php-memcached编译Windows版" class="headerlink" title="php-memcached编译Windows版"></a>php-memcached编译Windows版</h4><ol>
<li><p>windows 安装 配置时首先要确定 3个要素 PHP的版本、 PHP用哪个编译器编译的 、 PHP扩展用什么编译的是否是 ts 线程安全 nts 线程不安全。</p>
<p><img src="http://xy.liruoning.cn/images/17-memcached-6.png" alt=""></p>
<p><img src="http://xy.liruoning.cn/images/17-memcached-7.png" alt=""></p>
</li>
<li><p>进入官网下载 对应的配置文件  </p>
<p><img src="http://xy.liruoning.cn/images/17-memcached-8.png" alt=""></p>
</li>
</ol>
<p>​     将php_memcache.dll复制到etc 目录 给 php.ini 添加 extensions = php_memcache.dll 然后重启PHP 打印 phpinfo()出现一下信息就可以了。</p>
<p><img src="http://xy.liruoning.cn/images/17-memcache-9.png" alt=""></p>
]]></content>
      <categories>
        <category>Memcached</category>
      </categories>
      <tags>
        <tag>memcached</tag>
      </tags>
  </entry>
  <entry>
    <title>Auth权限认证</title>
    <url>/2019/12/27/7-thinkphp5-auth/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于自己学完thinkphp5之后写了工作室的官网，我有负责有关后台的管理员的操作，其中便有Auth权限认证所以今天想要再次做一下总结。</p>
<a id="more"></a>  
<h4 id="引入Auth包"><a href="#引入Auth包" class="headerlink" title="引入Auth包"></a>引入Auth包</h4><p>由于thinkphp3.2是自带Auth权限认证包的，到了thinkphp5便去除掉了，所以把3.2的auth权限类做一下修改应用的thinkphp5上边。<a href="https://github.com/lrn80/xinye/blob/master/application/admin/controller/Auth.php" target="_blank" rel="noopener">https://github.com/lrn80/xinye/blob/master/application/admin/controller/Auth.php</a>  </p>
<h4 id="建表并说明"><a href="#建表并说明" class="headerlink" title="建表并说明"></a>建表并说明</h4><p>首先我们要建立三张必要的表<br>auth_group（用户组表） 1 超级管理员 2 普通管理员 3 文章发布专员<br><img src="http://xy.liruoning.cn/images/7-thinkphp5-auth1-1.png" alt=""><br>auth_rule （规则表）   1 article/add 2 article/edit 3 article/del 控制器名/方法名<br><img src="http://xy.liruoning.cn/images/7-thinkphp5-auth2-2.png" alt=""><br>auth_group_access（用于管理员表和用户组表相连）uid 1 group_id 1<br><img src="http://xy.liruoning.cn/images/7-thinkphp5-auth2-3.png" alt=""><br><strong>建表语句参考上边链接</strong></p>
<h4 id="实现的核心函数"><a href="#实现的核心函数" class="headerlink" title="实现的核心函数"></a>实现的核心函数</h4><ul>
<li><strong>list</strong>页面利用无限级分类对内容进行展示实现如下效果：<br>将数据进行排序 最后的排序结果实现如下效果：<br>管理员组<br>|—管理员组列表<br>|——管理员组修改<br>|——管理员组删除<br>|——管理员组增加<br>签到中心<br>|—签到列表<br>|——修改签到<br>|——增添签到<br>//每一个子分类在相应的父级的下面  </li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authRuleTree</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $authRuleres=<span class="keyword">$this</span>-&gt;order(<span class="string">'sort desc'</span>)-&gt;select(); <span class="comment">//取出所有的数据并按照sort进行排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;sort($authRuleres);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span><span class="params">($data,$pid=<span class="number">0</span>)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">static</span> $arr=<span class="keyword">array</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $k =&gt; $v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>($v[<span class="string">'pid'</span>]==$pid)&#123;            <span class="comment">//找到顶级分类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                $arr[]=$v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">$this</span>-&gt;sort($data,$v[<span class="string">'id'</span>]); <span class="comment">//利用递归找到下面的子分类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<ul>
<li>delete操作的时候不只是把前端传来的id对应项进行删除就好了。<br>例如：<br>管理员组<br>|—管理员组列表<br>|——管理员组修改<br>|——管理员组删除<br>|——管理员组增加<br>签到中心<br>|—签到列表<br>|——修改签到<br>|——增添签到<br>当我们删除<em>签到中心</em>的时候应该将对应的子栏目一并删除，同理当我们删除<em>签到列表</em>的时候下面的子栏目也要得到一并的删除。<br>具体实现的思路体现在代码：<br>通过递归找到相应的子栏目ID一并删除  </li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getchilrenid</span><span class="params">($authRuleId)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     $AuthRuleRes=<span class="keyword">$this</span>-&gt;select();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_getchilrenid($AuthRuleRes,$authRuleId);</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_getchilrenid</span><span class="params">($AuthRuleRes,$authRuleId)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">static</span> $arr=<span class="keyword">array</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">foreach</span> ($AuthRuleRes <span class="keyword">as</span> $k =&gt; $v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">if</span>($v[<span class="string">'pid'</span>] == $authRuleId)&#123;         <span class="comment">//找到父级ID等于传过来的ID的数据可以找到相应的子项</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">             $arr[]=$v[<span class="string">'id'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">             <span class="keyword">$this</span>-&gt;_getchilrenid($AuthRuleRes,$v[<span class="string">'id'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">         &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">return</span> $arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr></table></figure>

<ul>
<li>当分配权限的时候如果分配到了子权限那么相应的父级权限也应该会有：<br>例如：<br>管理员组<br>|—管理员组列表<br>|——管理员组修改<br>|——管理员组删除<br>|——管理员组增加<br>签到中心<br>|—签到列表<br>|——修改签到<br>|——增添签到<br>当分配到<em>管理员组修改<em>权限的时候它的父级权限也应该一并分配（</em>管理员组</em> 和<em>管理员组列表</em> ）的权限。<br>所以我们要找到相应的父级的ID代码如下：  </li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getparentid</span><span class="params">($authRuleId)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       $AuthRuleRes=<span class="keyword">$this</span>-&gt;select();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_getparentid($AuthRuleRes,$authRuleId);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_getparentid</span><span class="params">($AuthRuleRes,$authRuleId)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">static</span> $arr=<span class="keyword">array</span>();      </span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">foreach</span> ($AuthRuleRes <span class="keyword">as</span> $k =&gt; $v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="keyword">if</span>($v[<span class="string">'id'</span>] == $authRuleId)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               $arr[]=$v[<span class="string">'id'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="keyword">$this</span>-&gt;_getparentid($AuthRuleRes,$v[<span class="string">'pid'</span>],<span class="keyword">False</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;     </span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> $arrStr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<h4 id="完成check"><a href="#完成check" class="headerlink" title="完成check"></a>完成check</h4><p>完成效验是利用Auth类中的check方法具体细节看代码中的注释。<br>说明：将代码写到Common（每个控制器要继承的公共类）的_initialize（定义控制器初始化方法 _initialize）  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$auth=<span class="keyword">new</span> Auth();<span class="comment">//实例化auth</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$request=Request::instance(); <span class="comment">//实例化auth</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$con=$request-&gt;controller(); <span class="comment">//得到请求的控制器名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$action=$request-&gt;action(); <span class="comment">//得到请求的方法名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$name=$con.<span class="string">'/'</span>.$action;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$notCheck=<span class="keyword">array</span>(<span class="string">'Index/index'</span>,<span class="string">'Admin/lst'</span>,<span class="string">'Admin/logout'</span>); <span class="comment">//定义不用校验的控制器方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(session(<span class="string">'id'</span>)!=<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">if</span>(!in_array($name, $notCheck))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span>(!$auth-&gt;check($name,session(<span class="string">'id'</span>)))&#123;              <span class="comment">//调用check方法进行校验</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">$this</span>-&gt;error(<span class="string">'没有权限'</span>,url(<span class="string">'index/index'</span>)); </span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>到这里也基本可以结尾了，也希望你可以提出宝贵的意见让我们共同交流共同进步。</p>
]]></content>
      <categories>
        <category>Thinkphp5</category>
      </categories>
      <tags>
        <tag>Auth权限认证</tag>
      </tags>
  </entry>
  <entry>
    <title>tp5项目部署到linux服务器所采的坑</title>
    <url>/2019/12/24/1-tp5-linux/</url>
    <content><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p>今天把我开发的小程序部署到linux服务器里面配置了一下HTTPS简单上一下线  </p>
<h5 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h5><p>当我把ThinkPHP5部署到根目录的时候，提示某些模块找不到。</p>
<a id="more"></a>
<p>然后也上网搜了一下大致有两种情况  </p>
<ul>
<li>你的<strong>模块文件名大小写</strong>和请求的对应的路径大小写是否一致  </li>
<li><strong>引入大小写是否一致</strong><br>例如 <code>use  app\api\Model\Story as StoryModel;</code>中的<code>M</code>大写了在window是可以的（window不区分大小写）<br>如果在linux 便会报错 not found 找不到</li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>thinkphp5</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置SSL</title>
    <url>/2019/12/23/6-lnmp-ssl/</url>
    <content><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p>最近自己把“又”续费的服务器，搭建一个lnmp的集成环境，由于自己也是有个域名所以就进行了一下HTTPS的配置，同时也是为了微信小程序的上线，在这里我会分享自己的配置SSL的步骤以及遇到的一些坑。</p>
<a id="more"></a>
<h5 id="下载证书放入相应的目录执行lnmp命令"><a href="#下载证书放入相应的目录执行lnmp命令" class="headerlink" title="下载证书放入相应的目录执行lnmp命令"></a>下载证书放入相应的目录执行lnmp命令</h5><p>到相应的地方下载证书将以下两个文件复制到“有意义的目录”<br>我是在nginx/conf/ssl 建立了一个ssl文件夹将相应的文件复制到ssl目录（这个目录自己知道下面要用）<br><img src="http://xy.liruoning.cn/images/6-nginx-ssl-1.png" alt=""><br>然后我通过阅读 lnmp的README文件找到了如下命令<br><img src="http://xy.liruoning.cn/images/6-nginx-ssl-2.png" alt=""><br>执行后进行相关的内容的填写。填写完你会发现在你的vhost文件夹多了一个*.conf文件 SSL的相关配置就在里面。<br>然后<code>vim nginx.conf</code>到 加入如下语句包含相关配置  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include 你的路径&#x2F;vhost&#x2F;*.conf;</span></pre></td></tr></table></figure>

<p>这里有一点要注意 在包含的时候记得将 相关语句 写道server{}的外面 要不然会起冲突 （自己想一下也是server再包含server）肯定会报错  具体报错如下大家可以参考<br><img src="http://xy.liruoning.cn/images/6-nginx-ssl-3.png" alt=""><br>然后重启nginx 我用的是lnmp 所以直接执行如下命令就可以  </p>
<p>在这里我简单补充一下 在排查配置文件错误的时候有时候文件是正确无误，但是也会报错。<br>实际问题是进行语法检测的对象有问题;<br>要检测现有的修改过的Nginx配置是否有错误，不是只检测 .conf文件，而是不管任何时  候，始终都是去检测主文件 …/nginx/nginx.conf，只有这样，才能顺利的在对应的模块加载.conf 文件。<br>这样保证了配置的前后语境的正确性，这样才是真正的检测。<br>所以正确的检测修改的Nginx的语法是否错误的命令应该是： nginx -t -c …/nginx/nginx.conf ，如果配置文件有异常，会直接报出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lnmp nginx restart</span></pre></td></tr></table></figure>
<p>如果你是分别的搭建的nginx 去执行那个二进制文件也行~  </p>
<p>执行完看到了如下报错  <code>在这里可以 在相应的文件执行 :set nu命令找到对应的行数进行解决</code><br><img src="http://xy.liruoning.cn/images/6-nginx-ssl-4.png" alt=""><br>没找到文件去相应目录创建即可~</p>
<h5 id="最后测试"><a href="#最后测试" class="headerlink" title="最后测试"></a>最后测试</h5><p>执行命令重启nginx<br>再次访问就可以了<br><img src="http://xy.liruoning.cn/images/6-nginx-ssl-5.png" alt=""></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>window搭建wamp</title>
    <url>/2019/12/20/5-wamp-window/</url>
    <content><![CDATA[<h4 id="Blog起因"><a href="#Blog起因" class="headerlink" title="Blog起因"></a>Blog起因</h4><p>因为最近自己也是换电脑了所以打算写一个Blog记录一下安装的过程，虽然以前经常用也是老手了，但是自己一直也是没有记录所以想记录下来。</p>
<h4 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h4><p><strong>首先</strong> 打开浏览器输入wamp点击第一条 </p>
<a id="more"></a>
<p><img src="http://xy.liruoning.cn/images/5-wamp-1.png" alt=""> </p>
<p>点击 相应步骤 如下图</p>
<p><img src="http://xy.liruoning.cn/images/5-wamp-2.png" alt=""></p>
<p>在这里我要提一下我看网上有人安装出现如下错误：<br><strong>安装wamp时提示丢失MSVCR110.dll或者找不到什么的~</strong><br>一般都是缺少下列文件  </p>
<p><img src="http://xy.liruoning.cn/images/5-wamp-3.png" alt="">  </p>
<p>直接点击上述连接下载就可以了  </p>
<p>然后点击下列连接 到达下载界面一顿傻瓜操作就完事儿~ 了  </p>
<p><img src="http://xy.liruoning.cn/images/5-wamp-4.png" alt=""> </p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>wamp</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstrom配置断点调试</title>
    <url>/2019/12/19/8-phpstrom-%E6%96%AD%E7%82%B9/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>由于自己换电脑了，又重新下了一个phpstrom。因为自己开发需要断点。又重新配了一下所以顺便记录。</p>
<a id="more"></a>
<h4 id="访问官网下载相应的扩展文件并配置php-ini"><a href="#访问官网下载相应的扩展文件并配置php-ini" class="headerlink" title="访问官网下载相应的扩展文件并配置php.ini"></a>访问官网下载相应的扩展文件并配置php.ini</h4><p>首先访问<a href="https://xdebug.org下载相应的PHP版本步骤如下：" target="_blank" rel="noopener">https://xdebug.org下载相应的PHP版本步骤如下：</a><br>进入首页点击Install<br><img src="http://xy.liruoning.cn/images/8-phpstrom-1.png" alt=""><br>进入页面往下翻点击download<br><img src="http://xy.liruoning.cn/images/8-phpstrom-2.png" alt=""><br>点击custom….进入相应的界面<br><img src="http://xy.liruoning.cn/images/8-phpstrom-3.png" alt=""><br>打印自己的phpinfo查看页面源代码。复制到相应分析框内。<br><img src="http://xy.liruoning.cn/images/8-phpstrom-4.png" alt=""><br>下载分析出来的版本<br><img src="http://xy.liruoning.cn/images/8-phpstrom-5.png" alt=""><br>将文件复制到etc目录然后修改php.ini 开启debug重启服务就可以了<br><img src="http://xy.liruoning.cn/images/8-phpstrom-6.png" alt=""></p>
<h4 id="phpstrom中的操作"><a href="#phpstrom中的操作" class="headerlink" title="phpstrom中的操作"></a>phpstrom中的操作</h4><p>进入phpstrom添加web page:<br><img src="http://xy.liruoning.cn/images/8-phpstrom-7.png" alt=""><br><img src="http://xy.liruoning.cn/images/8-phpstrom-8.png" alt=""><br>写入相应的配置：<br><img src="http://xy.liruoning.cn/images/8-phpstrom-9.png" alt=""></p>
<ul>
<li>打个断点测试一把<br>打个断点，点击小臭虫如下图，进入断点了。<br><img src="http://xy.liruoning.cn/images/8-phpstrom-10.png" alt=""><br><img src="http://xy.liruoning.cn/images/8-phpstrom-11.png" alt=""><h4 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h4>以上就是断点调试的基本内容了。</li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>phpstrom</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Ajax</title>
    <url>/2019/12/06/4-ajax/</url>
    <content><![CDATA[<h4 id="ajax的介绍"><a href="#ajax的介绍" class="headerlink" title="ajax的介绍"></a>ajax的介绍</h4><p><strong>ajax</strong>是asynchronous javascript and xml的缩写，异步的JavaScript和xml技术 </p>
<a id="more"></a> 
<ul>
<li>什么是异步?<br>异步和同步是一对对立的概念：<br>所谓的<strong>同步</strong>，保持步伐一致，例如：我们在加班，饿了，想要买一点夜宵吃，让小王去买如果我们等到小王回来再继续做工作，说明步伐一致，也就是同步;用户的体验就不好。<br>所谓的<strong>异步</strong> ，就是小王去买夜宵的时候，开辟一个新通道，我们继续工作不影响后面的进度，用户体验也会不错。  <h4 id="ajax对象的创建"><a href="#ajax对象的创建" class="headerlink" title="ajax对象的创建"></a>ajax对象的创建</h4>主流浏览器是通过new XMLHttpRequest()获得<br>IE6使用：new ActiveXObject(“Msxml2.HTTP”)创建<br>IE5.5使用：new ActiveXObject(“Microsoft.HTTP”)  </li>
</ul>
<p>我们创建一个兼容性的判断  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var xhr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      xhr&#x3D;new XMLHttpRequest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;catch (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          xhr&#x3D;new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;catch (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          try&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              xhr&#x3D;new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;catch (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              alert(&quot;你的浏览器这个版本还可以用真是奇迹&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">              location.href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure>

<h4 id="ajax-请求服务器，服务器返回数据"><a href="#ajax-请求服务器，服务器返回数据" class="headerlink" title="ajax 请求服务器，服务器返回数据"></a>ajax 请求服务器，服务器返回数据</h4><p>通过上边的xhr对象，和服务器交互  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;参数1：GET 或 POST,http请求的方式</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;参数2: 服务器地址</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;参数3:是否为异步请求，true 是，false 表示非异步</span></pre></td></tr><tr><td class="code"><pre><span class="line">xhr.open(&#39;GET&#39;,&quot;1.php&quot;,true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;发出请求</span></pre></td></tr><tr><td class="code"><pre><span class="line">xhr.send();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;监视请求状态</span></pre></td></tr><tr><td class="code"><pre><span class="line">xhr.onreadystatechange&#x3D;function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;xhr.readyState;          &#x2F;&#x2F;获得xhr对象的状态：0 1 2 3 4 </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;xhr.status               &#x2F;&#x2F;服务器的状态   404 500 200</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (xhr.onreadystatechange()&#x3D;&#x3D;4 &amp;&amp; xhr.status&#x3D;&#x3D;200)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            alert(xhr.responseText);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="ajax几个状态的值"><a href="#ajax几个状态的值" class="headerlink" title="ajax几个状态的值"></a>ajax几个状态的值</h4><p>上边我写了 xhr.readyState 想必你还是不是很明白 0 1 2 3 4下面大概介绍一下<br>0 请求未初始化：open()之前<br>1 请求已提出： open()之后，send()之前<br>2 请求已发送： send()之后<br>3 请求处理中<br>4 请求已完成  </p>
<h4 id="get和post区别"><a href="#get和post区别" class="headerlink" title="get和post区别"></a>get和post区别</h4><ul>
<li>请求服务器时，携带数据（参数）的方式是不一样：<br>Get方式请求，在url地址栏传递数据<br>Post 方式请求需要设置头信息，并将数据通过send方法发送：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xhr.open(&quot;post&quot;,&#39;2.php&#39;,true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application&#x2F;x-www-form-urlencoded&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   var content&#x3D;&quot;name&#x3D;zhangsan&amp;age&#x3D;30&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   xhr.send(content);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   xhr.onreadystatechange&#x3D;function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       if (xhr.onreadystatechange()&#x3D;&#x3D;4 &amp;&amp; xhr.status&#x3D;&#x3D;200)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           alert(xhr.responseText);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<p>在服务器端打印相应的数据<br><img src="http://xy.liruoning.cn/images/4-ajax-2.png" align=left><br/><br/><br/><br><img src="http://xy.liruoning.cn/images/4-ajax-1.png" align=left><br/><br/><br/></p>
<ul>
<li>如果是GET请求并且url没有变化浏览器会缓存起来。<br>这里我要说明一下当我测试IE 11 10 9 8和chrome的时候<br>当使用IE 11 10 和chrome 的时候并未发现缓存的现象，当使用IE 9 8出现了缓存具体的测试步骤如下：<br>开始也是输入ajax必备的那几步然后请求 3.php 文件  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xhr.open(&quot;GET&quot;,&#39;3.php&#39;,true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   xhr.send();</span></pre></td></tr><tr><td class="code"><pre><span class="line">   xhr.onreadystatechange&#x3D;function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       if (xhr.onreadystatechange()&#x3D;&#x3D;4 &amp;&amp; xhr.status&#x3D;&#x3D;200)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           alert(xhr.responseText);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<p>3.php代码如下：  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$fp= fopen(<span class="string">"cache.txt"</span>,<span class="string">"a"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fwrite($fp,<span class="string">"hello\r\t"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fclose($fp);</span></pre></td></tr></table></figure>

<p>最后通过浏览器的请求查看cache.txt文件写入了多少个hello。  </p>
<p>如果想要解决缓存现象只需要在请求的url里面拼装一个随机数即可。<br>代码如下：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xhr.open(&quot;GET&quot;,&#39;3.php?&#39;+Math.random(),true);</span></pre></td></tr></table></figure>

<ul>
<li>GET方式传输的数据比较小，2K左右（Chrome浏览器大概有8K左右），POST原则上不受限制，但是受PHP的配置文件的限制  </li>
</ul>
<h4 id="数据传输时特殊字符的转码"><a href="#数据传输时特殊字符的转码" class="headerlink" title="数据传输时特殊字符的转码"></a>数据传输时特殊字符的转码</h4><p>当我们请求服务器时传输php&amp;ajax数据的时候。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> var name &#x3D; &quot;php&amp;ajax&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> xhr.open(&quot;GET&quot;,&#39;4.php?&#39;+name,true);</span></pre></td></tr><tr><td class="code"><pre><span class="line"> xhr.send();</span></pre></td></tr><tr><td class="code"><pre><span class="line"> xhr.onreadystatechange&#x3D;function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (xhr.onreadystatechange()&#x3D;&#x3D;4 &amp;&amp; xhr.status&#x3D;&#x3D;200)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        alert(xhr.responseText);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>结果如下：<br><img src="http://xy.liruoning.cn/images/4-ajax-3.png" alt=""></p>
<p>原因在于php&amp;ajax里面的特殊字符把内容分开了。  </p>
<p>解决：如果通过url传递一些中文、特殊字符，需要使用url编码(encodeURIComponent函数进行转码)之后再传到服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var name &#x3D; &quot;php&amp;ajax&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   name&#x3D;encodeURIComponent(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   xhr.open(&quot;GET&quot;,&#39;4.php?name&#x3D;&#39;+name,true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">   xhr.send();</span></pre></td></tr><tr><td class="code"><pre><span class="line">   xhr.onreadystatechange&#x3D;function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       if (xhr.onreadystatechange()&#x3D;&#x3D;4 &amp;&amp; xhr.status&#x3D;&#x3D;200)</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           alert(xhr.responseText);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="http://xy.liruoning.cn/images/4-ajax-4.png" alt=""></p>
<p>通过对比问题还是解决了。  </p>
<h4 id="服务器回应的数据格式"><a href="#服务器回应的数据格式" class="headerlink" title="服务器回应的数据格式"></a>服务器回应的数据格式</h4><ul>
<li><p>字符串类型<br>JS接收的时候使用xhr.responseText,如果服务器给ajax回应<strong>数组</strong>的形式的时候需要序列化（json_encode）json的格式,在返回<br>json数据，指的是一种数据格式，而{}是JavaScript的对象<br>区别在于：json数据中，没有方法体，而对象有，所以为了避免歧义，我们称呼json的时候，表示是一种数据格式，而我们说对象的时候，指的就是属性、方法的集合<br><strong><em>说明</em></strong>：JavaScript接收到数据之后，仅仅是字符串类型的json格式的数据，操作起来很不方便，如果json数据能够转换成JavaScript的字面量对象的话，就很好了<br>需要通过eval()函数实现，原理：eval（）函数会将小括号中的参数作为表达式运行</p>
</li>
<li><p>XML格式的数据<br>xml也是一种服务器端的数据格式，由于xml格式的数据操作起来比较繁琐，所以现在基本上被json替代<br>JavaScript在接收xml格式的数据的时候，使用xhr.responseXML接收，接收到的是XML文档对象<br>接下来的操作和我们通过JavaScript操作html文档是一样的，也是通过DOM进行操作，但是操作xml比较复杂，所以基本是被替代的  </p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装ajax</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $$=&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    request:<span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//兼容各个浏览器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> xhr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//尝试执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            xhr=<span class="keyword">new</span> XMLHttpRequest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">catch</span> (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//尝试使用IE6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                xhr=<span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;<span class="keyword">catch</span> (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">try</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="comment">//尝试使用IE5.5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    xhr=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;<span class="keyword">catch</span> (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    alert(<span class="string">"你的浏览器这个版本还可以用真是奇迹"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    location.href=<span class="string">"http://www.baidu.com"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//判断是GET请求还是POST请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(options.method==<span class="string">'GET'</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">var</span> content = <span class="built_in">encodeURIComponent</span>(options.data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//缓存怎么解决</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">var</span> url = options.url+<span class="string">'?'</span>+<span class="built_in">Math</span>.random()+<span class="string">'&amp;'</span>+content;   <span class="comment">//1.php?1234&amp;name=zhangsan</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            xhr.open(options.method,url,<span class="literal">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            xhr.send();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (options.method==<span class="string">'POST'</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            xhr.open(options.method,options.url,<span class="literal">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            xhr.send(options.data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//监视xhr请求的状态、以及服务器的状态</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//只需要监视请求成功的时候，接收服务器返回的数据接口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(options.dataType==<span class="string">'text'</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">var</span> result = xhr.responseText;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(options.dataType==<span class="string">'xml'</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">var</span> result = xhr.responseXML;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(options.dataType==<span class="string">'json'</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="built_in">eval</span>(<span class="string">'var result ='</span>+xhr.responseText);<span class="comment">//&#123;"name":"张三"&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//拿到数据之后，怎么处理？传递到回调函数中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                options.success(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将来可能会变的数据使用参数传递，以对象的格式传递</span></pre></td></tr><tr><td class="code"><pre><span class="line"> $$.request(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 	method:&#39;get&#39;,	&#x2F;&#x2F;请求的方式</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 	url:&#39;1.php&#39;,	&#x2F;&#x2F;请求的地址</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 	data:&#39;&#39;,		&#x2F;&#x2F;请求时携带的数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;期望服务器返回什么类型的数据: text字符串、xml文档、json:JavaScript对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">	dataType:&#39;json&#39;,	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	success:function(result)&#123;	&#x2F;&#x2F;请求成功时的函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">		console.log(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#x2F;&#x2F;成功之后的业务处理</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;	</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>到此初识ajax就结束了，以后还有一些进阶知识还要更新。</p>
]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>windows搭建redis</title>
    <url>/2019/12/05/3-redis-window/</url>
    <content><![CDATA[<h4 id="搭建工具"><a href="#搭建工具" class="headerlink" title="搭建工具"></a>搭建工具</h4><p>wamp,redis目前稳定版通过<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a> 安装<br><img src="http://xy.liruoning.cn/images/3-redis-window-1.png" align=left><br/><br/><br/></p>
<a id="more"></a>

<h4 id="下载测试"><a href="#下载测试" class="headerlink" title="下载测试"></a>下载测试</h4><p>下载后将安装包放入你要安装的目录然后进行解压<br>解压之后cd 到相关目录执行<code>redis-server</code>命令出现一下界面表示安装成功<br><img src="http://xy.liruoning.cn/images/3-redis-window-2.png" align=left><br>完成后我们新开一个CMD端口测试是否可以对redis进行相关命令如下图就完成了😊<br><img src="http://xy.liruoning.cn/images/3-redis-window-3.png" align=left><br/><br/><br/> <br/> </p>
<h4 id="redis后台运行"><a href="#redis后台运行" class="headerlink" title="redis后台运行"></a>redis后台运行</h4><p>由上边的redis启动服务每次启动都要开一个Dos窗口会很麻烦所以我们要把redis后台运行<br>进入redis目录执行以下命令安装 redis服务  </p>
<p><code>redis-server --service-install redis.windows.conf --loglevel verbose</code>  </p>
<p>出现下面的界面则表示执行成功了<br><img src="http://xy.liruoning.cn/images/3-redis-window-4.png" align=left><br>然后执行一下命令进行打开和关闭</p>
<p><code>redis-server --service-start //( 启动服务 )</code><br><code>redis-server --service-stop //（停止服务）</code>   </p>
<h4 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h4><p>当我们运行redis的时候可能会出现端口被占用的情况或者放入服务器使用默认端口会很危险所以需要修改。<br>我们进入redis目录找到相关配置文件 <code>redis-windows-conf</code> ，进入配置文件找到port 进行修改<br><img src="http://xy.liruoning.cn/images/3-redis-window-5.png" align=left> <br/><br/><br>重启redis服务 再次输入<code>redis-cli -p 5525</code>命令就可以连接了</p>
<h4 id="PHP安装redis扩展"><a href="#PHP安装redis扩展" class="headerlink" title="PHP安装redis扩展"></a>PHP安装redis扩展</h4><p>首先进入 <a href="https://pecl.php.net/" target="_blank" rel="noopener">https://pecl.php.net/</a> 再search搜索redis<br>点击redis下载相关配置<br><img src="http://xy.liruoning.cn/images/3-redis-window-6.png" align=left><br>在网页上打印一下 <code>phpinfo</code> 查看一下三个信息 下载对应的扩展<br><img src="http://xy.liruoning.cn/images/3-redis-window-8.png" align=left><br/><br>点击一下内容下载stable 版的 window<br><img src="http://xy.liruoning.cn/images/3-redis-window-9.png" align=left><br>点击下载对应的版本儿~<br><img src="http://xy.liruoning.cn/images/3-redis-window-10.png" align=left><br/><br/><br/><br>下载解压找到 php_redis.dll文件<br><img src="http://xy.liruoning.cn/images/3-redis-window-11.png" align=left></p>
<p>复制到PHP的etc 目录下，然后修改php.ini文件加入extension=php_redis.dll<br>重启服务 进入phpinfo页面看到搜索redis如果出现一下页面就成功了。<br><img src="http://xy.liruoning.cn/images/3-redis-window-11.png" align=left><br>到此结束可以折腾你的redis了~</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx编译安装</title>
    <url>/2019/12/02/2-nginx/</url>
    <content><![CDATA[<h4 id="所用配置"><a href="#所用配置" class="headerlink" title="所用配置"></a>所用配置</h4><p>Centos7.6, nginx-1.16.1  </p>
<h4 id="第一步先去官网下载稳定版的nginx"><a href="#第一步先去官网下载稳定版的nginx" class="headerlink" title="第一步先去官网下载稳定版的nginx"></a>第一步先去官网下载稳定版的nginx</h4><p><a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a> 网站下载稳定版的nginx安装包  </p>
<a id="more"></a>
<img src='http://xy.liruoning.cn/images/2-nginx-1.png'/>
将安装包放入服务器的 /usr/local/src 目录下
<img src='http://xy.liruoning.cn/images/2-nginx-2.png' align='left' /><br/><br/>

<h4 id="解压编译安装"><a href="#解压编译安装" class="headerlink" title="解压编译安装"></a>解压编译安装</h4><p>通过命令解压安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf nginx-1.16.1.tar.gz</span></pre></td></tr></table></figure>

<p>cd 进入相关文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx-1.16.1/</span></pre></td></tr></table></figure>

<p>输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx</span></pre></td></tr></table></figure>

<p>通过错误分析要安装的包（首次执行应该会报错在这里我通过错误来判断缺少的库)</p>
<p><img src='http://xy.liruoning.cn/images/2-nginx-3.png' align='left' /><br/><br/><br>根据错误提示安装pcre  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install pcre</span></pre></td></tr></table></figure>

<p>安装pcre相关的头文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install pcre-devel</span></pre></td></tr></table></figure>

<p>这时候我们再次执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx</span></pre></td></tr></table></figure>

<p><img src='http://xy.liruoning.cn/images/2-nginx-4.png' align='left' /><br/><br/><br>都是大同小异分别执行一下两个命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install zlib  </span></pre></td></tr><tr><td class="code"><pre><span class="line">yum install zlib-devel</span></pre></td></tr></table></figure>

<p>完成之后在执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx</span></pre></td></tr></table></figure>

<p>也就没有报错了<br>在这里大概讲一下 ./configure<br>Configure是一个可执行脚本，它有很多选项，在待安装的源码路径下使用命令./configure –help输出详细的选项列表。<br>其中–prefix选项就是配置安装的路径。<br>如果不配置该选项，安装后可执行文件默认放在/usr /local/bin，库文件默认放在/usr/local/lib，配置文件<br>默认放在/usr/local/etc，其它的资源文件放在/usr /local/share，比较分散。<br>为了便于集中管理某个软件的各种文件，可以配置–prefix，如：<br>./configure –prefix=/usr/local<br>可以把所有资源文件放在/usr/local的路径中，就不会分散了。<br>用了—prefix选项的另一个好处是卸载软件或移植软件。当某个安装的软件不再需要时，只须简单地删除该安装目录，就可以把软件卸载得<br>干干净净；移植软件只需拷贝整个目录到另外一个机器即可（相同的操作系统）。  </p>
<p>然后执行 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span></pre></td></tr></table></figure>

<p>编译安装<br>安装成功之后cd 到usr/local/nginx<br>你会发现四个目录<br>….conf 配置文件<br>… html 网页文件<br>…logs  日志文件<br>…sbin  主要二进制程序<br>然后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./sbin/nginx</span></pre></td></tr></table></figure>

<p>二进制文件跑起~😊<br>访问自己的网站     </p>
<p><img src='http://xy.liruoning.cn/images/2-nginx-5.png' align='left' /><br/><br/><br><br/><br/><br/><br>完成~<br>其中感谢<br><a href="https://blog.csdn.net/qq_27984355/article/details/81603315" target="_blank" rel="noopener">https://blog.csdn.net/qq_27984355/article/details/81603315</a> 讲解./configure</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>PHP,Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>文件的上传和下载</title>
    <url>/2019/11/26/1-file-hexo/</url>
    <content><![CDATA[<h4 id="文件上传原理说明"><a href="#文件上传原理说明" class="headerlink" title="文件上传原理说明"></a>文件上传原理说明</h4><p>文件上传，其实也是通过表单提交的，表单提交的数据分为如下两种：<br>（1）字节流数据：输入框、单选框、复选框、多行文本域等都是通过字节的数据传输到服务器，服务器通过$_GET  $_POST接收  </p>
<a id="more"></a>
<p>（2）二进制文件流的形式；当需要提交一些文件的时候，由于文件采用的二进制的形式进行编码，所以需要先将二进制文件转码，然后再提交到服务器<br>提交的时候，需要通过input type=”file” 文件域上传，服务器接收的时候，通过$_FILES进行接收<br>注意：如何将表单的数据，以二进制流的形式进行传输，必须在表单form标签增加一个属性：enctype=”multipart/form-data”<br>例如下面先创建一个表单提交：<br><img src='http://xy.liruoning.cn/images/1-file-1.png' align='left' /><br><br /><br /><br /><br /><br /><br /><br /><br/></p>
<p>提交之后在服务器端接收并打印：<br><img src='http://xy.liruoning.cn/images/1-file-2.png' align='left' /><br><br /><br /><br /><br /><br>在这里简单讲一下MIME类型：<br>多用途internet邮件扩展，mime类型的出现，跟着电子邮件出现的。<br>早期，发送电子邮件的时候，里面可能会附带一些附件，计算机系统根据附件的类型找到对应的设备打开，例如：传输的是视频，就会找到视频播放器去打开，如果传输的是网页文件，那么会自动使用浏览器去打开<br>媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。<br>通用结构：<br><code>type/subtype</code><br>例如：<br>    text/html，属于文本文件，html这样的文本文件<br>    image/jpg，属于图像大类，jpg这种类型的图像<br>tmp_name详解：<br>tmp—— temp—-temporary，该单词的意思是临时的。  </p>
<h4 id="文件上传案例"><a href="#文件上传案例" class="headerlink" title="文件上传案例"></a>文件上传案例</h4><p>当我们点击提交表单时，会将file文件域里面的文件，先上传到临时的目录（可以在php的配置文件中设置），默认的临时目录是tmp，如果需要持久的保存，需要通过php的函数move_uploaded_file()移动到指定的位置，如果不移动，当php脚本执行结束，临时文件就会消失。<br>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$des = <span class="string">'uploads/amao.jpeg'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'user_pic'</span>][<span class="string">'tmp_name'</span>],$des))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"上传成功"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"上传失败"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>通过相关函数将文件移动到自己想要的目录下面</p>
<h4 id="防止文件上传过大"><a href="#防止文件上传过大" class="headerlink" title="防止文件上传过大"></a>防止文件上传过大</h4><p>思路：首先我们给定一个最大的限制然后我们在哪上传的文件和最大的限制进行比较文件的大小单位为字节<br>1024字节 = 1KB<br>1024KB   = 1MB<br>1024MB   =1GB  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$destination=<span class="string">'uploads/http://xy.liruoning.cn/images'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$maxsize= <span class="number">80</span>*<span class="number">1024</span>;    <span class="comment">//20kb</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">'user_pic'</span>][<span class="string">'size'</span>]&gt;$maxsize)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"图片太大服务器承载不了"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">exit</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'user_pic'</span>][<span class="string">'tmp_name'</span>],$destination))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"上传成功"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"上传失败"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>加入判断代码如果图片过大就进行退出  </p>
<p>确实阻止了文件的上传，但是还有一个小问题：<br>虽然上传时，拦截了，但是该文件还是在临时的文件夹中走了一圈，如何实现，如果文件过大的话，连临时目录都不让其进去<br>需要修改php的配置文件了，将其最大的限制修改为2MB，这样，让我们上传的文件大小超过2MB，就无法进入到临时目录<br><img src='http://xy.liruoning.cn/images/1-file-3.png' align='left' /><br>我们临时将表单提交的最大限制修改为80MB<br><img src='http://xy.liruoning.cn/images/1-file-4.png' align='left' />   </p>
<h4 id="防止文件被覆盖"><a href="#防止文件被覆盖" class="headerlink" title="防止文件被覆盖"></a>防止文件被覆盖</h4><p>如果多个用户，同时上传文件，如果文件的名字固定死的话，所有用户上传的文件名字都会一样，将来很容易出现文件被覆盖的情况<br>思路：上传成功之后，给文件命名时，取一个唯一的、随机数  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$filename= uniqid(<span class="string">'tn_'</span>,<span class="keyword">true</span>); <span class="comment">//参数1为前缀，参数2：布尔值，如果为true更具有唯一性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ext= strrchr($_FILES[<span class="string">'user_pic'</span>][<span class="string">'name'</span>],<span class="string">'.'</span>); <span class="comment">//strrchr — 查找指定字符在字符串中的最后一次出现。也就是说$ext获取了相应的扩展名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$new_filename=$filename.$ext; <span class="comment">//最后进行拼接</span></span></pre></td></tr></table></figure>

<h4 id="分目录存储图片"><a href="#分目录存储图片" class="headerlink" title="分目录存储图片"></a>分目录存储图片</h4><p>可以缓解存储压力和便于查找<br>核心代码  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$year=date(<span class="string">"Y"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$mouthday=date(<span class="string">"md"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$destination=<span class="string">'uploads/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$destination.=$year;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!is_dir($destination))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mkdir($destination,<span class="string">'0777'</span>,<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$destination=$destination.<span class="string">"/"</span>.$mouthday.<span class="string">"/"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!is_dir($destination))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mkdir($destination,<span class="string">'0777'</span>,<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="控制上传的类型"><a href="#控制上传的类型" class="headerlink" title="控制上传的类型"></a>控制上传的类型</h4><p>思路：首先，定义一个数组保存支持的上传的文件的类型，然后再拿上传的文件的实际类型和支持的类型进行比较<br>方法一：  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$allow_type=<span class="keyword">array</span>(<span class="string">'image/jpg'</span>,<span class="string">"image/jpeg"</span>,<span class="string">"image/png"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$true_type=$_FILES[<span class="string">'user_pic'</span>][<span class="string">'type'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_array($true_type,$allow_type))  <span class="comment">//in_array — 检查数组中是否存在某个值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"不支持该类型"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">exit</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>通过上边的代码我们可以发现当我们把一个word文档改为.png结尾的时候他还是会通过的，所以非常的危险很容易对我们的网站进行攻击<br>解决方法：需要借助PHP提供的类（php 内置的一个类）finfo，在手册的位置：</p>
<p><img src='http://xy.liruoning.cn/images/1-file-5.png' align='left' /></p>
<br/><br/><br/><br/><br/><br/><br/><br/><br/>
完成对文件MIME类型检测  
加入核心代码  

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$allow_type=<span class="keyword">array</span>(<span class="string">'image/jpg'</span>,<span class="string">"image/jpeg"</span>,<span class="string">"image/png"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$finfo = <span class="keyword">new</span> finfo(FILEINFO_MIME_TYPE);  </span></pre></td></tr><tr><td class="code"><pre><span class="line">$true_type=$finfo-&gt;file($_FILES[<span class="string">'user_pic'</span>][<span class="string">'type'</span>]); <span class="comment">//获取临时文件的类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_array($true_type,$allow_type))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"不支持该类型"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">exit</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="附上这次对文件处理的全部代码"><a href="#附上这次对文件处理的全部代码" class="headerlink" title="附上这次对文件处理的全部代码"></a>附上这次对文件处理的全部代码</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//控制文件上传的大小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$year=date(<span class="string">"Y"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$mouthday=date(<span class="string">"md"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$destination=<span class="string">'uploads/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$maxsize= <span class="number">80</span>*<span class="number">1024</span>;    <span class="comment">//20kb</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">'user_pic'</span>][<span class="string">'size'</span>]&gt;$maxsize)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"图片太大服务器承载不了"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">exit</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$filename= uniqid(<span class="string">'tn_'</span>,<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ext= strrchr($_FILES[<span class="string">'user_pic'</span>][<span class="string">'name'</span>],<span class="string">'.'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$new_filename=$filename.$ext;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$destination.=$year;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!is_dir($destination))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mkdir($destination,<span class="string">'0777'</span>,<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$destination=$destination.<span class="string">"/"</span>.$mouthday.<span class="string">"/"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!is_dir($destination))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mkdir($destination,<span class="string">'0777'</span>,<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$destination.=$new_filename;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$allow_type=<span class="keyword">array</span>(<span class="string">'image/jpg'</span>,<span class="string">"image/jpeg"</span>,<span class="string">"image/png"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$finfo = <span class="keyword">new</span> finfo(FILEINFO_MIME_TYPE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">$true_type=$finfo-&gt;file($_FILES[<span class="string">'user_pic'</span>][<span class="string">'type'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_array($true_type,$allow_type))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"不支持该类型"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">exit</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'user_pic'</span>][<span class="string">'tmp_name'</span>],$destination))</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"上传成功"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">echo</span> <span class="string">"上传失败"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>php加密函数</title>
    <url>/2019/11/20/9-php%E5%8A%A0%E5%AF%86%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h4 id="PHP加密函数的介绍"><a href="#PHP加密函数的介绍" class="headerlink" title="PHP加密函数的介绍"></a>PHP加密函数的介绍</h4><ul>
<li>PHP内置有多种加密函数 这里主要介绍3种：crypt()函数 、md5()函数和sha1()函数<a id="more"></a>
<h4 id="crypt-可以完成单向加密功能（密文不可还原成明码）"><a href="#crypt-可以完成单向加密功能（密文不可还原成明码）" class="headerlink" title="crypt()可以完成单向加密功能（密文不可还原成明码）"></a><strong>crypt()</strong>可以完成单向加密功能（密文不可还原成明码）</h4>//str 是需要加密的字符串 salt 是加密时使用的干扰串<br>格式：string crypt(string str , string salt);<br>注：如果省略第二个参数则随机生成一个干扰串<br>使用crypt函数加密保护重要的数据并不是最安全的 只能用在安全性较低系统 如果想要提高安全性 则需要使用md5()函数进行加密<h4 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a><strong>md5()</strong>函数</h4>使用的是MD5（Message-DigestAlgorithm 5：信息-摘要算法）算法，它的作用是把不同长度的数据信息 经过一系列的算法计算成128位的数值，就是把一个任意长度的字节串（这种变化只与字节的值有关，与字符集和编码无关） 变换成一定长的大整数<br>String md5(string str,bool raw_output); if raw_output ==true return 二进制形式的密文 raw_output 默认位false;<br><img src="http://xy.liruoning.cn/images/9-jiami-1.png" alt=""><h4 id="sha1-加密函数使用的Secure-Hash-Algorithm-（安全哈希算法）"><a href="#sha1-加密函数使用的Secure-Hash-Algorithm-（安全哈希算法）" class="headerlink" title="sha1()加密函数使用的Secure Hash Algorithm （安全哈希算法）"></a><strong>sha1()</strong>加密函数使用的Secure Hash Algorithm （安全哈希算法）</h4>String sha1(string str,bool raw_output);它的使用和MD5函数相同 raw_output如果为真返回20位的二进制数<br><img src="http://xy.liruoning.cn/images/9-jiami-2.png" alt=""></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
</search>
